{"version":3,"file":"LDESStore.js","sourceRoot":"","sources":["../src/LDESStore.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    BasicRepresentation,\n    ChangeMap,\n    Conditions,\n    CONTENT_TYPE,\n    ensureTrailingSlash,\n    getLoggerFor,\n    guardedStreamFrom,\n    INTERNAL_QUADS,\n    MetadataRecord,\n    NotFoundHttpError,\n    Patch,\n    Representation,\n    RepresentationMetadata,\n    RepresentationPreferences,\n    ResourceIdentifier,\n    ResourceStore,\n    trimLeadingSlashes\n} from \"@solid/community-server\";\nimport * as RDF from \"@rdfjs/types\";\nimport {CacheDirectives, Member, RelationParameters, TREE} from \"@treecg/types\";\nimport {RDF as RDFT} from \"@treecg/types/dist/lib/Vocabularies\";\nimport {cacheToLiteral} from \"./util/utils\";\nimport {DataFactory, Quad_Object} from \"n3\";\nimport {PrefixView} from \"./PrefixView\";\nimport {HTTP} from \"./util/Vocabulary\";\n\nconst {namedNode, quad, blankNode, literal} = DataFactory;\n\n/**\n * ResourceStore which uses {@link PrefixView} for backend access.\n *\n * The LDESStore provides read operations for the resources which are retrieved using the view of the PrefixView.\n *\n * There are two types of requests that can be executed:\n *  * Base request: A request to read all views stored in all databases,\n *  * Fragment request: A request to a fragment within a specific view.\n *\n */\nexport class LDESStore implements ResourceStore {\n    protected readonly logger = getLoggerFor(this);\n    id: string;\n    base: string;\n    views: PrefixView[];\n\n    initPromise: any;\n\n    /**\n     * @param id - The URI of the published LDES.\n     * @param views - The mounted views that expose this LDES.\n     * @param base - The base URI for the Solid Server.\n     * @param relativePath - The relative path to the LDES.\n     */\n    constructor(id: string, views: PrefixView[], base: string, relativePath: string) {\n        this.id = id;\n        this.base = ensureTrailingSlash(base + trimLeadingSlashes(relativePath));\n        this.views = views;\n\n        this.initPromise = Promise.all(views.map(async view =>\n            view.view.init(this.base, view.prefix)\n        ));\n        this.logger.info(`The LDES descriptions can be found at ${this.base}`);\n        console.log(`The LDES descriptions can be found at ${this.base}`);\n        this.logger.info(`Mounting ${this.views.length} LDES views ${this.views.map(x => x.prefix).join(\", \")}`);\n        console.log(`Mounting ${this.views.length} LDES views ${this.views.map(x => x.prefix).join(\", \")}`);\n    }\n\n    getRepresentation = async (identifier: ResourceIdentifier, preferences: RepresentationPreferences, conditions?: Conditions): Promise<Representation> => {\n        this.logger.info(\"Get representation\");\n        await this.initPromise;\n\n        if (ensureTrailingSlash(identifier.path) === this.base) {\n            // We got a base request, let's announce all mounted view\n            const quads = await this.getViewDescriptions();\n\n            return new BasicRepresentation(\n                guardedStreamFrom(quads),\n                new RepresentationMetadata(this.getMetadata({pub: true, immutable: true}))\n            );\n        }\n\n        const view = this.views.find((pv) => identifier.path.indexOf(pv.prefix) >= 0);\n        if (!view) {\n            this.logger.info(\"No LDES view found for identifier \" + identifier.path);\n            throw new NotFoundHttpError(\"No LDES found!\");\n        }\n\n        let idStart = identifier.path.indexOf(view.prefix) + view.prefix.length;\n        // pesky trailing slashes\n        if (identifier.path.charAt(idStart) == \"/\") {\n            idStart += 1;\n        }\n        const baseIdentifier = identifier.path.substring(0, idStart);\n        let bucketIdentifier = identifier.path.substring(idStart);\n\n        const fragment = await view.view.getFragment(bucketIdentifier);\n        const quads: Array<RDF.Quad> = [];\n\n        if (view.view.getRoot() === identifier.path) {\n            quads.push(...await view.view.getMetadata(this.id));\n            quads.push(quad(\n                namedNode(this.id),\n                TREE.terms.view,\n                namedNode(identifier.path)\n            ));\n        }\n        quads.push(quad(\n            namedNode(identifier.path),\n            RDFT.terms.type,\n            TREE.terms.custom(\"Node\")\n        ));\n\n        const relations = await fragment.getRelations();\n        const members = await fragment.getMembers();\n\n        relations.forEach(relation => this.addRelations(quads, identifier.path, baseIdentifier, relation));\n        members.forEach(m => this.addMember(quads, m));\n\n        return new BasicRepresentation(\n            guardedStreamFrom(quads),\n            new RepresentationMetadata(this.getMetadata(await fragment.getCacheDirectives()))\n        );\n    }\n\n    private async getViewDescriptions(): Promise<RDF.Quad[]> {\n        const quads = [];\n\n        for (let view of this.views) {\n            quads.push(...await view.view.getMetadata(this.id));\n            const mRoot = view.view.getRoot();\n            if (mRoot) {\n                quads.push(quad(\n                    namedNode(this.id),\n                    TREE.terms.view,\n                    namedNode(mRoot)\n                ));\n            }\n        }\n        return quads;\n    }\n\n    private getMetadata(cache?: CacheDirectives): MetadataRecord {\n        if (!cache) return {[CONTENT_TYPE]: INTERNAL_QUADS};\n\n        const cacheLit = cacheToLiteral(cache);\n        return {[HTTP.cache_control]: literal(cacheLit), [CONTENT_TYPE]: INTERNAL_QUADS};\n    }\n\n    private addRelations(quads: Array<RDF.Quad>, identifier: string, baseIdentifier: string, relation: RelationParameters) {\n        const bn = blankNode();\n        quads.push(quad(\n            namedNode(identifier),\n            TREE.terms.relation,\n            bn\n        ));\n\n        quads.push(quad(\n            bn,\n            RDFT.terms.type,\n            namedNode(relation.type)\n        ))\n\n        quads.push(quad(\n            bn,\n            TREE.terms.node,\n            namedNode(baseIdentifier + relation.nodeId)\n        ))\n\n        if (relation.path)\n            quads.push(quad(\n                bn,\n                TREE.terms.path,\n                <RDF.Quad_Object>relation.path\n            ))\n\n        if (relation.value)\n            relation.value.forEach(value =>\n                quads.push(quad(\n                    bn,\n                    TREE.terms.value,\n                    <RDF.Quad_Object>value\n                ))\n            )\n    }\n\n    private addMember(quads: Array<RDF.Quad>, member: Member) {\n        quads.push(quad(\n            namedNode(this.id),\n            TREE.terms.member,\n            <Quad_Object>member.id\n        ));\n        quads.push(...member.quads);\n    }\n\n    setRepresentation = async (identifier: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Set representation\", identifier, representation, conditions)\n        throw \"Not implemented set\"\n    }\n\n    addResource = async (container: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Add representation\", container, representation, conditions)\n        throw \"Not implemented add\"\n    }\n\n    deleteResource = async (identifier: ResourceIdentifier, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Delete representation\", identifier, conditions)\n        throw \"Not implemented delete\"\n    }\n\n    modifyResource = async (identifier: ResourceIdentifier, patch: Patch, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Modify representation\", identifier, patch, conditions)\n        throw \"Not implemented modify\"\n    }\n\n    hasResource = async (_id: ResourceIdentifier, _conditions?: Conditions | undefined): Promise<boolean> => {\n        return false;\n    }\n}\n"]}