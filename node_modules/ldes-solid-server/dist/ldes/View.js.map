{"version":3,"file":"View.js","sourceRoot":"","sources":["../../src/ldes/View.ts"],"names":[],"mappings":"","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {Fragment} from \"../index\";\n\n/**\n * Interface representing a LDES view. All mounted view should serve the same dataset.\n */\nexport interface View {\n    /**\n     * Initialize function is called when mounting this view (before any other invocation).\n     * Also returns the URI that represents the root of the view (or undefined for partial view or something).\n     *\n     * @param base - The base URI for this LDES store\n     * @param prefix - The prefix for this view\n     * @returns - Promise that results to the optional root of this view\n     */\n    init(base: string, prefix: string): Promise<void>;\n\n    /**\n     * Returns the view URI, the root Node of the LDES.\n     */\n    getRoot(): string | undefined;\n\n    /**\n     * Function requesting the metadata of this view, this metadata should contain all required information for query agents.\n     *\n     * @param ldes - The URI of the LDES.\n     */\n    getMetadata(ldes: string): Promise<RDF.Quad[]>;\n\n    /**\n     * Function requesting a single {@link Fragment}.\n     *\n     * @param identifier - identifier for this fragment (without the hostname and without the view prefix)\n     */\n    getFragment(identifier: string): Promise<Fragment>;\n}\n"]}