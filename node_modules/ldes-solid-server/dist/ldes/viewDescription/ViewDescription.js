"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketizeStrategy = exports.IngestorClient = exports.ViewDescription = void 0;
const n3_1 = require("n3");
var namedNode = n3_1.DataFactory.namedNode;
const types_1 = require("@treecg/types");
const community_server_1 = require("@solid/community-server");
const Vocabulary_1 = require("../../util/Vocabulary");
var literal = n3_1.DataFactory.literal;
class ViewDescription {
    constructor(id, managedBy, eventStreamIdentifier, rootNodeIdentifier) {
        this._id = id;
        this._managedBy = managedBy;
        this._servesDataset = eventStreamIdentifier;
        this._endpointURL = rootNodeIdentifier;
    }
    get id() {
        return this._id;
    }
    get managedBy() {
        return this._managedBy;
    }
    get servesDataset() {
        return this._servesDataset;
    }
    get endpointURL() {
        return this._endpointURL;
    }
    getStore() {
        const store = new n3_1.Store();
        store.addQuad(namedNode(this.id), community_server_1.RDF.terms.type, types_1.TREE.terms.custom("ViewDescription"));
        store.addQuad(namedNode(this.id), Vocabulary_1.DCAT.terms.servesDataset, namedNode(this.servesDataset));
        store.addQuad(namedNode(this.id), Vocabulary_1.DCAT.terms.endpointURL, namedNode(this.endpointURL));
        store.addQuad(namedNode(this.id), types_1.LDES.terms.custom("managedBy"), namedNode(this.managedBy.id));
        store.addQuads(this.managedBy.getStore().getQuads(null, null, null, null));
        return store;
    }
    quads() {
        return this.getStore().getQuads(null, null, null, null);
    }
}
exports.ViewDescription = ViewDescription;
class IngestorClient {
    constructor(id, bucketizeStrategy, type) {
        this._bucketizeStrategy = bucketizeStrategy;
        this._id = id;
        this._type = type;
    }
    get bucketizeStrategy() {
        return this._bucketizeStrategy;
    }
    get id() {
        return this._id;
    }
    get type() {
        return this._type;
    }
    getStore() {
        const store = new n3_1.Store();
        store.addQuad(namedNode(this.id), community_server_1.RDF.terms.type, namedNode(this.type));
        store.addQuad(namedNode(this.id), types_1.LDES.terms.custom("bucketizeStrategy"), namedNode(this.bucketizeStrategy.id));
        store.addQuads(this.bucketizeStrategy.getStore().getQuads(null, null, null, null));
        return store;
    }
}
exports.IngestorClient = IngestorClient;
class BucketizeStrategy {
    constructor(id, bucketType, path, pageSize) {
        this._bucketType = bucketType;
        this._id = id;
        this._pageSize = pageSize;
        this._path = path;
    }
    get bucketType() {
        return this._bucketType;
    }
    get id() {
        return this._id;
    }
    get pageSize() {
        return this._pageSize;
    }
    get path() {
        return this._path;
    }
    getStore() {
        const store = new n3_1.Store();
        store.addQuad(namedNode(this.id), community_server_1.RDF.terms.type, types_1.LDES.terms.BucketizeStrategy);
        store.addQuad(namedNode(this.id), types_1.LDES.terms.bucketType, namedNode(this.bucketType));
        store.addQuad(namedNode(this.id), types_1.TREE.terms.path, namedNode(this.path));
        if (this.pageSize) {
            store.addQuad(namedNode(this.id), types_1.LDES.terms.custom("pageSize"), literal(this.pageSize));
        }
        return store;
    }
}
exports.BucketizeStrategy = BucketizeStrategy;
//# sourceMappingURL=ViewDescription.js.map