"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewDescriptionParser = void 0;
const ViewDescription_1 = require("./ViewDescription");
const n3_1 = require("n3");
const types_1 = require("@treecg/types");
var namedNode = n3_1.DataFactory.namedNode;
class ViewDescriptionParser {
    constructor(viewIdentifier, ldesIdentifier) {
        this.viewIdentifier = viewIdentifier;
        this.ldesIdentifier = ldesIdentifier;
    }
    /**
     * Parses a selection of an N3 Store to a {@link IViewDescription}.
     *
     * @param store An N3 Store.
     * @param viewDescriptionURI The URI of the View Description in the store.
     * @returns {IViewDescription}
     */
    parseViewDescription(store, viewDescriptionURI) {
        const viewDescriptionNode = namedNode(viewDescriptionURI);
        const managedByIds = store.getObjects(viewDescriptionNode, types_1.LDES.custom("managedBy"), null);
        if (managedByIds.length !== 1) {
            throw new Error(`Could not parse view description as the expected amount of managed by identifiers is 1 | received: ${managedByIds.length}`);
        }
        const managedByNode = managedByIds[0];
        const bucketizers = store.getObjects(managedByNode, types_1.LDES.custom("bucketizeStrategy"), null);
        if (bucketizers.length !== 1) {
            throw new Error(`Could not parse view description as the expected amount of bucketizers is 1 | received: ${bucketizers.length}`);
        }
        const ingestorTypes = store.getObjects(managedByNode, types_1.RDF.type, null);
        if (ingestorTypes.length !== 1) {
            throw new Error(`Could not parse view description as the expected amount of types for the managed by property is 1 | received: ${ingestorTypes.length}`);
        }
        const bucketizeStrategy = this.parseBucketizeStrategy(store, bucketizers[0]);
        const ingestorClient = new ViewDescription_1.IngestorClient(managedByNode.value, bucketizeStrategy, ingestorTypes[0].value);
        return new ViewDescription_1.ViewDescription(viewDescriptionNode.value, ingestorClient, this.ldesIdentifier, this.viewIdentifier);
    }
    parseBucketizeStrategy(store, bucketizeStrategyNode) {
        const bucketTypes = store.getObjects(bucketizeStrategyNode, types_1.LDES.bucketType, null);
        const treePaths = store.getObjects(bucketizeStrategyNode, types_1.TREE.path, null);
        if (bucketTypes.length !== 1) {
            throw new Error(`Could not parse bucketizer in view description as the expected amount of bucket types is 1 | received: ${bucketTypes.length}`);
        }
        if (treePaths.length !== 1) {
            throw new Error(`Could not parse bucketizer in view description as the expected amount of paths is 1 | received: ${treePaths.length}`);
        }
        const bucketType = bucketTypes[0].value;
        const path = treePaths[0].value; // NOTE: must be same as all tree paths in each Relation!!
        let pageSize;
        if (store.getObjects(bucketizeStrategyNode, types_1.LDES.custom("pageSize"), null).length === 1) {
            const pageSizeLiteral = store.getObjects(bucketizeStrategyNode, types_1.LDES.custom("pageSize"), null)[0];
            pageSize = parseInt(pageSizeLiteral.value, 10);
            if (isNaN(pageSize)) {
                throw Error("Could not parse bucketizer in view description as the page size is not a number.");
            }
        }
        return new ViewDescription_1.BucketizeStrategy(bucketizeStrategyNode.value, bucketType, path, pageSize);
    }
}
exports.ViewDescriptionParser = ViewDescriptionParser;
//# sourceMappingURL=ViewDescriptionParser.js.map