"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoTSViewDescription = void 0;
const ViewDescription_1 = require("./ViewDescription");
const ViewDescriptionParser_1 = require("./ViewDescriptionParser");
class MongoTSViewDescription {
    constructor(viewDescriptionIdentifier, ldesIdentifier, viewIdentifier) {
        this.viewDescriptionIdentifier = viewDescriptionIdentifier;
        this.ldesIdentifier = ldesIdentifier;
        this.viewIdentifier = viewIdentifier || 'dummy';
    }
    parseViewDescription(store) {
        const parser = new ViewDescriptionParser_1.ViewDescriptionParser(this.viewIdentifier, this.ldesIdentifier);
        return parser.parseViewDescription(store, this.viewDescriptionIdentifier);
    }
    generateViewDescription(options) {
        const ingestorClientType = "http://www.example.org/ldes#mongoDBTSIngestor";
        const bucketizationType = "https://w3id.org/ldes#LDESTSFragmentation";
        const bucketStrategy = new ViewDescription_1.BucketizeStrategy(this.bucketID(), bucketizationType, options.timestampPath, options.pageSize);
        const ingestorClient = new ViewDescription_1.IngestorClient(this.ingestorID(), bucketStrategy, ingestorClientType);
        // eventStreamIdentifier and rootNodeIdentifier are not important for generating this viewDescription
        // as this is normally added within the LDES solid server.
        return new ViewDescription_1.ViewDescription(this.viewDescriptionIdentifier, ingestorClient, this.ldesIdentifier, "dummy");
    }
    viewDescriptionNamespace() {
        const viewDescriptionURL = new URL(this.viewDescriptionIdentifier);
        return viewDescriptionURL.origin + viewDescriptionURL.pathname + '#';
    }
    bucketID() {
        return this.viewDescriptionNamespace() + 'bucketizationStrategy';
    }
    ingestorID() {
        return this.viewDescriptionNamespace() + 'ingestor';
    }
}
exports.MongoTSViewDescription = MongoTSViewDescription;
//# sourceMappingURL=MongoTSViewDescription.js.map