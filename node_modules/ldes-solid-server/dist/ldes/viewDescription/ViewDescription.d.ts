import { Store } from "n3";
import type * as Rdf from '@rdfjs/types';
export interface N3Support {
    getStore: () => Store;
}
/**
 * An interface that holds the properties for a `tree:ViewDescription`
 * (https://github.com/Informatievlaanderen/OSLOthema-ldes/issues/4).
 */
export interface IViewDescription extends N3Support {
    id: string;
    /**
     * Property that holds the client that is responsible to maintain the structure of this view.
     * `ldes:managedBy`
     */
    managedBy: IIngestorClient;
    /**
     * Property that holds the URI of the LDES.
     * `dcat:serversDataset` (see DCAT 3 ยง6.9.3)
     */
    servesDataset: string;
    /**
     * Property that holds the URI of an LDES view (the root `tree:node`).
     * `dcat:serversDataset` (see DCAT 3 ยง6.9.1)
     */
    endpointURL: string;
    quads: () => Rdf.Quad[];
}
/**
 * An interface that holds the properties for an IngestorClient.
 * Such client is responsible for creating this view in an LDES.
 */
export interface IIngestorClient extends N3Support {
    id: string;
    /**
     * Property that holds the bucketization strategy of the view.
     */
    bucketizeStrategy: IBucketizeStrategy;
    /**
     * Type of the IngestorClient client
     */
    type: string;
}
/**
 * An interface that holds the properties for a `ldes:BucketizeStrategy` (
 * https://github.com/ajuvercr/sds-processors/blob/master/bucketizeStrategy.ttl and
 * https://github.com/Informatievlaanderen/OSLOthema-ldes/issues/4).
 */
export interface IBucketizeStrategy extends N3Support {
    id: string;
    bucketType: string;
    path: string;
    pageSize?: number;
}
export declare class ViewDescription implements IViewDescription {
    private _id;
    private _managedBy;
    private _servesDataset;
    private _endpointURL;
    constructor(id: string, managedBy: IIngestorClient, eventStreamIdentifier: string, rootNodeIdentifier: string);
    get id(): string;
    get managedBy(): IIngestorClient;
    get servesDataset(): string;
    get endpointURL(): string;
    getStore(): Store;
    quads(): Rdf.Quad[];
}
export declare class IngestorClient implements IIngestorClient {
    private _bucketizeStrategy;
    private _id;
    private _type;
    constructor(id: string, bucketizeStrategy: IBucketizeStrategy, type: string);
    get bucketizeStrategy(): IBucketizeStrategy;
    get id(): string;
    get type(): string;
    getStore(): Store;
}
export declare class BucketizeStrategy implements IBucketizeStrategy {
    private _bucketType;
    private _id;
    private _pageSize;
    private _path;
    constructor(id: string, bucketType: string, path: string, pageSize?: number);
    get bucketType(): string;
    get id(): string;
    get pageSize(): number | undefined;
    get path(): string;
    getStore(): Store;
}
