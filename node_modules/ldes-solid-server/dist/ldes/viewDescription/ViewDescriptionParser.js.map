{"version":3,"file":"ViewDescriptionParser.js","sourceRoot":"","sources":["../../../src/ldes/viewDescription/ViewDescriptionParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    BucketizeStrategy,\n    IBucketizeStrategy,\n    IngestorClient,\n    IViewDescription,\n    ViewDescription\n} from \"./ViewDescription\";\nimport {DataFactory, Literal, Parser, Store, Writer} from \"n3\";\nimport {LDES, RDF, TREE} from \"@treecg/types\";\nimport * as Rdf from \"@rdfjs/types\";\nimport namedNode = DataFactory.namedNode;\n\nexport class ViewDescriptionParser {\n    private viewIdentifier :string;\n    private ldesIdentifier :string;\n\n    constructor(viewIdentifier: string, ldesIdentifier: string) {\n        this.viewIdentifier = viewIdentifier;\n        this.ldesIdentifier = ldesIdentifier;\n    }\n    /**\n     * Parses a selection of an N3 Store to a {@link IViewDescription}.\n     *\n     * @param store An N3 Store.\n     * @param viewDescriptionURI The URI of the View Description in the store.\n     * @returns {IViewDescription}\n     */\n    public parseViewDescription(store: Store, viewDescriptionURI: string): IViewDescription {\n        const viewDescriptionNode = namedNode(viewDescriptionURI);\n        const managedByIds = store.getObjects(viewDescriptionNode, LDES.custom(\"managedBy\"), null)\n        if (managedByIds.length !== 1) {\n            throw new Error(`Could not parse view description as the expected amount of managed by identifiers is 1 | received: ${managedByIds.length}`)\n        }\n\n        const managedByNode = managedByIds[0]\n\n        const bucketizers = store.getObjects(managedByNode, LDES.custom(\"bucketizeStrategy\"), null)\n        if (bucketizers.length !== 1) {\n            throw new Error(`Could not parse view description as the expected amount of bucketizers is 1 | received: ${bucketizers.length}`)\n        }\n\n        const ingestorTypes =  store.getObjects(managedByNode, RDF.type, null)\n        if (ingestorTypes.length !== 1) {\n            throw new Error(`Could not parse view description as the expected amount of types for the managed by property is 1 | received: ${ingestorTypes.length}`)\n        }\n        const bucketizeStrategy = this.parseBucketizeStrategy(store, bucketizers[0])\n\n        const ingestorClient = new IngestorClient(managedByNode.value, bucketizeStrategy, ingestorTypes[0].value)\n        return new ViewDescription(viewDescriptionNode.value, ingestorClient, this.ldesIdentifier, this.viewIdentifier)\n    }\n    protected parseBucketizeStrategy(store: Store, bucketizeStrategyNode: Rdf.Term): IBucketizeStrategy {\n        const bucketTypes = store.getObjects(bucketizeStrategyNode, LDES.bucketType, null)\n        const treePaths = store.getObjects(bucketizeStrategyNode, TREE.path, null)\n\n        if (bucketTypes.length !== 1) {\n            throw new Error(`Could not parse bucketizer in view description as the expected amount of bucket types is 1 | received: ${bucketTypes.length}`)\n        }\n        if (treePaths.length !== 1) {\n            throw new Error(`Could not parse bucketizer in view description as the expected amount of paths is 1 | received: ${treePaths.length}`)\n        }\n        const bucketType = bucketTypes[0].value\n        const path = treePaths[0].value // NOTE: must be same as all tree paths in each Relation!!\n\n        let pageSize: number | undefined\n        if (store.getObjects(bucketizeStrategyNode, LDES.custom(\"pageSize\"), null).length === 1) {\n            const pageSizeLiteral = store.getObjects(bucketizeStrategyNode, LDES.custom(\"pageSize\"), null)[0] as Literal\n            pageSize = parseInt(pageSizeLiteral.value, 10)\n            if (isNaN(pageSize)) {\n                throw Error(\"Could not parse bucketizer in view description as the page size is not a number.\")\n            }\n        }\n        return new BucketizeStrategy(bucketizeStrategyNode.value, bucketType, path, pageSize)\n    }\n}\n"]}