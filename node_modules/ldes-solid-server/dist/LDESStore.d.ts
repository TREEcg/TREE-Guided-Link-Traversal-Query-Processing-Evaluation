import { ChangeMap, Conditions, Patch, Representation, RepresentationPreferences, ResourceIdentifier, ResourceStore } from "@solid/community-server";
import { PrefixView } from "./PrefixView";
/**
 * ResourceStore which uses {@link PrefixView} for backend access.
 *
 * The LDESStore provides read operations for the resources which are retrieved using the view of the PrefixView.
 *
 * There are two types of requests that can be executed:
 *  * Base request: A request to read all views stored in all databases,
 *  * Fragment request: A request to a fragment within a specific view.
 *
 */
export declare class LDESStore implements ResourceStore {
    protected readonly logger: import("@solid/community-server").Logger;
    id: string;
    base: string;
    views: PrefixView[];
    initPromise: any;
    /**
     * @param id - The URI of the published LDES.
     * @param views - The mounted views that expose this LDES.
     * @param base - The base URI for the Solid Server.
     * @param relativePath - The relative path to the LDES.
     */
    constructor(id: string, views: PrefixView[], base: string, relativePath: string);
    getRepresentation: (identifier: ResourceIdentifier, preferences: RepresentationPreferences, conditions?: Conditions) => Promise<Representation>;
    private getViewDescriptions;
    private getMetadata;
    private addRelations;
    private addMember;
    setRepresentation: (identifier: ResourceIdentifier, representation: Representation, conditions?: Conditions) => Promise<ChangeMap>;
    addResource: (container: ResourceIdentifier, representation: Representation, conditions?: Conditions) => Promise<ChangeMap>;
    deleteResource: (identifier: ResourceIdentifier, conditions?: Conditions) => Promise<ChangeMap>;
    modifyResource: (identifier: ResourceIdentifier, patch: Patch, conditions?: Conditions) => Promise<ChangeMap>;
    hasResource: (_id: ResourceIdentifier, _conditions?: Conditions | undefined) => Promise<boolean>;
}
