import { sh } from '@tpluscode/rdf-ns-builders';
export class PathVisitor {
  visit(path, arg) {
    if (path instanceof PredicatePath) {
      return this.visitPredicatePath(path, arg);
    }

    if (path instanceof SequencePath) {
      return this.visitSequencePath(path, arg);
    }

    if (path instanceof AlternativePath) {
      return this.visitAlternativePath(path, arg);
    }

    if (path instanceof InversePath) {
      return this.visitInversePath(path, arg);
    }

    if (path instanceof ZeroOrMorePath) {
      return this.visitZeroOrMorePath(path, arg);
    }

    if (path instanceof OneOrMorePath) {
      return this.visitOneOrMorePath(path, arg);
    }

    if (path instanceof ZeroOrOnePath) {
      return this.visitZeroOrOnePath(path, arg);
    }

    throw new Error('Unexpected path');
  }

}
export class ShaclPropertyPath {}
export class PredicatePath extends ShaclPropertyPath {
  constructor(term) {
    super();
    this.term = term;
  }

  accept(visitor, arg) {
    return visitor.visitPredicatePath(this, arg);
  }

}
export class SequencePath extends ShaclPropertyPath {
  constructor(paths) {
    super();
    this.paths = paths;
  }

  accept(visitor, arg) {
    return visitor.visitSequencePath(this, arg);
  }

}
export class AlternativePath extends ShaclPropertyPath {
  constructor(paths) {
    super();
    this.paths = paths;
  }

  accept(visitor, arg) {
    return visitor.visitAlternativePath(this, arg);
  }

}
export class InversePath extends ShaclPropertyPath {
  constructor(path) {
    super();
    this.path = path;
  }

  accept(visitor, arg) {
    return visitor.visitInversePath(this, arg);
  }

}
export class ZeroOrMorePath extends ShaclPropertyPath {
  constructor(path) {
    super();
    this.path = path;
  }

  accept(visitor, arg) {
    return visitor.visitZeroOrMorePath(this, arg);
  }

}
export class OneOrMorePath extends ShaclPropertyPath {
  constructor(path) {
    super();
    this.path = path;
  }

  accept(visitor, arg) {
    return visitor.visitOneOrMorePath(this, arg);
  }

}
export class ZeroOrOnePath extends ShaclPropertyPath {
  constructor(path) {
    super();
    this.path = path;
  }

  accept(visitor, arg) {
    return visitor.visitZeroOrOnePath(this, arg);
  }

}
export function fromNode(path) {
  if ('termType' in path) {
    return new PredicatePath(path);
  }

  assertWellFormedPath(path);

  if (path.term.termType === 'NamedNode') {
    return new PredicatePath(path.term);
  }

  var sequence = path.list();

  if (sequence) {
    var _paths = [...sequence];
    assertWellFormedShaclList(_paths);
    return new SequencePath(_paths.map(fromNode));
  }

  if (path.term.termType === 'BlankNode') {
    var inversePath = path.out(sh.inversePath);

    if (inversePath.term) {
      return new InversePath(fromNode(inversePath));
    }

    var alternativePath = path.out(sh.alternativePath);

    if (alternativePath.term) {
      var list = [...(alternativePath.list() || [])];
      assertWellFormedShaclList(list);
      return new AlternativePath(list.map(fromNode));
    }

    var zeroOrMorePath = path.out(sh.zeroOrMorePath);

    if (zeroOrMorePath.term) {
      return new ZeroOrMorePath(fromNode(zeroOrMorePath));
    }

    var oneOrMorePath = path.out(sh.oneOrMorePath);

    if (oneOrMorePath.term) {
      return new OneOrMorePath(fromNode(oneOrMorePath));
    }

    var zeroOrOnePath = path.out(sh.zeroOrOnePath);

    if (zeroOrOnePath.term) {
      return new ZeroOrOnePath(fromNode(zeroOrOnePath));
    }
  }

  throw new Error("Unrecognized property path ".concat(path.value));
}
export function assertWellFormedPath(ptr) {
  if (!ptr.term) {
    throw new Error('SHACL Path must be single node');
  }
}

function assertWellFormedShaclList(list) {
  if (list.length < 2) {
    throw new Error('SHACL List must have at least 2 elements');
  }
}