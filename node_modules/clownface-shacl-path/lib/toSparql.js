var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { sparql } from '@tpluscode/rdf-string';
import { assertWellFormedPath, fromNode, PathVisitor } from "./path.js";

class ToSparqlPropertyPath extends PathVisitor {
  visitSequencePath(_ref) {
    var {
      paths
    } = _ref;
    var {
      isRoot = true
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var sequence = paths.reduce(this.pathChain('/'), sparql(_templateObject || (_templateObject = _taggedTemplateLiteral([""]))));

    if (isRoot) {
      return sequence;
    }

    return sparql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["(", ")"])), sequence);
  }

  visitInversePath(_ref2) {
    var {
      path: inversed
    } = _ref2;
    return sparql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["^", ""])), inversed.accept(this, {
      isRoot: false
    }));
  }

  visitAlternativePath(_ref3) {
    var {
      paths
    } = _ref3;
    var {
      isRoot = true
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var alternative = paths.reduce(this.pathChain('|'), sparql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""]))));

    if (isRoot) {
      return alternative;
    }

    return sparql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["(", ")"])), alternative);
  }

  visitZeroOrMorePath(_ref4) {
    var {
      path: inner
    } = _ref4;
    return sparql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["", "*"])), inner.accept(this, {
      isRoot: false
    }));
  }

  visitOneOrMorePath(_ref5) {
    var {
      path: inner
    } = _ref5;
    return sparql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["", "+"])), inner.accept(this, {
      isRoot: false
    }));
  }

  visitZeroOrOnePath(_ref6) {
    var {
      path: inner
    } = _ref6;
    return sparql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["", "?"])), inner.accept(this, {
      isRoot: false
    }));
  }

  visitPredicatePath(_ref7) {
    var {
      term: predicate
    } = _ref7;
    return sparql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["", ""])), predicate);
  }

  pathChain(operator) {
    return (previous, current, index) => {
      if (index === 0) {
        return current.accept(this, {
          isRoot: false
        });
      }

      return sparql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["", "", "", ""])), previous, operator, current.accept(this, {
        isRoot: false
      }));
    };
  }

}
/**
 * Creates a SPARQL template string which represents a SHACL path as Property Path
 *
 * @param path SHACL Property Path
 */


export function toSparql(path) {
  var visitor = new ToSparqlPropertyPath();
  return visitor.visit(fromNode(path));
}
/**
 * Splits a Sequence Path and returns an array of SPARQL template results.
 * If the path is not a Sequence Path, returns an array with a single element
 *
 * @param path SHACL Property Path
 */

toSparql.sequence = path => {
  assertWellFormedPath(path);
  var list = path.list();

  if (list) {
    return [...list].map(el => toSparql(el));
  }

  return [toSparql(path)];
};