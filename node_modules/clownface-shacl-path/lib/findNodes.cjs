"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findNodes = findNodes;

var _termSet = _interopRequireDefault(require("@rdf-esm/term-set"));

var Path = _interopRequireWildcard(require("./path.cjs"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FindNodesVisitor extends Path.PathVisitor {
  visitSequencePath({
    paths
  }, {
    pointer
  }) {
    return paths.reduce((previous, path) => {
      return pointer.node(path.accept(this, {
        pointer: previous
      }));
    }, pointer).terms;
  }

  visitInversePath({
    path
  }, {
    pointer
  }) {
    if (path instanceof Path.PredicatePath) {
      return pointer.in(path.term).terms;
    }

    throw new Error('Only inverse of Predicate Paths is implemented');
  }

  visitAlternativePath({
    paths
  }, arg) {
    return paths.flatMap(path => {
      return path.accept(this, arg);
    });
  }

  visitZeroOrOnePath({
    path
  }, {
    pointer
  }) {
    return [...pointer.terms, ...path.accept(this, {
      pointer
    })];
  }

  visitOneOrMorePath(path, {
    pointer
  }) {
    return this.greedyPath(path, pointer);
  }

  visitZeroOrMorePath(path, {
    pointer
  }) {
    return [...pointer.terms, ...this.greedyPath(path, pointer)];
  }

  greedyPath({
    path
  }, pointer) {
    const remaining = [...pointer.terms];
    const results = new _termSet.default();
    let current = remaining.pop();

    while (current) {
      const nextNodes = path.accept(this, {
        pointer: pointer.node(current)
      });

      for (const nextNode of nextNodes) {
        if (!results.has(nextNode)) {
          remaining.push(nextNode);
          results.add(nextNode);
        }
      }

      current = remaining.pop();
    }

    return [...results];
  }

  visitPredicatePath({
    term
  }, {
    pointer
  }) {
    return pointer.out(term).terms;
  }

}
/**
 * Finds all nodes connected to the input node by following a [SHACL Property Path](https://www.w3.org/TR/shacl/#dfn-shacl-property-path)
 *
 * @param pointer starting node
 * @param shPath SHACL Property Path
 */


function findNodes(pointer, shPath) {
  const path = 'termType' in shPath ? pointer.node(shPath) : shPath;
  const terms = new FindNodesVisitor().visit(Path.fromNode(path), {
    pointer
  });
  return pointer.node([...new _termSet.default(terms)]);
}