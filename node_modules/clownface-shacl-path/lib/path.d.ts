import { NamedNode } from 'rdf-js';
import { GraphPointer, MultiPointer } from 'clownface';
export declare abstract class PathVisitor<R = void, TArg = unknown> {
    visit(path: ShaclPropertyPath, arg?: TArg): R;
    abstract visitPredicatePath(path: PredicatePath, arg?: TArg): R;
    abstract visitSequencePath(path: SequencePath, arg?: TArg): R;
    abstract visitAlternativePath(path: AlternativePath, arg?: TArg): R;
    abstract visitInversePath(path: InversePath, arg?: TArg): R;
    abstract visitZeroOrMorePath(path: ZeroOrMorePath, arg?: TArg): R;
    abstract visitOneOrMorePath(path: OneOrMorePath, arg?: TArg): R;
    abstract visitZeroOrOnePath(path: ZeroOrOnePath, arg?: TArg): R;
}
export declare abstract class ShaclPropertyPath {
    abstract accept<R, T>(visitor: PathVisitor<R, T>, arg?: T): R;
}
export declare class PredicatePath extends ShaclPropertyPath {
    term: NamedNode;
    constructor(term: NamedNode);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class SequencePath extends ShaclPropertyPath {
    paths: ShaclPropertyPath[];
    constructor(paths: ShaclPropertyPath[]);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class AlternativePath extends ShaclPropertyPath {
    paths: ShaclPropertyPath[];
    constructor(paths: ShaclPropertyPath[]);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class InversePath extends ShaclPropertyPath {
    path: ShaclPropertyPath;
    constructor(path: ShaclPropertyPath);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class ZeroOrMorePath extends ShaclPropertyPath {
    path: ShaclPropertyPath;
    constructor(path: ShaclPropertyPath);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class OneOrMorePath extends ShaclPropertyPath {
    path: ShaclPropertyPath;
    constructor(path: ShaclPropertyPath);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare class ZeroOrOnePath extends ShaclPropertyPath {
    path: ShaclPropertyPath;
    constructor(path: ShaclPropertyPath);
    accept<T>(visitor: PathVisitor<any, T>, arg: T): any;
}
export declare function fromNode(path: MultiPointer | NamedNode): ShaclPropertyPath;
export declare function assertWellFormedPath(ptr: MultiPointer): asserts ptr is GraphPointer;
//# sourceMappingURL=path.d.ts.map