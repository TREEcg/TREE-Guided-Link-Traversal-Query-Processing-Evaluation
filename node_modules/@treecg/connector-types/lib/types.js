"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleStream = exports.WriterFactory = exports.ReaderFactory = exports.WriterFactoryBuilder = exports.ReaderFactoryBuilder = void 0;
;
class ReaderFactoryBuilder {
    constructor(inner) {
        this.inner = inner;
    }
    add(factory) {
        const nInner = this.inner;
        nInner.push(factory);
        return new ReaderFactoryBuilder(nInner);
    }
    build() {
        return new ReaderFactory(this.inner);
    }
}
exports.ReaderFactoryBuilder = ReaderFactoryBuilder;
class WriterFactoryBuilder {
    constructor(inner) {
        this.inner = inner;
    }
    add(factory) {
        const nInner = this.inner.slice();
        nInner.push(factory);
        return new WriterFactoryBuilder(nInner);
    }
    build() {
        return new WriterFactory(this.inner);
    }
}
exports.WriterFactoryBuilder = WriterFactoryBuilder;
class ReaderFactory {
    constructor(factories) {
        this.factories = factories;
    }
    async build(config, deserializer) {
        for (let factory of this.factories) {
            if (factory.type.toLocaleLowerCase() === config.type.toLocaleLowerCase()) {
                return factory.build(config.config, deserializer);
            }
        }
        throw "No correct factory found!";
    }
    async buildReader(configs, deserializers = {}) {
        const streams = {};
        await Promise.all(Object.entries(configs).map(async ([key, value]) => {
            streams[key] = await this.build(value, deserializers[key]);
        }));
        return streams;
    }
}
exports.ReaderFactory = ReaderFactory;
class WriterFactory {
    constructor(factories) {
        this.factories = factories;
    }
    async build(config, serializer) {
        for (let factory of this.factories) {
            if (factory.type.toLocaleLowerCase() === config.type.toLowerCase()) {
                return factory.build(config.config, serializer);
            }
        }
        throw "No correct factory found!";
    }
    async buildReader(configs, serializers = {}) {
        const streams = {};
        await Promise.all(Object.entries(configs).map(async ([key, value]) => {
            streams[key] = await this.build(value, serializers[key]);
        }));
        return streams;
    }
}
exports.WriterFactory = WriterFactory;
class SimpleStream {
    constructor(onDisconnect) {
        this.dataHandlers = [];
        this.endHandlers = [];
        this.disconnect = onDisconnect || (async () => { });
    }
    data(listener) {
        this.dataHandlers.push(listener);
        return this;
    }
    async push(data) {
        this.lastElement = data;
        await Promise.all(this.dataHandlers.map(h => h(data)));
    }
    async end() {
        await Promise.all(this.endHandlers.map(h => h()));
    }
    on(event, listener) {
        if (event == "data") {
            this.dataHandlers.push(listener);
        }
        if (event == "end") {
            this.endHandlers.push(listener);
        }
        return this;
    }
}
exports.SimpleStream = SimpleStream;
