#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actor_init_ldes_client_1 = require("@treecg/actor-init-ldes-client");
const materialize_1 = require("../lib/materialize");
const rdf_data_factory_1 = require("rdf-data-factory");
const commander_1 = require("commander");
commander_1.program
    .requiredOption('--url <url>', 'The URL of the Linked Data Event Stream')
    .parse();
const options = commander_1.program.opts();
const url = options.url;
const run = async (_url) => {
    const ldesOptions = {
        "pollingInterval": 5000,
        "representation": "Quads",
        "emitMemberOnce": true,
        "disablePolling": true,
    };
    const factory = new rdf_data_factory_1.DataFactory();
    const materializeOptions = {
        "versionOfProperty": factory.namedNode('http://purl.org/dc/terms/isVersionOf'),
        "timestampProperty": factory.namedNode('http://purl.org/dc/terms/created'),
        "addRdfStreamProcessingTriple": true
    };
    let LDESClient = (0, actor_init_ldes_client_1.newEngine)();
    let ldes = LDESClient.createReadStream(url, ldesOptions);
    ldes.on('data', (member) => {
        console.log((0, materialize_1.materialize)(member.quads, materializeOptions));
    });
};
run(url).catch(error => console.log(error));
//# sourceMappingURL=materializer.js.map