"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubjectPageBucketizer = exports.SubjectPageBucketizerFactory = void 0;
const bucketizer_core_1 = require("@treecg/bucketizer-core");
const types_1 = require("@treecg/types");
const types_2 = require("@treecg/types");
class SubjectPageBucketizerFactory {
    constructor() {
        this.type = "subject";
    }
    build(config, state) {
        return SubjectPageBucketizer.build(config, state);
    }
    ldConfig(quads, subject) {
        const out = (0, bucketizer_core_1.parseBucketizerExtCoreOptions)(quads, subject);
        if (out.type.value === types_1.LDES.custom("subject")) {
            return out;
        }
        else {
            return;
        }
    }
}
exports.SubjectPageBucketizerFactory = SubjectPageBucketizerFactory;
class SubjectPageBucketizer extends bucketizer_core_1.BucketizerCoreExt {
    static build(bucketizerOptions, state) {
        const bucketizer = new SubjectPageBucketizer(bucketizerOptions);
        if (state) {
            bucketizer.importState(state);
        }
        return bucketizer;
    }
    createBuckets(propertyPathObjects, newRelations) {
        const buckets = [];
        propertyPathObjects.forEach(propertyPathObject => {
            const parts = propertyPathObject.value.split('/');
            if (parts[parts.length - 1] !== undefined) {
                const hypermediaControlsMap = this.getBucketHypermediaControlsMap();
                const id = parts[parts.length - 1];
                if (!hypermediaControlsMap.has(id)) {
                    hypermediaControlsMap.set(id, []);
                    const propMember = this.getPropertyPathMember();
                    newRelations.push([this.getRoot(), this.createRelationParameters(id, propMember.id)]);
                }
                buckets.push(id);
            }
        });
        return buckets;
    }
    ;
    createRelationParameters(value, pathObject) {
        return {
            type: types_2.RelationType.EqualThan,
            value: [this.factory.literal(value)],
            nodeId: value,
            path: pathObject,
        };
    }
}
exports.SubjectPageBucketizer = SubjectPageBucketizer;
