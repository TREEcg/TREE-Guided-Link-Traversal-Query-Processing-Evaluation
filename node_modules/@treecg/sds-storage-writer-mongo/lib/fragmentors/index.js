"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleTimestampPath = void 0;
const types_1 = require("@treecg/types");
const maxSize = 2;
//TODO! timestampValue is a date
function handleTimestampPath(id, streamId, timestampValue, memberId, mongo) {
    return __awaiter(this, void 0, void 0, function* () {
        const smallerIndex = (yield mongo.find({ leaf: true, id, timeStamp: { $lte: timestampValue }, fragmentId: streamId }).sort({ timeStamp: -1 }).limit(1).toArray())[0];
        if (smallerIndex) {
            if (smallerIndex.count < maxSize || timestampValue === smallerIndex.timeStamp) {
                yield mongo.updateOne({ leaf: true, fragmentId: streamId, ids: id, timeStamp: smallerIndex.timeStamp }, { $inc: { count: 1 }, $push: { members: memberId } });
            }
            else {
                const largerIndex = (yield mongo.find({ leaf: true, ids: id, timeStamp: { $gt: timestampValue }, fragmentId: streamId }).sort({ timeStamp: -1 }).limit(1).toArray())[0];
                const relations = [{ type: types_1.RelationType.LessThan, value: timestampValue, bucket: smallerIndex.timeStamp }];
                if (!!largerIndex) {
                    relations.push({ type: types_1.RelationType.GreaterThanOrEqualTo, value: largerIndex.timeStamp, bucket: largerIndex.timeStamp });
                    yield mongo.updateOne({ leaf: true, streamId, id, timeStamp: largerIndex.timeStamp }, { "$push": { relations: { type: types_1.RelationType.LessThan, value: largerIndex.timeStamp, bucket: timestampValue } } });
                }
                yield mongo.updateOne({ leaf: true, streamId, id, timeStamp: smallerIndex.timeStamp }, { "$push": { relations: { type: types_1.RelationType.GreaterThanOrEqualTo, value: timestampValue, bucket: timestampValue } } });
                yield mongo.insertOne({ leaf: true, streamId, id, count: 1, relations, members: [memberId], timeStamp: timestampValue });
            }
        }
        else {
            const largerIndex = (yield mongo.find({ leaf: true, ids: id, fragmentId: streamId }).sort({ timeStamp: -1 }).limit(1).toArray())[0];
            const relations = [];
            if (!!largerIndex) {
                relations.push({ type: types_1.RelationType.GreaterThanOrEqualTo, value: largerIndex.timeStamp, bucket: largerIndex.timeStamp });
                yield mongo.updateOne({ leaf: true, streamId, id, timeStamp: largerIndex.timeStamp }, { "$push": { relations: { type: types_1.RelationType.LessThan, value: largerIndex.timeStamp, bucket: timestampValue } } });
            }
            yield mongo.insertOne({ leaf: true, streamId, id, count: 1, relations, members: [memberId], timeStamp: timestampValue });
        }
    });
}
exports.handleTimestampPath = handleTimestampPath;
