"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubjectFragmentor = void 0;
const types_1 = require("@treecg/types");
const _1 = require(".");
class SubjectFragmentor {
    constructor(id, bucketProperty) {
        this.id = id.value;
        this.bucketProperty = bucketProperty;
    }
    extract(member, mongo, timestampPath) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const value = (_a = member.quads.find(quad => quad.subject.equals(member.id)
                && quad.predicate.equals(this.bucketProperty))) === null || _a === void 0 ? void 0 : _a.object.value;
            if (!value) {
                console.error(`didn't find bucketProperty ${this.bucketProperty.value} on member ${member.id.value}`);
                return;
            }
            const timestampValue = timestampPath ? (_b = member.quads.find(quad => quad.subject.equals(member.id) && quad.predicate.equals(timestampPath))) === null || _b === void 0 ? void 0 : _b.object.value : undefined;
            let currentFragment = yield mongo.findOne({ fragmentId: this.id, ids: [value] });
            // Got to create the fragment
            if (!currentFragment) {
                const fragments = yield mongo.find({ leaf: false, fragmentId: this.id }).toArray();
                const relations = fragments.map(id => { return { type: types_1.RelationType.EqualThan, values: id.ids, bucket: id.ids && id.ids[id.ids.length - 1] || "" }; });
                const members = !!timestampValue ? undefined : [];
                yield mongo.updateMany({ leaf: false, fragmentId: this.id }, { $push: { relations: { type: types_1.RelationType.EqualThan, values: [value], bucket: value } } });
                yield mongo.insertOne({ leaf: false, fragmentId: this.id, ids: [value], count: 0, relations, members });
            }
            if (timestampValue) {
                yield (0, _1.handleTimestampPath)([value], this.id, timestampValue, member.id.value, mongo);
            }
            else {
                yield mongo.updateOne({ leaf: false, fragmentId: this.id, ids: [value] }, { $inc: { count: 1 }, $push: { members: member.id.value } });
            }
        });
    }
}
exports.SubjectFragmentor = SubjectFragmentor;
