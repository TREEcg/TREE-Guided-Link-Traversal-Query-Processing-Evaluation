import { Logger } from "@treecg/ldes-snapshot";
import { Member } from '@treecg/types';
import { Document, WithId } from "mongodb";
import { MongoDBIngestor, MongoDBIngestorConfig } from "./MongoDBIngestor";
import { LDESTSOptions, TSIngestor, Window } from "./TSIngestor";
export interface TSMongoDBIngestorConfig extends MongoDBIngestorConfig {
    viewDescriptionIdentifier: string;
}
/**
 * Implements {@link TSIngestor} to store an LDES TSin a Mongo database.
 */
export declare class TSMongoDBIngestor extends MongoDBIngestor implements TSIngestor {
    protected _pageSize?: number;
    protected _timestampPath?: string;
    protected _metadata?: any;
    protected root: string;
    protected logger: Logger;
    protected viewDescriptionIdentifier: string;
    constructor(config: TSMongoDBIngestorConfig);
    protected get pageSize(): number;
    protected get timestampPath(): string;
    instantiate(config: LDESTSOptions): Promise<void>;
    protected getWindow(identifier: string): Promise<Window>;
    getMostRecentWindow(): Promise<Window>;
    /**
     * Transforms a MongoDB document to a {@link Window}.
     * @param document
     * @returns
     */
    protected documentToWindow(document: WithId<Document>): Window;
    protected fragmentToWindow(fragment: {
        id?: string;
        members?: string[];
        start?: string;
        end?: string;
    }): Window;
    bucketSize(window: Window): Promise<number>;
    createWindow(window: Window): Promise<void>;
    updateWindow(window: Window): Promise<void>;
    addWindowToRoot(window: Window): Promise<void>;
    append(member: Member): Promise<void>;
    publish(members: Member[]): Promise<void>;
    /**
     * Creates a TS Viewdescription that contains the metadata so the LDES Solid Server can serve the LDES.
     * @param config
     * @returns {ViewDescription}
     */
    private createTSViewDescription;
}
