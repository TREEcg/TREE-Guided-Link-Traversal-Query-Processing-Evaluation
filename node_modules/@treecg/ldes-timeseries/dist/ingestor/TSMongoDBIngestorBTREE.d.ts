import { Window } from "./TSIngestor";
import { TSMongoDBIngestor } from "./TSMongoDBIngestor";
import { Member } from "@treecg/types";
/**
 * Class which makes it possible to create multiple layers for the time-series.
 * (in contrast to the {@link TSMongoDBIngestor}, which only allows for having one layer)
 *
 * Basically it creates a B+TREE like fragmentation (not a true B+TREE yet -> see README.md
 */
export declare class TSMongoDBIngestorBTREE extends TSMongoDBIngestor {
    /**
     * Variable for the number of relations per node in the view of the LDES.
     * Note: currently hardcoded
     * TODO: persist in meta
     */
    layerSize: number;
    append(member: Member): Promise<void>;
    /**
     * Searches for the most recent window.
     * Note: The node returned will be a leaf node.
     * @return {Promise<Window>}
     */
    getMostRecentWindow(): Promise<Window>;
    /**
     * Creates a new window and adds it to the appropriate node.
     * Furthermore, adds the correct relations to this new node.
     *
     * @param date - The date to which all members in this new window will be GTE than.
     * @return {string} - The identifier of the newly created window.
     */
    protected addWindow(date: Date): Promise<string>;
    /**
     * Calculates the chain from the root to the window.
     *
     * Works bottom up.
     * Assumption: there are no two nodes with the same identifier within a stream.
     * @param window
     * @return {Promise<void>}
     */
    protected getWindowChain(window: Window): Promise<Window[]>;
    /**
     * Find a node that has less relations than the maximum allowed number of relations.
     *
     * If no such is found, return the root.
     * @param chain
     * @return {Promise<void>}
     */
    protected findNodeForNewWindow(chain: Window[]): Promise<Window>;
    /**
     * Creates a chain of nodes from identifier with given length, ending with the node `date.toISOString()`.
     *
     * Assumptions, the start node already exists.
     * @param date - The date to which all members in the bottom node will be GTE.
     * @param identifier - identifier of the node where the chain starts
     * @param chainLength - The length of the chain (i.e. how many nodes are created).
     * @return {Promise<void>}
     */
    protected createChain(date: Date, identifier: string, chainLength: number): Promise<Window>;
    /**
     * TODO: docs
     * @param window
     * @return {Promise<Window>}
     */
    protected getParentWindow(window: Window): Promise<Window>;
    /**
     * Calculates in an Array of relations the amount of unique nodes pointed to.
     * @param relations
     * @return {number}
     */
    private uniqueNodes;
    /**
     * Calculates the lowest startDate from an Array of relations.
     * @param relations
     * @return {Date}
     */
    private startDate;
}
