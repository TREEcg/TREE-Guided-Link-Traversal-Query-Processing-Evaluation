import { MongoFragment } from "@treecg/sds-storage-writer-mongo/lib/fragmentHelper";
import { Member } from '@treecg/types';
import { Collection, Db, Document } from "mongodb";
import { AbstractIngestor, IngestorConfig, IRelation } from './AbstractIngestor';
import { Store } from 'n3';
export interface MongoDBIngestorConfig extends IngestorConfig {
    /**
     * The name of the MongoDB Collection for the SDS metadata information.
     */
    metaCollectionName?: string;
    /**
     * The name of the MongoDB Collection for the members.
     */
    dataCollectionName?: string;
    /**
     * The name of the MongoDB Collection for the relations (the buckets/fragments).
     */
    indexCollectionName?: string;
    /**
     * The URL of the MongoDB database.
     */
    mongoDBURL?: string;
}
export declare class MongoDBIngestor extends AbstractIngestor {
    private metaCollectionName;
    private dataCollectionName;
    private indexCollectionName;
    private mongoDBURL;
    private mongoConnection;
    private _db;
    constructor(config: MongoDBIngestorConfig);
    protected get dbDataCollection(): Collection<Document>;
    protected get dbIndexCollection(): Collection<MongoFragment>;
    protected get dbMetaCollection(): Collection<Document>;
    protected get db(): Db;
    protected streamExists(): Promise<boolean>;
    protected getStreamMetadata(): Promise<Store>;
    protected startConnection(): Promise<void>;
    /**
     * Stores the metadata of the SDS stream into the Mongo Database in the meta collection.
     *
     * @param sdsMetadata - The SDS metadata for the SDS Stream.
     */
    initialise(sdsMetadata?: string): Promise<void>;
    exit(): Promise<void>;
    /**
     * Stores members into the Mongo Database in the data collection.
     *
     * @param member
     * @param timestamp
     */
    storeMembers(member: Member[]): Promise<void>;
    /**
     * Stores a bucket into the Mongo Database in the index collection.
     *
     * @param bucketIdentifier
     */
    createBucket(bucketIdentifier: string): Promise<void>;
    /**
     * Remove a bucket from the Mongo Database in the index collection.
     * @param bucketIdentifier
     * @return {Promise<void>}
     */
    deleteBucket(bucketIdentifier: string): Promise<void>;
    addMemberstoBucket(bucketIdentifier: string, memberIDs: string[]): Promise<void>;
    addRelationsToBucket(bucketIdentifier: string, relations: IRelation[]): Promise<void>;
    protected bucketExists(bucketIdentifier: string): Promise<boolean>;
    protected getBucket(bucketIdentifier: string): Promise<MongoFragment>;
}
