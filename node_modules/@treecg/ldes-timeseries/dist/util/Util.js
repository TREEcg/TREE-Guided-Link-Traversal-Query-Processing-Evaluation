"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.quadsToString = exports.storeFromFile = void 0;
const ldes_snapshot_1 = require("@treecg/ldes-snapshot");
const fs_1 = require("fs");
const n3_1 = require("n3");
function storeFromFile(filepath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(0, fs_1.existsSync)(filepath)) {
            throw Error("The filepath is invalid.");
        }
        // if the file content is invalid, the method below will throw a
        // different error
        return yield (0, ldes_snapshot_1.turtleStringToStore)((0, fs_1.readFileSync)(filepath, "utf-8"));
    });
}
exports.storeFromFile = storeFromFile;
function quadsToString(quads) {
    return (0, ldes_snapshot_1.storeToString)(new n3_1.Store(quads));
}
exports.quadsToString = quadsToString;
