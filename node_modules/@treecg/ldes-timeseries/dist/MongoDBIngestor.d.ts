import { Logger } from "@treecg/ldes-snapshot";
import { Member } from '@treecg/types';
import { Collection, Db, Document, WithId } from "mongodb";
import { AbstractIngestor, IngestorConfig, IRelation, LDESTSConfig, TSIngestor } from './AbstractIngestor';
import { Window } from "./AbstractIngestor";
export interface MongoDBIngestorConfig extends IngestorConfig {
    /**
     * The name of the MongoDB Collection for the SDS metadata information.
     */
    metaCollectionName?: string;
    /**
     * The name of the MongoDB Collection for the members.
     */
    dataCollectionName?: string;
    /**
     * The name of the MongoDB Collection for the relations (the buckets/fragments).
     */
    indexCollectionName?: string;
    /**
     * The URL of the MongoDB database.
     */
    mongoDBURL?: string;
}
export declare class MongoDBIngestor extends AbstractIngestor {
    private metaCollectionName;
    private dataCollectionName;
    private indexCollectionName;
    private mongoDBURL;
    private mongoConnection;
    private _db;
    constructor(config: MongoDBIngestorConfig);
    protected get dbDataCollection(): Collection<Document>;
    protected get dbIndexCollection(): Collection<Document>;
    protected get dbMetaCollection(): Collection<Document>;
    protected get db(): Db;
    protected streamExists(): Promise<boolean>;
    protected getSDSMetadata(): Promise<string>;
    protected startConnection(): Promise<void>;
    /**
     * Stores the metadata of the SDS stream into the Mongo Database in the meta collection.
     *
     * @param sdsMetadata - The SDS metadata for the SDS Stream.
     */
    initialise(sdsMetadata?: string): Promise<void>;
    exit(): Promise<void>;
    /**
     * Stores members into the Mongo Database in the data collection.
     *
     * @param member
     * @param timestamp
     */
    storeMembers(member: Member[]): Promise<void>;
    /**
     * Stores a bucket into the Mongo Database in the index collection.
     *
     * @param member
     * @param timestamp
     */
    createBucket(bucketIdentifier: string): Promise<void>;
    addMemberstoBucket(bucketIdentifier: string, memberIDs: string[]): Promise<void>;
    addRelationsToBucket(bucketIdentifier: string, relations: IRelation[]): Promise<void>;
    protected bucketExists(bucketIdentifier: string): Promise<boolean>;
}
export declare class TSMongoDBIngestor extends MongoDBIngestor implements TSIngestor {
    protected _pageSize?: number;
    protected _timestampPath?: string;
    protected _metadata?: any;
    protected root: string;
    protected logger: Logger;
    private get pageSize();
    private get timestampPath();
    private makeSDSConfig;
    instantiate(config: LDESTSConfig): Promise<void>;
    getMostRecentWindow(): Promise<Window>;
    /**
     * Transforms a MongoDB document to a {@link Window}.
     * @param document
     * @returns
     */
    protected documentToWindow(document: WithId<Document>): Window;
    bucketSize(window: Window): Promise<number>;
    createWindow(window: Window): Promise<void>;
    updateWindow(window: Window): Promise<void>;
    addWindowToRoot(window: Window): Promise<void>;
    append(member: Member): Promise<void>;
    publish(members: Member[]): Promise<void>;
}
