"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotMetadataParser = void 0;
var AbstractMetadataParser_1 = require("./AbstractMetadataParser");
var n3_1 = require("n3");
var SnapshotMetadata_1 = require("./SnapshotMetadata");
var TimestampUtil_1 = require("../util/TimestampUtil");
var Vocabularies_1 = require("../util/Vocabularies");
var SnapshotMember_1 = require("./SnapshotMember");
var Conversion_1 = require("../util/Conversion");
/***************************************
 * Title: SnapshotMetadataParser
 * Description: A class that parses metadata for a Snapshot (https://data.vlaanderen.be/doc/applicatieprofiel/ldes#Snapshot) {@link ISnapshot}
 * Author: Wout Slabbinck (wout.slabbinck@ugent.be)
 * Created on 30/11/2022
 *****************************************/
var SnapshotMetadataParser = /** @class */ (function (_super) {
    __extends(SnapshotMetadataParser, _super);
    function SnapshotMetadataParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Parses an N3 Store to {@link ISnapshot}.
     * Only deals with non materialized snapshots.
     *
     * Note: Currently does not parse the shape of the LDES
     *
     * @param store An N3 Store.
     * @param eventStreamIdentifier (optional) URI of the Snapshot Identifier.
     * @returns {SnapshotMetadata}
     */
    SnapshotMetadataParser.extractSnapshotMetadata = function (store, eventStreamIdentifier) {
        eventStreamIdentifier = eventStreamIdentifier !== null && eventStreamIdentifier !== void 0 ? eventStreamIdentifier : this.parseLDESIdentifier(store);
        var timestampPath = this.parseTimestampPath(store, eventStreamIdentifier);
        var versionOfPath = this.parseVersionOfPath(store, eventStreamIdentifier);
        var snapshotOf = this.parseSnapshotOf(store, eventStreamIdentifier);
        var snapshotUntil = this.parseSnapshotUntil(store, eventStreamIdentifier);
        var members = this.extractSnapshotMembers(store, eventStreamIdentifier, timestampPath, versionOfPath);
        var snapshot = new SnapshotMetadata_1.SnapshotMetadata({
            eventStreamIdentifier: eventStreamIdentifier,
            timestampPath: timestampPath,
            versionOfPath: versionOfPath,
            snapshotOf: snapshotOf,
            snapshotUntil: snapshotUntil,
            members: members,
            materialized: false
        });
        return snapshot;
    };
    /**
     * Extracts non materialized {@link ISnapshotMember}s from an N3 Store.
     *
     * @param store An N3 Store.
     * @param ldesIdentifier
     * @param timestampPath The timestampPath of a versioned LDES
     * @param versionOfPath The versionOfPath of a versioned LDES
     * @returns {ISnapshotMember[]}
     */
    SnapshotMetadataParser.extractSnapshotMembers = function (store, ldesIdentifier, timestampPath, versionOfPath) {
        var members = (0, Conversion_1.extractMembers)(store, ldesIdentifier);
        var snapshotMembers = [];
        members.forEach(function (member) {
            var memberIdentifier = member.id.value;
            var objectIdentifier = extractObjectIdentifier(new n3_1.Store(member.quads), versionOfPath, memberIdentifier);
            var date = extractDate(new n3_1.Store(member.quads), timestampPath, memberIdentifier);
            snapshotMembers.push(new SnapshotMember_1.SnapshotMember(member.quads, memberIdentifier, objectIdentifier, date));
        });
        return snapshotMembers;
        function extractObjectIdentifier(store, versionOfPath, memberId) {
            var ObjectIdentifierNodes = store.getObjects(memberId, versionOfPath, null);
            if (ObjectIdentifierNodes.length !== 1) {
                throw Error("Expected one versionOfPath per member. ".concat(ObjectIdentifierNodes.length, " are present for member ").concat(memberId, "."));
            }
            return ObjectIdentifierNodes[0].value;
        }
        function extractDate(store, timestampPath, memberId) {
            var dateNodes = store.getObjects(memberId, timestampPath, null);
            if (dateNodes.length !== 1) {
                throw Error("Expected one timestampPath per member. ".concat(dateNodes.length, " are present for member ").concat(memberId, "."));
            }
            return (0, TimestampUtil_1.extractDateFromLiteral)(dateNodes[0]);
        }
    };
    SnapshotMetadataParser.parseSnapshotOf = function (store, identifier) {
        var snapshotOfNodes = store.getObjects(identifier, Vocabularies_1.LDES.terms.snapshotOf, null);
        if (snapshotOfNodes.length !== 1) {
            throw Error("Expected one snapshotOf. ".concat(snapshotOfNodes.length, " are present."));
        }
        return snapshotOfNodes[0].value;
    };
    SnapshotMetadataParser.parseSnapshotUntil = function (store, identifier) {
        var snapshotUntilNodes = store.getObjects(identifier, Vocabularies_1.LDES.terms.snapshotUntil, null);
        if (snapshotUntilNodes.length !== 1) {
            throw Error("Expected one snapshotUntil. ".concat(snapshotUntilNodes.length, " are present."));
        }
        return (0, TimestampUtil_1.extractDateFromLiteral)(snapshotUntilNodes[0]);
    };
    return SnapshotMetadataParser;
}(AbstractMetadataParser_1.AbstractMetadataParser));
exports.SnapshotMetadataParser = SnapshotMetadataParser;
