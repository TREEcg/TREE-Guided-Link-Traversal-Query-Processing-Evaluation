"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XSD = exports.VOID = exports.TREE = exports.RDF = exports.SH = exports.LDP = exports.LDES = exports.DCT = exports.DCAT = exports.AS = exports.createUriAndTermNamespace = exports.createTermNamespace = exports.createUriNamespace = exports.createNamespace = void 0;
var n3_1 = require("n3");
var namedNode = n3_1.DataFactory.namedNode;
/**
 * Creates a function that expands local names from the given base URI,
 * and exports the given local names as properties on the returned object.
 */
function createNamespace(baseUri, toValue) {
    var localNames = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        localNames[_i - 2] = arguments[_i];
    }
    var expanded = {};
    // Expose the main namespace
    expanded.namespace = toValue(baseUri);
    // Expose the listed local names as properties
    for (var _a = 0, localNames_1 = localNames; _a < localNames_1.length; _a++) {
        var localName = localNames_1[_a];
        expanded[localName] = toValue("".concat(baseUri).concat(localName));
    }
    return expanded;
}
exports.createNamespace = createNamespace;
/**
 * Creates a function that expands local names from the given base URI into strings,
 * and exports the given local names as properties on the returned object.
 */
function createUriNamespace(baseUri) {
    var localNames = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        localNames[_i - 1] = arguments[_i];
    }
    return createNamespace.apply(void 0, __spreadArray([baseUri, function (expanded) { return expanded; }], localNames, false));
}
exports.createUriNamespace = createUriNamespace;
/**
 * Creates a function that expands local names from the given base URI into named nodes,
 * and exports the given local names as properties on the returned object.
 */
function createTermNamespace(baseUri) {
    var localNames = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        localNames[_i - 1] = arguments[_i];
    }
    return createNamespace.apply(void 0, __spreadArray([baseUri, namedNode], localNames, false));
}
exports.createTermNamespace = createTermNamespace;
/**
 * Creates a function that expands local names from the given base URI into string,
 * and exports the given local names as properties on the returned object.
 * Under the `terms` property, it exposes the expanded local names as named nodes.
 */
function createUriAndTermNamespace(baseUri) {
    var localNames = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        localNames[_i - 1] = arguments[_i];
    }
    return Object.assign(createUriNamespace.apply(void 0, __spreadArray([baseUri], localNames, false)), { terms: createTermNamespace.apply(void 0, __spreadArray([baseUri], localNames, false)) });
}
exports.createUriAndTermNamespace = createUriAndTermNamespace;
exports.AS = createUriAndTermNamespace('https://www.w3.org/ns/activitystreams#', 'Announce', 'Person', 'Arrive', 'Link', 'Add', 'actor', 'object', 'location', 'href', 'name', 'url');
exports.DCAT = createUriAndTermNamespace('http://www.w3.org/ns/dcat#', 'Dataset', 'DataService', 'servesDataset', 'contactPoint', 'endpointURL');
exports.DCT = createUriAndTermNamespace('http://purl.org/dc/terms/', 'conformsTo', 'creator', 'created', 'description', 'identifier', 'issued', 'isVersionOf', 'license', 'modified', 'subject', 'hasVersion', 'title');
exports.LDES = createUriAndTermNamespace('https://w3id.org/ldes#', 'EventStream', 'BucketizerConfiguration', 'configuration', 'pageSize', 'bucketizer', 'snapshotOf', 'snapshotUntil', 'versionOfPath', 'timestampPath', 'versionMaterializationUntil', 'versionMaterializationOf');
exports.LDP = createUriAndTermNamespace('http://www.w3.org/ns/ldp#', 'contains', 'BasicContainer', 'Container', 'Resource', 'constrainedBy', 'inbox');
exports.SH = createUriAndTermNamespace('http://www.w3.org/ns/shacl#', 'targetClass', 'or');
exports.RDF = createUriAndTermNamespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type');
exports.TREE = createUriAndTermNamespace('https://w3id.org/tree#', 'Node', 'Collection', 'GreaterThanOrEqualToRelation', 'member', 'node', 'relation', 'path', 'shape', 'value', 'view');
exports.VOID = createUriAndTermNamespace('http://rdfs.org/ns/void#', 'subset');
exports.XSD = createUriAndTermNamespace('http://www.w3.org/2001/XMLSchema#', 'positiveInteger', 'dateTime');
