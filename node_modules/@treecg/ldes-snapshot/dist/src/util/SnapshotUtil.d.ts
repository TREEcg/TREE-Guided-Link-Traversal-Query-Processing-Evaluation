import { Store } from "n3";
import { ISnapshotOptions } from "../SnapshotTransform";
import { Member } from "@treecg/types";
/***************************************
 * Title: snapshotUtil
 * Description: utility functions used in and for the SnapshotTransform
 * Author: Wout Slabbinck (wout.slabbinck@ugent.be)
 * Created on 08/03/2022
 *****************************************/
/**
 * creates a store that corresponds to the metadata of a snapshot
 * @param options snapshot configuration
 * @return {Store}
 */
export declare function createSnapshotMetadata(options: ISnapshotOptions): Store;
/**
 * Retrieves the versionOfPath of a version LDES
 * @param store
 * @param ldesIdentifier
 * @returns {string}
 */
export declare function retrieveVersionOfProperty(store: Store, ldesIdentifier: string): string;
/**
 * Retrieves the timestampPath of a versioned LDES
 * @param store an N3 store
 * @param ldesIdentifier The identifier of the LDES
 * @returns {string}
 */
export declare function retrieveTimestampProperty(store: Store, ldesIdentifier: string): string;
/**
 * Creates ISnapshotOptions from a N3 Store which contains a versioned LDES
 * @param store an N3 store
 * @param ldesIdentifier The identifier of the LDES
 * @returns {{versionOfPath: string, ldesIdentifier: string, timestampPath: string}}
 */
export declare function extractSnapshotOptions(store: Store, ldesIdentifier: string): ISnapshotOptions;
export declare function isMember(data: any): boolean;
/**
 * Extracts the materialized id from a non-materialized member
 * @param member
 * @param versionOfPath
 * @returns {string}
 */
export declare function extractMaterializedId(member: Member, versionOfPath: string): string;
/**
 * Extracts the materialized id from a materialized member
 * @param member
 * @returns {string}
 */
export declare function extractMaterializedIdMaterialized(member: Member): string;
/**
 * Extracts the date from a member. Note: the date must be of type xsd:dateTime
 * @param store N3 Store only containing the member
 * @param timestampPath the `ldes:timestampPath` of the versioned LDES
 */
export declare function extractDate(store: Store, timestampPath: string): Date;
/**
 * Extracts the object Identifier from a member
 * @param store N3 Store only containing the member
 * @param versionOfPath the `ldes:versionOfPath` of the versioned LDES
 */
export declare function extractObjectIdentifier(store: Store, versionOfPath: string): string;
/**
 * Combines two snapshots from the same LDES to one snapshot.
 * Can be used to add incremental changes to an existing snapshot.
 * @param snapshot1 an N3 store containing a snapshot from a given LDES.
 * @param snapshot2 an N3 store containing a snapshot from a given LDES.
 */
export declare function combineSnapshots(snapshot1: Store, snapshot2: Store): Promise<Store>;
