"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTriples = exports.memberStreamtoStore = exports.extractMembers = exports.storeAsMemberStream = exports.stringToStore = exports.storeToString = exports.ldjsonToStore = exports.turtleStringToStore = void 0;
/***************************************
 * Title: Conversion
 * Description: Conversion functions
 * Author: Wout Slabbinck (wout.slabbinck@ugent.be)
 * Created on 10/12/2021
 *****************************************/
var n3_1 = require("n3");
var stream_1 = require("stream");
var Vocabularies_1 = require("./Vocabularies");
var namedNode = n3_1.DataFactory.namedNode;
var quad = n3_1.DataFactory.quad;
var rdfParser = require("rdf-parse").default;
var storeStream = require("rdf-store-stream").storeStream;
var streamifyString = require('streamify-string');
function turtleStringToStore(text, baseIRI) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, stringToStore(text, { contentType: 'text/turtle', baseIRI: baseIRI })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.turtleStringToStore = turtleStringToStore;
function ldjsonToStore(text, baseIRI) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, stringToStore(text, { contentType: 'application/ld+json', baseIRI: baseIRI })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.ldjsonToStore = ldjsonToStore;
/**
 * Converts a store to turtle string
 * @param store
 * @returns {string}
 */
function storeToString(store) {
    var writer = new n3_1.Writer();
    return writer.quadsToString(store.getQuads(null, null, null, null));
}
exports.storeToString = storeToString;
function stringToStore(text, options) {
    return __awaiter(this, void 0, void 0, function () {
        var textStream, quadStream;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    textStream = streamifyString(text);
                    quadStream = rdfParser.parse(textStream, options);
                    return [4 /*yield*/, storeStream(quadStream)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.stringToStore = stringToStore;
/**
 * From an N3 store to create a member stream https://github.com/TREEcg/types/blob/main/lib/Member.ts
 * @param store
 * @returns {Readable}
 */
function storeAsMemberStream(store) {
    // no members -> empty stream
    if (store.getSubjects(Vocabularies_1.TREE.member, null, null).length === 0) {
        return new stream_1.Readable({
            objectMode: true,
            read: function () {
                this.push(null);
            }
        });
    }
    var ldesIdentifier = store.getSubjects(Vocabularies_1.TREE.member, null, null)[0].value;
    var members = extractMembers(store, ldesIdentifier);
    var myReadable = new stream_1.Readable({
        objectMode: true,
        read: function () {
            for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
                var member = members_1[_i];
                this.push(member);
            }
            this.push(null);
        }
    });
    return myReadable;
}
exports.storeAsMemberStream = storeAsMemberStream;
/**
 * extract members without containment triple
 * @param store
 * @param ldesIdentifier
 * @returns {Member[]}
 */
function extractMembers(store, ldesIdentifier) {
    var memberSubjects = store.getObjects(ldesIdentifier, Vocabularies_1.TREE.member, null);
    var members = memberSubjects.map(function (memberSubject) {
        return {
            id: memberSubject,
            quads: store.getQuads(memberSubject, null, null, null)
        };
    });
    // extract every member based on the subject
    var mainSubjects = new Set(memberSubjects.map(function (subj) { return subj.id; }));
    var _loop_1 = function (member) {
        var _a;
        // to avoid issues with data referencing themselves in a circle,
        // duplicates are filtered out as well
        // the initial subject (there should only be one still) is added
        // as an initial to-be-ignored object
        var existingObjects = new Set(member.id.value);
        for (var _b = 0, _c = member.quads; _b < _c.length; _b++) {
            var quad_1 = _c[_b];
            if (existingObjects.has(quad_1.object.value)) {
                continue;
            }
            existingObjects.add(quad_1.object.value);
            // all quads with subjects equal to its object representation
            // gets added to this resource entry, so the original subjects'
            // data is completely present inside this single resource
            // this approach already works recursively, as push adds new elements
            // to the end, making them appear as subjects in further
            // iterations
            // quads having another main resource (that is not the current resource)
            // as object are getting filtered out as well, as they cannot be further
            // defined within this single resource
            (_a = member.quads).push.apply(_a, store.getQuads(quad_1.object, null, null, null).filter(function (obj) {
                return obj.object.id === member.id.value || !(mainSubjects.has(obj.object.id));
            }));
        }
    };
    for (var _i = 0, members_2 = members; _i < members_2.length; _i++) {
        var member = members_2[_i];
        _loop_1(member);
    }
    return members;
}
exports.extractMembers = extractMembers;
/**
 * From a member stream https://github.com/TREEcg/types/blob/main/lib/Member.ts to a N3 store
 * @param memberStream
 * @param collectionIdentifier
 * @returns {Store}
 */
function memberStreamtoStore(memberStream, collectionIdentifier) {
    var memberStream_1, memberStream_1_1;
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function () {
        var store, member, e_1_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    store = new n3_1.Store();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 12]);
                    memberStream_1 = __asyncValues(memberStream);
                    _b.label = 2;
                case 2: return [4 /*yield*/, memberStream_1.next()];
                case 3:
                    if (!(memberStream_1_1 = _b.sent(), !memberStream_1_1.done)) return [3 /*break*/, 5];
                    member = memberStream_1_1.value;
                    store.addQuads(member.quads);
                    if (collectionIdentifier) {
                        store.addQuad(namedNode(collectionIdentifier), namedNode(Vocabularies_1.TREE.member), member.id);
                    }
                    _b.label = 4;
                case 4: return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _b.trys.push([7, , 10, 11]);
                    if (!(memberStream_1_1 && !memberStream_1_1.done && (_a = memberStream_1.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _a.call(memberStream_1)];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/, store];
            }
        });
    });
}
exports.memberStreamtoStore = memberStreamtoStore;
/**
 * A function to convert materialized quads (generated from {@link https://www.npmjs.com/package/@treecg/version-materialize-rdf.js|materialize})
 * to triple quads.
 *
 * Optionally, the timestampPath can be given to add the timestamp property to the Object Identifier instead of the member Identifier.
 * @param materializedQuads materialized Quads.
 * @param opts Contains the object identifier and the timestampPath to couple the timestamp to the object identifier.
 * @returns {Quad[]} materialized Triples.
 */
function makeTriples(materializedQuads, opts) {
    var transformedTriples = [];
    // code below here is to transform quads to triples
    for (var _i = 0, materializedQuads_1 = materializedQuads; _i < materializedQuads_1.length; _i++) {
        var q = materializedQuads_1[_i];
        if (opts && q.predicate.value === opts.timestampPath) {
            // have version object id as indication for the update
            transformedTriples.push(quad(namedNode(opts.objectIdentifier), q.predicate, q.object));
        }
        else {
            // note: ugly fix to undefined problem, copying all other triples
            if (q.subject) {
                transformedTriples.push(quad(q.subject, q.predicate, q.object));
            }
            else {
                transformedTriples.push(quad(namedNode(q.graph.value), q.predicate, q.object));
            }
        }
    }
    return transformedTriples;
}
exports.makeTriples = makeTriples;
