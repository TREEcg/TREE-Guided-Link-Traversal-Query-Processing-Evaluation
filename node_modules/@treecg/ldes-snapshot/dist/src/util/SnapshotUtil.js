"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineSnapshots = exports.extractObjectIdentifier = exports.extractDate = exports.extractMaterializedIdMaterialized = exports.extractMaterializedId = exports.isMember = exports.extractSnapshotOptions = exports.retrieveTimestampProperty = exports.retrieveVersionOfProperty = exports.createSnapshotMetadata = void 0;
var n3_1 = require("n3");
var Vocabularies_1 = require("./Vocabularies");
var TimestampUtil_1 = require("./TimestampUtil");
var namedNode = n3_1.DataFactory.namedNode;
var quad = n3_1.DataFactory.quad;
var SnapshotMetadataInitializer_1 = require("../metadata/SnapshotMetadataInitializer");
var SnapshotMetadataParser_1 = require("../metadata/SnapshotMetadataParser");
var Snapshot_1 = require("../Snapshot");
/***************************************
 * Title: snapshotUtil
 * Description: utility functions used in and for the SnapshotTransform
 * Author: Wout Slabbinck (wout.slabbinck@ugent.be)
 * Created on 08/03/2022
 *****************************************/
/**
 * creates a store that corresponds to the metadata of a snapshot
 * @param options snapshot configuration
 * @return {Store}
 */
function createSnapshotMetadata(options) {
    options.date = options.date ? options.date : new Date();
    options.snapshotIdentifier = options.snapshotIdentifier ? options.snapshotIdentifier : "".concat(options.ldesIdentifier, "Snapshot");
    var store = new n3_1.Store();
    var snapshotIdentifier = namedNode(options.snapshotIdentifier);
    if (options.materialized) {
        store.add(quad(snapshotIdentifier, namedNode(Vocabularies_1.RDF.type), namedNode(Vocabularies_1.TREE.Collection)));
        store.add(quad(snapshotIdentifier, namedNode(Vocabularies_1.LDES.versionMaterializationOf), namedNode(options.ldesIdentifier)));
        store.add(quad(snapshotIdentifier, namedNode(Vocabularies_1.LDES.versionMaterializationUntil), (0, TimestampUtil_1.dateToLiteral)(options.date)));
    }
    else {
        if (!options.versionOfPath)
            throw new Error("No versionOfPath was given in options");
        if (!options.timestampPath)
            throw new Error("No timestampPath was given in options");
        store.addQuads(SnapshotMetadataInitializer_1.SnapshotMetadataInitializer.generateSnapshotMetadata(options).getStore().getQuads(null, null, null, null));
    }
    return store;
}
exports.createSnapshotMetadata = createSnapshotMetadata;
/**
 * Retrieves the versionOfPath of a version LDES
 * @param store
 * @param ldesIdentifier
 * @returns {string}
 */
function retrieveVersionOfProperty(store, ldesIdentifier) {
    var versionOfProperties = store.getObjects(namedNode(ldesIdentifier), Vocabularies_1.LDES.versionOfPath, null);
    if (versionOfProperties.length !== 1) {
        // https://semiceu.github.io/LinkedDataEventStreams/#version-materializations
        // A version materialization can be defined only if the original LDES defines both ldes:versionOfPath and ldes:timestampPath.
        throw Error("Found ".concat(versionOfProperties.length, " versionOfProperties for ").concat(ldesIdentifier, ", only expected one"));
    }
    return versionOfProperties[0].id;
}
exports.retrieveVersionOfProperty = retrieveVersionOfProperty;
/**
 * Retrieves the timestampPath of a versioned LDES
 * @param store an N3 store
 * @param ldesIdentifier The identifier of the LDES
 * @returns {string}
 */
function retrieveTimestampProperty(store, ldesIdentifier) {
    var timestampProperties = store.getObjects(namedNode(ldesIdentifier), Vocabularies_1.LDES.timestampPath, null);
    if (timestampProperties.length !== 1) {
        // https://semiceu.github.io/LinkedDataEventStreams/#version-materializations
        // A version materialization can be defined only if the original LDES defines both ldes:versionOfPath and ldes:timestampPath.
        throw Error("Found ".concat(timestampProperties.length, " timestampProperties for ").concat(ldesIdentifier, ", only expected one"));
    }
    return timestampProperties[0].id;
}
exports.retrieveTimestampProperty = retrieveTimestampProperty;
/**
 * Creates ISnapshotOptions from a N3 Store which contains a versioned LDES
 * @param store an N3 store
 * @param ldesIdentifier The identifier of the LDES
 * @returns {{versionOfPath: string, ldesIdentifier: string, timestampPath: string}}
 */
function extractSnapshotOptions(store, ldesIdentifier) {
    return {
        ldesIdentifier: ldesIdentifier,
        timestampPath: retrieveTimestampProperty(store, ldesIdentifier),
        versionOfPath: retrieveVersionOfProperty(store, ldesIdentifier),
    };
}
exports.extractSnapshotOptions = extractSnapshotOptions;
function isMember(data) {
    if (typeof data !== 'object' &&
        !Array.isArray(data) &&
        data !== null) {
        return false;
    }
    if (!(data.id && typeof data.id.value === 'string')) {
        return false;
    }
    if (data.quads && Array.isArray(data.quads)) {
        if (data.quads.length > 0 && data.quads[0].termType === 'Quad') {
            return true;
        }
        else
            return false;
    }
    else
        return false;
}
exports.isMember = isMember;
/**
 * Extracts the materialized id from a non-materialized member
 * @param member
 * @param versionOfPath
 * @returns {string}
 */
function extractMaterializedId(member, versionOfPath) {
    var store = new n3_1.Store(member.quads);
    var versionIds = store.getObjects(member.id, namedNode(versionOfPath), null);
    if (versionIds.length !== 1) {
        throw Error("Found ".concat(versionIds.length, " identifiers following the version paths of ").concat(member.id.value, "; expected one such identifier."));
    }
    return versionIds[0].value;
}
exports.extractMaterializedId = extractMaterializedId;
/**
 * Extracts the materialized id from a materialized member
 * @param member
 * @returns {string}
 */
function extractMaterializedIdMaterialized(member) {
    var store = new n3_1.Store(member.quads);
    var versionIds = store.getSubjects(namedNode(Vocabularies_1.DCT.hasVersion), member.id, null);
    if (versionIds.length !== 1) {
        throw Error("Found ".concat(versionIds.length, " identifiers following the version paths of ").concat(member.id.value, "; expected one such identifier."));
    }
    return versionIds[0].value;
}
exports.extractMaterializedIdMaterialized = extractMaterializedIdMaterialized;
/**
 * Extracts the date from a member. Note: the date must be of type xsd:dateTime
 * @param store N3 Store only containing the member
 * @param timestampPath the `ldes:timestampPath` of the versioned LDES
 */
function extractDate(store, timestampPath) {
    var dateTimeLiterals = store.getObjects(null, namedNode(timestampPath), null);
    if (dateTimeLiterals.length !== 1) {
        throw Error("Found ".concat(dateTimeLiterals.length, " dateTime literals."));
    }
    return (0, TimestampUtil_1.extractDateFromLiteral)(dateTimeLiterals[0]);
}
exports.extractDate = extractDate;
/**
 * Extracts the object Identifier from a member
 * @param store N3 Store only containing the member
 * @param versionOfPath the `ldes:versionOfPath` of the versioned LDES
 */
function extractObjectIdentifier(store, versionOfPath) {
    var objectIdentifiers = store.getObjects(null, namedNode(versionOfPath), null);
    if (objectIdentifiers.length !== 1) {
        throw Error("Found ".concat(objectIdentifiers.length, " versionOfPaths."));
    }
    return objectIdentifiers[0].value;
}
exports.extractObjectIdentifier = extractObjectIdentifier;
/**
 * Combines two snapshots from the same LDES to one snapshot.
 * Can be used to add incremental changes to an existing snapshot.
 * @param snapshot1 an N3 store containing a snapshot from a given LDES.
 * @param snapshot2 an N3 store containing a snapshot from a given LDES.
 */
function combineSnapshots(snapshot1, snapshot2) {
    return __awaiter(this, void 0, void 0, function () {
        var snapshot1Metadata, snapshot2Metadata, mostRecentTime, baseSnapshot, incrementalSnapshot, originalLDES, snapshotIdentifier, store, combinedSnapshot, combinedSnapshotStore, combinedSnapshotMetadata;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    snapshot1Metadata = SnapshotMetadataParser_1.SnapshotMetadataParser.extractSnapshotMetadata(snapshot1);
                    snapshot2Metadata = SnapshotMetadataParser_1.SnapshotMetadataParser.extractSnapshotMetadata(snapshot2);
                    if (snapshot1Metadata.snapshotOf !== snapshot2Metadata.snapshotOf) {
                        throw new Error("The two given snapshots do not come from the same LDES. Thus they can not be combined.");
                    }
                    mostRecentTime = new Date(Math.max(snapshot1Metadata.snapshotUntil.valueOf(), snapshot2Metadata.snapshotUntil.valueOf()));
                    baseSnapshot = snapshot1Metadata.snapshotUntil !== mostRecentTime ? snapshot1Metadata : snapshot2Metadata;
                    incrementalSnapshot = snapshot1Metadata.snapshotUntil === mostRecentTime ? snapshot1Metadata : snapshot2Metadata;
                    originalLDES = baseSnapshot.snapshotOf;
                    snapshotIdentifier = incrementalSnapshot.eventStreamIdentifier;
                    // create store which contains all members from the two snapshots
                    (_a = baseSnapshot.members).push.apply(_a, incrementalSnapshot.members);
                    store = baseSnapshot.getStore();
                    combinedSnapshot = new Snapshot_1.Snapshot(store);
                    return [4 /*yield*/, combinedSnapshot.create({ ldesIdentifier: baseSnapshot.eventStreamIdentifier, snapshotIdentifier: snapshotIdentifier })
                        // point to correct LDES from which it was created + add the created Time (which is the time of at which the incremental snapshot was created)
                    ];
                case 1:
                    combinedSnapshotStore = _b.sent();
                    combinedSnapshotMetadata = SnapshotMetadataParser_1.SnapshotMetadataParser.extractSnapshotMetadata(combinedSnapshotStore);
                    combinedSnapshotMetadata.snapshotOf = originalLDES;
                    combinedSnapshotMetadata.snapshotUntil = mostRecentTime;
                    return [2 /*return*/, combinedSnapshotMetadata.getStore()];
            }
        });
    });
}
exports.combineSnapshots = combineSnapshots;
