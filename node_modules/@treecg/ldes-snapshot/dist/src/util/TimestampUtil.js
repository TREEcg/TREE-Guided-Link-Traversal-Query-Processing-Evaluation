"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDateFromLiteral = exports.dateToLiteral = exports.timestampToLiteral = exports.extractTimestampFromLiteral = void 0;
/***************************************
 * Title: TimestampUtil
 * Description: utility function on timestamps
 * Author: Wout Slabbinck (wout.slabbinck@ugent.be)
 * Created on 03/03/2022
 *****************************************/
var n3_1 = require("n3");
var Vocabularies_1 = require("./Vocabularies");
var literal = n3_1.DataFactory.literal;
var namedNode = n3_1.DataFactory.namedNode;
/**
 * Extract a timestamp (ms) from an RDF Literal
 * @param dateTimeLiteral
 * @returns {number}
 */
function extractTimestampFromLiteral(dateTimeLiteral) {
    var value = dateTimeLiteral.value;
    if (!(dateTimeLiteral.datatype && dateTimeLiteral.datatype.id === Vocabularies_1.XSD.dateTime)) {
        throw Error("Could not interpret ".concat(dateTimeLiteral, " as it was not ").concat(Vocabularies_1.XSD.dateTime));
    }
    var dateTime = new Date(value);
    return dateTime.getTime();
}
exports.extractTimestampFromLiteral = extractTimestampFromLiteral;
/**
 * Convert a timestamp (ms) to an RDF Literal
 * @param timestamp
 * @returns {Literal}
 */
function timestampToLiteral(timestamp) {
    var dateTime = new Date(timestamp);
    return literal(dateTime.toISOString(), namedNode(Vocabularies_1.XSD.dateTime));
}
exports.timestampToLiteral = timestampToLiteral;
/** Convert a Date object to an RDF Literal
 * @param date
 * @returns {Literal}
 */
function dateToLiteral(date) {
    return timestampToLiteral(date.getTime());
}
exports.dateToLiteral = dateToLiteral;
/**
 * Extract a Date object from an RDF Literal
 * @param dateTimeLiteral
 * @returns {Date}
 */
function extractDateFromLiteral(dateTimeLiteral) {
    return new Date(extractTimestampFromLiteral(dateTimeLiteral));
}
exports.extractDateFromLiteral = extractDateFromLiteral;
