{"version":3,"file":"isDPoPToken.js","sourceRoot":"","sources":["../../src/guard/isDPoPToken.ts"],"names":[],"mappings":";;;AAAA,yCAAoC;AACpC,uGAAoG;AACpG,+DAA4D;AAE5D,uDAAoD;AAEpD;;GAEG;AACH,SAAS,iBAAiB,CAAC,CAAU;IACnC,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACxD,mBAAO,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,uEAAkC,CAAC,CAAC;IACjE,IAAA,iCAAe,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,mBAAO,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,UAAmB,CAAC,CAAC;AAChD,CAAC;AAED,SAAS,eAAe,CAAC,CAAU;IACjC,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/D,mBAAO,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,+BAAc,CAAC,CAAC;IAC7C,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,SAAgB,WAAW,CAAC,CAAU;IACpC,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;IACrE,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC5B,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAC3B,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AAChC,CAAC;AALD,kCAKC","sourcesContent":["import { asserts } from \"ts-guards\";\nimport { ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM } from \"../constant/ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM\";\nimport { REQUEST_METHOD } from \"../constant/REQUEST_METHOD\";\nimport type { DPoPToken, DPoPTokenHeader, DPoPTokenPayload } from \"../type\";\nimport { isDPoPPublicJWK } from \"./isDPoPPublicJWK\";\n\n/**\n * Check valid DPoP JWT\n */\nfunction isDPoPTokenHeader(x: unknown): asserts x is DPoPTokenHeader {\n  asserts.areObjectPropertiesOf(x, [\"alg\", \"jwk\", \"typ\"]);\n  asserts.isLiteralType(x.alg, ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM);\n  isDPoPPublicJWK(x.jwk);\n  asserts.isLiteral(x.typ, \"dpop+jwt\" as const);\n}\n\nfunction isDPoPTokenBody(x: unknown): asserts x is DPoPTokenPayload {\n  asserts.areObjectPropertiesOf(x, [\"htm\", \"htu\", \"iat\", \"jti\"]);\n  asserts.isLiteralType(x.htm, REQUEST_METHOD);\n  asserts.isString(x.htu);\n  asserts.isNumber(x.iat);\n  asserts.isString(x.jti);\n}\n\nexport function isDPoPToken(x: unknown): asserts x is DPoPToken {\n  asserts.areObjectPropertiesOf(x, [\"header\", \"payload\", \"signature\"]);\n  isDPoPTokenHeader(x.header);\n  isDPoPTokenBody(x.payload);\n  asserts.isString(x.signature);\n}\n"]}