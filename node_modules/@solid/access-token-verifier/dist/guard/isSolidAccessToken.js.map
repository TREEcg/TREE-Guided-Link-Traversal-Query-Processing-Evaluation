{"version":3,"file":"isSolidAccessToken.js","sourceRoot":"","sources":["../../src/guard/isSolidAccessToken.ts"],"names":[],"mappings":";;;AAAA,yCAAiE;AACjE,oEAAoE;AACpE,uGAAoG;AAOpG;;GAEG;AACH,SAAS,wBAAwB,CAC/B,CAAU;IAEV,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACjD,mBAAO,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,uEAAkC,CAAC,CAAC;IACjE,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,SAAS,yBAAyB,CAChC,CAAU;IAEV,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,mBAAO,CAAC,SAAS,CACf,uBAAW,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,OAAgB,CAAC;QAC5C,CAAC,0BAAc,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAC5D,IAAI,CACL,CAAC;IACF,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC1B,0BAA0B;IAC1B,0BAA0B;IAC1B,IAAI,IAAA,oCAAkB,EAAC,CAAC,EAAE,KAAK,CAAC,EAAE;QAChC,mBAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACzC,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC7B;AACH,CAAC;AAED,SAAgB,kBAAkB,CAAC,CAAU;IAC3C,mBAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;IACrE,wBAAwB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACnC,yBAAyB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACrC,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AAChC,CAAC;AALD,gDAKC","sourcesContent":["import { asserts, literalType, standardObject } from \"ts-guards\";\nimport { isObjectPropertyOf } from \"ts-guards/dist/standard-object\";\nimport { ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM } from \"../constant/ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM\";\nimport type {\n  SolidAccessToken,\n  SolidAccessTokenHeader,\n  SolidAccessTokenPayload,\n} from \"../type\";\n\n/**\n * Check valid Access Token\n */\nfunction isSolidAccessTokenHeader(\n  x: unknown\n): asserts x is SolidAccessTokenHeader {\n  asserts.areObjectPropertiesOf(x, [\"alg\", \"kid\"]);\n  asserts.isLiteralType(x.alg, ASYMMETRIC_CRYPTOGRAPHIC_ALGORITHM);\n  asserts.isString(x.kid);\n}\n\nfunction isSolidAccessTokenPayload(\n  x: unknown\n): asserts x is SolidAccessTokenPayload {\n  asserts.areObjectPropertiesOf(x, [\"aud\", \"exp\", \"iat\", \"iss\", \"webid\"]);\n  asserts.isLiteral(\n    literalType.isLiteral(x.aud, \"solid\" as const) ||\n      (standardObject.isArray(x.aud) && x.aud.includes(\"solid\")),\n    true\n  );\n  asserts.isNumber(x.exp);\n  asserts.isNumber(x.iat);\n  asserts.isString(x.iss);\n  asserts.isString(x.webid);\n  // TODO: Increase coverage\n  /* istanbul ignore next */\n  if (isObjectPropertyOf(x, \"cnf\")) {\n    asserts.isObjectPropertyOf(x.cnf, \"jkt\");\n    asserts.isString(x.cnf.jkt);\n  }\n}\n\nexport function isSolidAccessToken(x: unknown): asserts x is SolidAccessToken {\n  asserts.areObjectPropertiesOf(x, [\"header\", \"payload\", \"signature\"]);\n  isSolidAccessTokenHeader(x.header);\n  isSolidAccessTokenPayload(x.payload);\n  asserts.isString(x.signature);\n}\n"]}