{"version":3,"file":"retrieveAccessTokenIssuerKeySet.js","sourceRoot":"","sources":["../../src/algorithm/retrieveAccessTokenIssuerKeySet.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA0C;AAC1C,4DAA+B;AAC/B,kEAAyD;AACzD,oEAAoE;AACpE,0GAAuG;AACvG,oGAAiG;AAGjG,SAAS,kCAAkC,CAAC,GAAW;IACrD,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;AAC5E,CAAC;AAED,KAAK,UAAU,8BAA8B,CAAC,GAAW;IACvD,MAAM,SAAS,GAAG,kCAAkC,CAAC,GAAG,CAAC,CAAC;IAC1D,MAAM,QAAQ,GAAG,MAAM,IAAA,oBAAK,EAAC,SAAS,EAAE;QACtC,MAAM,EAAE,KAAK;QACb,gEAAgE;QAChE,OAAO,EAAE,EAAE,MAAM,EAAE,kBAAkB,EAAE;KACxC,CAAC,CAAC;IACH,IAAI,QAAQ,CAAC,EAAE,EAAE;QACf,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAS,CAAC;KACxC;IAED,MAAM,IAAI,6EAAqC,CAC7C,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,EAC1B,SAAS,CACV,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,UAAU,CAAC,GAAW;IACnC,MAAM,YAAY,GAAG,MAAM,8BAA8B,CAAC,GAAG,CAAC,CAAC;IAE/D,IAAI,CAAC,IAAA,oCAAkB,EAAC,YAAY,EAAE,UAAU,CAAC,EAAE;QACjD,MAAM,IAAI,uEAAkC,CAC1C,qDAAqD,GAAG,CAAC,QAAQ,EAAE,EAAE,CACtE,CAAC;KACH;IAED,IAAI,CAAC,IAAA,yBAAQ,EAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;QACpC,MAAM,IAAI,uEAAkC,CAC1C,6DAA6D,GAAG,CAAC,QAAQ,EAAE,EAAE,CAC9E,CAAC;KACH;IAED,IAAI;QACF,OAAO,IAAI,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,uEAAkC,CAC1C,gFAAgF,GAAG,CAAC,QAAQ,EAAE,EAAE,CACjG,CAAC;KACH;AACH,CAAC;AAEM,KAAK,UAAU,+BAA+B,CACnD,GAAW,EACX,SAAwC;IAExC,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,EAAE;QAC1D,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;KACvB;IAED,OAAO,IAAA,yBAAkB,EAAC,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AACnD,CAAC;AATD,0EASC","sourcesContent":["import { createRemoteJWKSet } from \"jose\";\nimport fetch from \"node-fetch\";\nimport { isString } from \"ts-guards/dist/primitive-type\";\nimport { isObjectPropertyOf } from \"ts-guards/dist/standard-object\";\nimport { IssuerConfigurationDereferencingError } from \"../error/IssuerConfigurationDereferencingError\";\nimport { SolidOidcIssuerJwksUriParsingError } from \"../error/SolidOidcIssuerJwksUriParsingError\";\nimport type { RetrieveIssuerKeySetFunction } from \"../type\";\n\nfunction getWellKnownOpenidConfigurationUrl(iss: string): string {\n  return iss.replace(/\\/$/, \"\").concat(\"/.well-known/openid-configuration\");\n}\n\nasync function dereferenceIssuerConfiguration(iss: string): Promise<JSON> {\n  const configUrl = getWellKnownOpenidConfigurationUrl(iss);\n  const response = await fetch(configUrl, {\n    method: \"GET\",\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    headers: { Accept: \"application/json\" },\n  });\n  if (response.ok) {\n    return (await response.json()) as JSON;\n  }\n\n  throw new IssuerConfigurationDereferencingError(\n    response.status.toString(),\n    configUrl\n  );\n}\n\nasync function getJwksUri(iss: string): Promise<URL> {\n  const issuerConfig = await dereferenceIssuerConfiguration(iss);\n\n  if (!isObjectPropertyOf(issuerConfig, \"jwks_uri\")) {\n    throw new SolidOidcIssuerJwksUriParsingError(\n      `JWKS URI field missing in issuer configuration at ${iss.toString()}`\n    );\n  }\n\n  if (!isString(issuerConfig.jwks_uri)) {\n    throw new SolidOidcIssuerJwksUriParsingError(\n      `JWKS URI field is not a string in issuer configuration at ${iss.toString()}`\n    );\n  }\n\n  try {\n    return new URL(issuerConfig.jwks_uri);\n  } catch (_) {\n    throw new SolidOidcIssuerJwksUriParsingError(\n      `JWKS URI field could not be parsed as a valid URL in issuer configuration at ${iss.toString()}`\n    );\n  }\n}\n\nexport async function retrieveAccessTokenIssuerKeySet(\n  iss: string,\n  getKeySet?: RetrieveIssuerKeySetFunction\n): ReturnType<RetrieveIssuerKeySetFunction> {\n  if (typeof getKeySet !== \"undefined\" && getKeySet !== null) {\n    return getKeySet(iss);\n  }\n\n  return createRemoteJWKSet(await getJwksUri(iss));\n}\n"]}