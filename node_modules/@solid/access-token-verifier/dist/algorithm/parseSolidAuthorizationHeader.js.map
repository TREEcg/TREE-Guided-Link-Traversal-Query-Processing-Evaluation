{"version":3,"file":"parseSolidAuthorizationHeader.js","sourceRoot":"","sources":["../../src/algorithm/parseSolidAuthorizationHeader.ts"],"names":[],"mappings":";;;AACA,6EAA0E;AAC1E,2EAAwE;AACxE,2DAAwD;AAExD;;;;;GAKG;AACH,SAAgB,6BAA6B,CAC3C,mBAA2B;IAE3B,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,CAAC,GACjD,qEAAqE,CAAC,IAAI,CACxE,mBAAmB,CACpB,IAAI,EAAE,CAAC;IAEV,IAAI,CAAC,KAAK,EAAE;QACV,gDAAgD;QAChD,IAAA,uDAA0B,EAAC,mBAAmB,CAAC,CAAC;QAEhD,+DAA+D;QAC/D,IAAA,qCAAiB,EAAC,mBAAmB,CAAC,CAAC;QAEvC,iDAAiD;QACjD,IAAA,qDAAyB,EAAC,mBAAmB,CAAC,CAAC;KAChD;IAED,OAAO;QACL,oBAAoB,EAAE,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC;YACtD,CAAC,CAAC,MAAM;YACR,CAAC,CAAC,QAAQ;QACZ,UAAU;QACV,UAAU;QACV,YAAY;QACZ,KAAK,EAAE,GAAG,UAAU,IAAI,UAAU,IAAI,YAAY,EAAE;KACrD,CAAC;AACJ,CAAC;AA5BD,sEA4BC","sourcesContent":["import type { SolidJwt } from \"../type\";\nimport { verifyAuthenticationScheme } from \"./verifyAuthenticationScheme\";\nimport { verifyBase64TokenSegments } from \"./verifyBase64TokenSegments\";\nimport { verifyJwtSegments } from \"./verifyJwtSegments\";\n\n/**\n * Parse an authorization header used in Solid\n *\n * @param authorizationHeader The authorization header used for the request.\n * @return {SolidJwt} A representation of the authorization header.\n */\nexport function parseSolidAuthorizationHeader(\n  authorizationHeader: string\n): SolidJwt {\n  const [match, joseHeader, jwsPayload, jwsSignature] =\n    /^(?:DPoP|Bearer) +([\\w\\-~+/]+)\\.([\\w\\-~+/]+)\\.([\\w\\-~+/]+)(?:=+)?$/i.exec(\n      authorizationHeader\n    ) ?? [];\n\n  if (!match) {\n    // Verify the authentication scheme is supported\n    verifyAuthenticationScheme(authorizationHeader);\n\n    // Verify the token is composed of the right number of segments\n    verifyJwtSegments(authorizationHeader);\n\n    // Verify each segment is a Base 64 encoded token\n    verifyBase64TokenSegments(authorizationHeader);\n  }\n\n  return {\n    authenticationScheme: /^DPoP/i.test(authorizationHeader)\n      ? \"DPoP\"\n      : \"Bearer\",\n    joseHeader,\n    jwsPayload,\n    jwsSignature,\n    value: `${joseHeader}.${jwsPayload}.${jwsSignature}`,\n  };\n}\n"]}