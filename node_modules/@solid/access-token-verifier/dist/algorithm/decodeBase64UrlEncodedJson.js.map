{"version":3,"file":"decodeBase64UrlEncodedJson.js","sourceRoot":"","sources":["../../src/algorithm/decodeBase64UrlEncodedJson.ts"],"names":[],"mappings":";;;AAAA,+BAAmC;AACnC,+BAAiC;AACjC,kGAA+F;AAE/F;;;;;;;GAOG;AACH,SAAgB,0BAA0B,CAAC,WAAmB;IAC5D,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,kBAAW,EAAE,CAAC,MAAM,CAAC,gBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;KAC5E;IAAC,MAAM;QACN,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,CAAC;KAC1D;AACH,CAAC;AAND,gEAMC","sourcesContent":["import { TextDecoder } from \"util\";\nimport { base64url } from \"jose\";\nimport { Base64UrlEncodedJsonDecodingError } from \"../error/Base64UrlEncodedJsonDecodingError\";\n\n/**\n * Decodes base 64 URL encoded JSON objects\n *\n * See also: https://datatracker.ietf.org/doc/html/rfc7519#section-7.2\n *\n * @param encodedJson The base64 URL encoded JSON\n * @returns The access token as a JSON\n */\nexport function decodeBase64UrlEncodedJson(encodedJson: string): unknown {\n  try {\n    return JSON.parse(new TextDecoder().decode(base64url.decode(encodedJson)));\n  } catch {\n    throw new Base64UrlEncodedJsonDecodingError(encodedJson);\n  }\n}\n"]}