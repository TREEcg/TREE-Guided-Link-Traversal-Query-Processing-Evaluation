{"version":3,"file":"verifyBase64TokenSegments.js","sourceRoot":"","sources":["../../src/algorithm/verifyBase64TokenSegments.ts"],"names":[],"mappings":";;;AAAA,8EAA2E;AAE3E;;;;;;;GAOG;AACH,SAAgB,yBAAyB,CAAC,mBAA2B;IACnE,MAAM,QAAQ,GAAG,mBAAmB;SACjC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;SAChC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEd,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;QAC1B,2CAA2C;QAC3C,IAAI,GAAG,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAChC,MAAM,IAAI,iDAAuB,CAAC,CAAC,CAAC,CAAC;aACtC;SACF;aAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAClC,MAAM,IAAI,iDAAuB,CAAC,CAAC,CAAC,CAAC;SACtC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAfD,8DAeC","sourcesContent":["import { Base64TokenSegmentError } from \"../error/Base64TokenSegmentError\";\n\n/**\n * Verify each segment is a Base 64 token\n *\n * > b64token = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * > -- https://datatracker.ietf.org/doc/html/rfc6750#section-2.1\n *\n * @param authorizationHeader The authorization header used for the request.\n */\nexport function verifyBase64TokenSegments(authorizationHeader: string): void {\n  const segments = authorizationHeader\n    .replace(/^(DPoP|Bearer) +/i, \"\")\n    .split(\".\");\n\n  segments.forEach((x, key) => {\n    // Last segments can end with 0 or more \"=\"\n    if (key === segments.length - 1) {\n      if (!/^[\\w\\-~+/]+(=+)?$/.test(x)) {\n        throw new Base64TokenSegmentError(x);\n      }\n    } else if (!/^[\\w\\-~+/]+$/.test(x)) {\n      throw new Base64TokenSegmentError(x);\n    }\n  });\n}\n"]}