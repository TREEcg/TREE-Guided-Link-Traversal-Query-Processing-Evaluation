{"version":3,"file":"retrieveWebidTrustedOidcIssuers.js","sourceRoot":"","sources":["../../src/algorithm/retrieveWebidTrustedOidcIssuers.ts"],"names":[],"mappings":";;;;;;AACA,2BAAgD;AAChD,4DAA+B;AAC/B,8EAA2E;AAC3E,0DAAuD;AACvD,kEAA+D;AAG/D,KAAK,UAAU,gBAAgB,CAAC,KAAa;IAC3C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,IAAA,oBAAK,EAAC,KAAK,EAAE;YAClC,OAAO,EAAE;gBACP,MAAM,EAAE,aAAa;aACtB;SACF,CAAC,CAAC;QACH,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAAC,OAAO,CAAU,EAAE;QACnB,MAAM,IAAI,iDAAuB,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;AAED,SAAS,QAAQ,CAAC,GAAW,EAAE,OAAe;IAC5C,IAAI;QACF,MAAM,KAAK,GAAG,IAAI,UAAK,EAAE,CAAC;QAC1B,KAAK,CAAC,QAAQ,CAAC,IAAI,WAAM,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,OAAO,KAAK,CAAC;KACd;IAAC,OAAO,CAAU,EAAE;QACnB,MAAM,IAAI,qCAAiB,EAAE,CAAC;KAC/B;AACH,CAAC;AAEM,KAAK,UAAU,+BAA+B,CACnD,KAAa,EACb,UAAwC;IAExC,IAAI;QACF,kCAAkC;QAClC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;KAChB;IAAC,OAAO,CAAU,EAAE;QACnB,MAAM,IAAI,6BAAa,CAAC,KAAK,CAAC,CAAC;KAChC;IACD,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,UAAU,KAAK,IAAI,EAAE;QAC5D,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,MAAM,KAAK,GAAG,QAAQ,CACpB,MAAM,gBAAgB,CAAC,KAAK,CAAC,EAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CACjD,CAAC;IAEF,OAAO,KAAK;SACT,UAAU,CACT,gBAAW,CAAC,SAAS,CAAC,KAAK,CAAC,EAC5B,gBAAW,CAAC,SAAS,CAAC,6CAA6C,CAAC,EACpE,gBAAW,CAAC,YAAY,EAAE,CAC3B;SACA,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACzB,CAAC;AA1BD,0EA0BC","sourcesContent":["import type { Quad } from \"@rdfjs/types\";\nimport { DataFactory, Parser, Store } from \"n3\";\nimport fetch from \"node-fetch\";\nimport { WebidDereferencingError } from \"../error/WebidDereferencingError\";\nimport { WebidIriError } from \"../error/WebidIriError\";\nimport { WebidParsingError } from \"../error/WebidParsingError\";\nimport type { RetrieveOidcIssuersFunction } from \"../type\";\n\nasync function dereferenceWebid(webid: string): Promise<string> {\n  try {\n    const response = await fetch(webid, {\n      headers: {\n        accept: \"text/turtle\",\n      },\n    });\n    return await response.text();\n  } catch (e: unknown) {\n    throw new WebidDereferencingError(webid);\n  }\n}\n\nfunction parseRdf(rdf: string, baseIRI: string): Store<Quad> {\n  try {\n    const store = new Store();\n    store.addQuads(new Parser({ baseIRI }).parse(rdf));\n    return store;\n  } catch (e: unknown) {\n    throw new WebidParsingError();\n  }\n}\n\nexport async function retrieveWebidTrustedOidcIssuers(\n  webid: string,\n  getIssuers?: RetrieveOidcIssuersFunction\n): ReturnType<RetrieveOidcIssuersFunction> {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(webid);\n  } catch (e: unknown) {\n    throw new WebidIriError(webid);\n  }\n  if (typeof getIssuers !== \"undefined\" && getIssuers !== null) {\n    return getIssuers(webid);\n  }\n\n  const store = parseRdf(\n    await dereferenceWebid(webid),\n    Object.assign(new URL(webid), { hash: \"\" }).href\n  );\n\n  return store\n    .getObjects(\n      DataFactory.namedNode(webid),\n      DataFactory.namedNode(\"http://www.w3.org/ns/solid/terms#oidcIssuer\"),\n      DataFactory.defaultGraph()\n    )\n    .map((x) => x.value);\n}\n"]}