"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieveWebidTrustedOidcIssuers = void 0;
const n3_1 = require("n3");
const node_fetch_1 = __importDefault(require("node-fetch"));
const WebidDereferencingError_1 = require("../error/WebidDereferencingError");
const WebidIriError_1 = require("../error/WebidIriError");
const WebidParsingError_1 = require("../error/WebidParsingError");
async function dereferenceWebid(webid) {
    try {
        const response = await (0, node_fetch_1.default)(webid, {
            headers: {
                accept: "text/turtle",
            },
        });
        return await response.text();
    }
    catch (e) {
        throw new WebidDereferencingError_1.WebidDereferencingError(webid);
    }
}
function parseRdf(rdf, baseIRI) {
    try {
        const store = new n3_1.Store();
        store.addQuads(new n3_1.Parser({ baseIRI }).parse(rdf));
        return store;
    }
    catch (e) {
        throw new WebidParsingError_1.WebidParsingError();
    }
}
async function retrieveWebidTrustedOidcIssuers(webid, getIssuers) {
    try {
        // eslint-disable-next-line no-new
        new URL(webid);
    }
    catch (e) {
        throw new WebidIriError_1.WebidIriError(webid);
    }
    if (typeof getIssuers !== "undefined" && getIssuers !== null) {
        return getIssuers(webid);
    }
    const store = parseRdf(await dereferenceWebid(webid), Object.assign(new URL(webid), { hash: "" }).href);
    return store
        .getObjects(n3_1.DataFactory.namedNode(webid), n3_1.DataFactory.namedNode("http://www.w3.org/ns/solid/terms#oidcIssuer"), n3_1.DataFactory.defaultGraph())
        .map((x) => x.value);
}
exports.retrieveWebidTrustedOidcIssuers = retrieveWebidTrustedOidcIssuers;
//# sourceMappingURL=retrieveWebidTrustedOidcIssuers.js.map