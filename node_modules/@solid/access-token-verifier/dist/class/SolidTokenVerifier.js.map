{"version":3,"file":"SolidTokenVerifier.js","sourceRoot":"","sources":["../../src/class/SolidTokenVerifier.ts"],"names":[],"mappings":";;;AAAA,kEAAqE;AACrE,gFAA6E;AAE7E,iDAA8C;AAC9C,2DAAwD;AACxD,2DAAwD;AAExD,MAAa,kBAAkB;IAO7B;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;QACvC,IAAI,CAAC,iBAAiB,GAAG,IAAI,qCAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,iBAAiB,GAAG,IAAI,qCAAiB,EAAE,CAAC;IACnD,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,mBAA2B,EAC3B,IAA6D;QAE7D,IAAI,QAAQ,CAAC;QACb,IAAI,IAAA,qCAAoB,EAAC,IAAI,CAAC,EAAE;YAC9B,QAAQ,GAAG;gBACT,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CACnD,IAAI,CAAC,YAAY,CAClB;aACF,CAAC;SACH;QACD,OAAO,IAAA,+CAAsB,EAC3B;YACE,MAAM,EAAE,mBAAmB;YAC3B,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;YACvE,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;SACtE,EACD,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AArCD,gDAqCC","sourcesContent":["import { isNotNullOrUndefined } from \"ts-guards/dist/primitive-type\";\nimport { verifySolidAccessToken } from \"../algorithm/verifySolidAccessToken\";\nimport type { SolidAccessTokenPayload, RequestMethod } from \"../type\";\nimport { DPoPJTICache } from \"./DPoPJTICache\";\nimport { IssuerKeySetCache } from \"./IssuerKeySetCache\";\nimport { WebIDIssuersCache } from \"./WebIDIssuersCache\";\n\nexport class SolidTokenVerifier {\n  private dpopJtiCache: DPoPJTICache;\n\n  private issuerKeySetCache: IssuerKeySetCache;\n\n  private webIDIssuersCache: WebIDIssuersCache;\n\n  public constructor() {\n    this.dpopJtiCache = new DPoPJTICache();\n    this.issuerKeySetCache = new IssuerKeySetCache();\n    this.webIDIssuersCache = new WebIDIssuersCache();\n  }\n\n  public async verify(\n    authorizationHeader: string,\n    dpop?: { header: string; method: RequestMethod; url: string }\n  ): Promise<SolidAccessTokenPayload> {\n    let dpopArgs;\n    if (isNotNullOrUndefined(dpop)) {\n      dpopArgs = {\n        header: dpop.header,\n        method: dpop.method,\n        url: dpop.url,\n        isDuplicateJTI: this.dpopJtiCache.isDuplicateJTI.bind(\n          this.dpopJtiCache\n        ),\n      };\n    }\n    return verifySolidAccessToken(\n      {\n        header: authorizationHeader,\n        issuers: this.webIDIssuersCache.getIssuers.bind(this.webIDIssuersCache),\n        keySet: this.issuerKeySetCache.getKeySet.bind(this.issuerKeySetCache),\n      },\n      dpopArgs\n    );\n  }\n}\n"]}