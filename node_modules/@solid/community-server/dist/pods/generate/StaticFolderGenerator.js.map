{"version":3,"file":"StaticFolderGenerator.js","sourceRoot":"","sources":["../../../src/pods/generate/StaticFolderGenerator.ts"],"names":[],"mappings":";;;AAKA;;GAEG;AACH,MAAa,qBAAqB;IAIhC,YAAmB,kBAA+C,EAAE,cAAsB;QACxF,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,QAAQ,CAAC,QAA4B,EAAE,OAAqB;QACjE,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClF,CAAC;CACF;AAZD,sDAYC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Resource, ResourcesGenerator } from './ResourcesGenerator';\nimport type { TemplatedResourcesGenerator } from './TemplatedResourcesGenerator';\nimport Dict = NodeJS.Dict;\n\n/**\n * Stores a static template folder that will be used to call the wrapped {@link TemplatedResourcesGenerator}.\n */\nexport class StaticFolderGenerator implements ResourcesGenerator {\n  private readonly resourcesGenerator: TemplatedResourcesGenerator;\n  private readonly templateFolder: string;\n\n  public constructor(resourcesGenerator: TemplatedResourcesGenerator, templateFolder: string) {\n    this.resourcesGenerator = resourcesGenerator;\n    this.templateFolder = templateFolder;\n  }\n\n  public generate(location: ResourceIdentifier, options: Dict<string>): AsyncIterable<Resource> {\n    return this.resourcesGenerator.generate(this.templateFolder, location, options);\n  }\n}\n"]}