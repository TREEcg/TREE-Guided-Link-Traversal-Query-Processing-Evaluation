/// <reference types="node" />
import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';
import type { Resource } from './ResourcesGenerator';
import type { TemplatedResourcesGenerator } from './TemplatedResourcesGenerator';
import Dict = NodeJS.Dict;
/**
 * Generates all resources found in specific subfolders of the given template folder.
 * In case the same resource is defined in several subfolders,
 * the data of the last subfolder in the list will be used.
 *
 * The results of all the subfolders will be merged so the end result is still a sorted stream of identifiers.
 *
 * One of the main use cases for this class is so template resources can be in a separate folder
 * than their corresponding authorization resources,
 * allowing for authorization-independent templates.
 */
export declare class SubfolderResourcesGenerator implements TemplatedResourcesGenerator {
    private readonly resourcesGenerator;
    private readonly subfolders;
    constructor(resourcesGenerator: TemplatedResourcesGenerator, subfolders: string[]);
    generate(templateFolder: string, location: ResourceIdentifier, options: Dict<string>): AsyncIterable<Resource>;
}
