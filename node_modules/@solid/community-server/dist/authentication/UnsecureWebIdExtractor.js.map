{"version":3,"file":"UnsecureWebIdExtractor.js","sourceRoot":"","sources":["../../src/authentication/UnsecureWebIdExtractor.ts"],"names":[],"mappings":";;;AAAA,gDAAkD;AAElD,oFAAiF;AACjF,mDAAgE;AAChE,+CAAgD;AAEhD,iEAA8D;AAE9D;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2CAAoB;IAAhE;;QACqB,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;IAcjD,CAAC;IAZQ,KAAK,CAAC,SAAS,CAAC,EAAE,OAAO,EAAe;QAC7C,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAClC,IAAI,CAAC,IAAA,uCAA0B,EAAC,OAAO,EAAE,aAAa,CAAC,EAAE;YACvD,MAAM,IAAI,iDAAuB,CAAC,0CAA0C,CAAC,CAAC;SAC/E;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAe;QAC1C,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAc,CAAE,CAAC,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;QAC3D,OAAO,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,EAAC,CAAC;IAC/C,CAAC;CACF;AAfD,wDAeC","sourcesContent":["import { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport { matchesAuthorizationScheme } from '../util/HeaderUtil';\nimport { CredentialGroup } from './Credentials';\nimport type { CredentialSet } from './Credentials';\nimport { CredentialsExtractor } from './CredentialsExtractor';\n\n/**\n * Credentials extractor which simply interprets the contents of the Authorization header as a WebID.\n */\nexport class UnsecureWebIdExtractor extends CredentialsExtractor {\n  protected readonly logger = getLoggerFor(this);\n\n  public async canHandle({ headers }: HttpRequest): Promise<void> {\n    const { authorization } = headers;\n    if (!matchesAuthorizationScheme('WebID', authorization)) {\n      throw new NotImplementedHttpError('No WebID Authorization header specified.');\n    }\n  }\n\n  public async handle({ headers }: HttpRequest): Promise<CredentialSet> {\n    const webId = /^WebID\\s+(.*)/ui.exec(headers.authorization!)![1];\n    this.logger.info(`Agent unsecurely claims to be ${webId}`);\n    return { [CredentialGroup.agent]: { webId }};\n  }\n}\n"]}