{"version":3,"file":"CachedResourceSet.js","sourceRoot":"","sources":["../../src/storage/CachedResourceSet.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,iBAAiB;IAI5B,YAAmB,MAAmB;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAA8B;QACrD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;SACpC;QACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACnC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAjBD,8CAiBC","sourcesContent":["import type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport type { ResourceSet } from './ResourceSet';\n\n/**\n * Caches resource existence in a `WeakMap` tied to the `ResourceIdentifier` object.\n */\nexport class CachedResourceSet implements ResourceSet {\n  private readonly source: ResourceSet;\n  private readonly cache: WeakMap<ResourceIdentifier, boolean>;\n\n  public constructor(source: ResourceSet) {\n    this.source = source;\n    this.cache = new WeakMap();\n  }\n\n  public async hasResource(identifier: ResourceIdentifier): Promise<boolean> {\n    if (this.cache.has(identifier)) {\n      return this.cache.get(identifier)!;\n    }\n    const result = await this.source.hasResource(identifier);\n    this.cache.set(identifier, result);\n    return result;\n  }\n}\n"]}