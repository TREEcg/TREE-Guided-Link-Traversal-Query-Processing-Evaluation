{"version":3,"file":"RdfToQuadConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/RdfToQuadConverter.ts"],"names":[],"mappings":";;;;;;AAAA,mCAAqC;AACrC,+DAA+D;AAE/D,8DAAgC;AAChC,uCAAwC;AACxC,iEAA4D;AAE5D,0DAAkC;AAClC,uFAAoF;AAEpF,6FAA0F;AAC1F,0DAAyD;AACzD,+EAA4E;AAC5E,kDAAuD;AACvD,sDAAmD;AACnD,0DAA4E;AAC5E,yFAAsF;AAGtF;;GAEG;AACH,MAAM,qBAAsB,SAAQ,2CAAmB;IAGrD,YAAmB,QAAgC;QACjD,KAAK,CAAC,qBAAK,CAAC,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,CAAE,GAAG,EAAE,IAAI,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACpD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAA,uBAAY,EAAC,IAAA,2BAAgB,EAAC,IAAI,CAAC,CAAC,CAAC;SAC3D;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,GAAW;QAC3B,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;YACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAa,kBAAmB,SAAQ,mEAAgC;IAGtE,YAAmB,WAAmC,EAAE;QACtD,MAAM,UAAU,GAAG,mBAAS,CAAC,eAAe,EAAE;YAC5C,6DAA6D;aAC5D,IAAI,CAAC,CAAC,KAAK,EAAY,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAW,EAAE,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC;QAC3F,KAAK,CAAC,UAAU,EAAE,6BAAc,CAAC,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,UAAU,EAA+B;QAC7E,MAAM,WAAW,GAAG,IAAI,+CAAsB,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAAc,CAAC,CAAC;QACxF,MAAM,QAAQ,GAAG,mBAAS,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE;YACpD,WAAW,EAAE,cAAc,CAAC,QAAQ,CAAC,WAAY;YACjD,OAAO,EAAE,UAAU,CAAC,IAAI;YACxB,0DAA0D;YAC1D,kEAAkE;YAClE,+EAA+E;YAC/E,kHAAkH;YAClH,CAAC,oCAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,cAAc;SACvD,CAAC;YACP,gHAAgH;YAChH,+GAA+G;YAC/G,mFAAmF;aAClF,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAc,EAAQ,EAAE;YAC7C,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,oCAAqB,EAAE,MAAM,EAAE,yBAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;QAEL,MAAM,IAAI,GAAG,IAAI,oBAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,IAAA,uBAAU,EAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,KAAK,EAAS,EAAE,CAAC,IAAI,yCAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAElG,OAAO,IAAI,yCAAmB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC;CACF;AAlCD,gDAkCC","sourcesContent":["import { PassThrough } from 'stream';\nimport { KeysRdfParseJsonLd } from '@comunica/context-entries';\nimport type { NamedNode } from '@rdfjs/types';\nimport fetch from 'cross-fetch';\nimport { readJsonSync } from 'fs-extra';\nimport { FetchDocumentLoader } from 'jsonld-context-parser';\nimport type { IJsonLdContext } from 'jsonld-context-parser';\nimport rdfParser from 'rdf-parse';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { resolveAssetPath } from '../../util/PathUtil';\nimport { pipeSafely } from '../../util/StreamUtil';\nimport { PREFERRED_PREFIX_TERM, SOLID_META } from '../../util/Vocabularies';\nimport { BaseTypedRepresentationConverter } from './BaseTypedRepresentationConverter';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\n\n/**\n * First checks if a context is stored locally before letting the super class do a fetch.\n */\nclass ContextDocumentLoader extends FetchDocumentLoader {\n  private readonly contexts: Record<string, IJsonLdContext>;\n\n  public constructor(contexts: Record<string, string>) {\n    super(fetch);\n    this.contexts = {};\n    for (const [ key, path ] of Object.entries(contexts)) {\n      this.contexts[key] = readJsonSync(resolveAssetPath(path));\n    }\n  }\n\n  public async load(url: string): Promise<IJsonLdContext> {\n    if (url in this.contexts) {\n      return this.contexts[url];\n    }\n    return super.load(url);\n  }\n}\n\n/**\n * Converts most major RDF serializations to `internal/quads`.\n *\n * Custom contexts can be defined to be used when parsing JSON-LD.\n * The keys of the object should be the URL of the context,\n * and the values the file path of the contexts to use when the JSON-LD parser would fetch the given context.\n * We use filepaths because embedding them directly into the configurations breaks Components.js.\n */\nexport class RdfToQuadConverter extends BaseTypedRepresentationConverter {\n  private readonly documentLoader: ContextDocumentLoader;\n\n  public constructor(contexts: Record<string, string> = {}) {\n    const inputTypes = rdfParser.getContentTypes()\n      // ContentType application/json MAY NOT be converted to Quad.\n      .then((types): string[] => types.filter((type): boolean => type !== 'application/json'));\n    super(inputTypes, INTERNAL_QUADS);\n    this.documentLoader = new ContextDocumentLoader(contexts);\n  }\n\n  public async handle({ representation, identifier }: RepresentationConverterArgs): Promise<Representation> {\n    const newMetadata = new RepresentationMetadata(representation.metadata, INTERNAL_QUADS);\n    const rawQuads = rdfParser.parse(representation.data, {\n      contentType: representation.metadata.contentType!,\n      baseIRI: identifier.path,\n      // All extra keys get passed in the Comunica ActionContext\n      // and this is the key that is used to define the document loader.\n      // See https://github.com/rubensworks/rdf-parse.js/blob/master/lib/RdfParser.ts\n      // and https://github.com/comunica/comunica/blob/master/packages/actor-rdf-parse-jsonld/lib/ActorRdfParseJsonLd.ts\n      [KeysRdfParseJsonLd.documentLoader.name]: this.documentLoader,\n    } as any)\n      // This works only for those cases where the data stream has been completely read before accessing the metadata.\n      // Eg. the PATCH operation, which is the main case why we store the prefixes in metadata here if there are any.\n      // See also https://github.com/CommunitySolidServer/CommunitySolidServer/issues/126\n      .on('prefix', (prefix, iri: NamedNode): void => {\n        newMetadata.addQuad(iri.value, PREFERRED_PREFIX_TERM, prefix, SOLID_META.terms.ResponseMetadata);\n      });\n\n    const pass = new PassThrough({ objectMode: true });\n    const data = pipeSafely(rawQuads, pass, (error): Error => new BadRequestHttpError(error.message));\n\n    return new BasicRepresentation(data, newMetadata);\n  }\n}\n"]}