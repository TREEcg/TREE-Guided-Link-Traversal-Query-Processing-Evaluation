{"version":3,"file":"BaseTypedRepresentationConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/BaseTypedRepresentationConverter.ts"],"names":[],"mappings":";;;AACA,uFAAoF;AACpF,qDAA2F;AAE3F,iFAA8E;AAQ9E,KAAK,UAAU,kBAAkB,CAAC,GAAwB;IACxD,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC;IAC3B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;KAC1B;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,OAAO,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAoB,EAAE,CAAC,CAAE,IAAI,EAAE,CAAC,CAAE,CAAC,CAAC,CAAC;KAClF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;;;GAQG;AACH,MAAsB,gCAAiC,SAAQ,2DAA4B;IAIzF,YAAmB,UAA+B,EAAE,WAAgC;QAClF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,WAAmB;QAC7C,MAAM,MAAM,GAAG,IAAA,8BAAa,EAAC,WAAW,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,CAAC;QACjE,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,MAAM,WAAW,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YAClD,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBACxD,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC;aACnC;YACD,OAAO,WAAW,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,SAAS,CAAC,IAAiC;QACtD,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;QAErD,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,iDAAuB,CAAC,8CAA8C,CAAC,CAAC;SACnF;QAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,EAAE,CAAC;QACtD,IAAI,CAAC,IAAA,oCAAmB,EAAC,WAAW,EAAE,iBAAiB,CAAC,EAAE;YACxD,MAAM,IAAI,iDAAuB,CAC/B,uBAAuB,WAAW,OAAO,IAAA,oCAAmB,EAAC,iBAAiB,CAC9E,aAAa,IAAA,oCAAmB,EAAC,WAAW,CAAC,GAAG,CACjD,CAAC;SACH;IACH,CAAC;CACF;AAjDD,4EAiDC","sourcesContent":["import type { ValuePreferences } from '../../http/representation/RepresentationPreferences';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { getConversionTarget, getTypeWeight, preferencesToString } from './ConversionUtil';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\ntype PromiseOrValue<T> = T | Promise<T>;\ntype ValuePreferencesArg =\n  PromiseOrValue<string> |\n  PromiseOrValue<string[]> |\n  PromiseOrValue<ValuePreferences>;\n\nasync function toValuePreferences(arg: ValuePreferencesArg): Promise<ValuePreferences> {\n  const resolved = await arg;\n  if (typeof resolved === 'string') {\n    return { [resolved]: 1 };\n  }\n  if (Array.isArray(resolved)) {\n    return Object.fromEntries(resolved.map((type): [string, number] => [ type, 1 ]));\n  }\n  return resolved;\n}\n\n/**\n * A base {@link TypedRepresentationConverter} implementation for converters\n * that can convert from all its input types to all its output types.\n *\n * This base class handles the `canHandle` call by comparing the input content type to the stored input types\n * and the output preferences to the stored output types.\n *\n * Output weights are determined by multiplying all stored output weights with the weight of the input type.\n */\nexport abstract class BaseTypedRepresentationConverter extends TypedRepresentationConverter {\n  protected inputTypes: Promise<ValuePreferences>;\n  protected outputTypes: Promise<ValuePreferences>;\n\n  public constructor(inputTypes: ValuePreferencesArg, outputTypes: ValuePreferencesArg) {\n    super();\n    this.inputTypes = toValuePreferences(inputTypes);\n    this.outputTypes = toValuePreferences(outputTypes);\n  }\n\n  /**\n   * Matches all inputs to all outputs.\n   */\n  public async getOutputTypes(contentType: string): Promise<ValuePreferences> {\n    const weight = getTypeWeight(contentType, await this.inputTypes);\n    if (weight > 0) {\n      const outputTypes = { ...await this.outputTypes };\n      for (const [ key, value ] of Object.entries(outputTypes)) {\n        outputTypes[key] = value * weight;\n      }\n      return outputTypes;\n    }\n    return {};\n  }\n\n  /**\n   * Determines whether the given conversion request is supported,\n   * given the available content type conversions:\n   *  - Checks if there is a content type for the input.\n   *  - Checks if the input type is supported by the parser.\n   *  - Checks if the parser can produce one of the preferred output types.\n   * Throws an error with details if conversion is not possible.\n   */\n  public async canHandle(args: RepresentationConverterArgs): Promise<void> {\n    const { contentType } = args.representation.metadata;\n\n    if (!contentType) {\n      throw new NotImplementedHttpError('Can not convert data without a Content-Type.');\n    }\n\n    const outputTypes = await this.getOutputTypes(contentType);\n    const outputPreferences = args.preferences.type ?? {};\n    if (!getConversionTarget(outputTypes, outputPreferences)) {\n      throw new NotImplementedHttpError(\n        `Cannot convert from ${contentType} to ${preferencesToString(outputPreferences)\n        }, only to ${preferencesToString(outputTypes)}.`,\n      );\n    }\n  }\n}\n"]}