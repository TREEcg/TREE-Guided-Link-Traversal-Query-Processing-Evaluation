{"version":3,"file":"ValidatingDataAccessor.js","sourceRoot":"","sources":["../../../src/storage/accessors/ValidatingDataAccessor.ts"],"names":[],"mappings":";;;AAEA,uFAAoF;AAKpF,uEAAoE;AAEpE;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,iDAAuB;IAGjE,YAAmB,QAAsB,EAAE,SAAoB;QAC7D,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,UAA8B,EAC9B,IAAuB,EACvB,QAAgC;QAEhC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;YAC/C,cAAc,EAAE,IAAI,yCAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC;YACvD,UAAU;SACX,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,QAAgC;QAC1F,qDAAqD;QACrD,0EAA0E;QAC1E,4HAA4H;QAC5H,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;CACF;AA1BD,wDA0BC","sourcesContent":["import type { Readable } from 'stream';\nimport type { Validator } from '../../http/auxiliary/Validator';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Guarded } from '../../util/GuardedStream';\nimport type { DataAccessor } from './DataAccessor';\nimport { PassthroughDataAccessor } from './PassthroughDataAccessor';\n\n/**\n * A ValidatingDataAccessor wraps a DataAccessor such that the data stream is validated while being written.\n * An AtomicDataAccessor can be used to prevent data being written in case validation fails.\n */\nexport class ValidatingDataAccessor extends PassthroughDataAccessor {\n  private readonly validator: Validator;\n\n  public constructor(accessor: DataAccessor, validator: Validator) {\n    super(accessor);\n    this.validator = validator;\n  }\n\n  public async writeDocument(\n    identifier: ResourceIdentifier,\n    data: Guarded<Readable>,\n    metadata: RepresentationMetadata,\n  ): Promise<void> {\n    const pipedRep = await this.validator.handleSafe({\n      representation: new BasicRepresentation(data, metadata),\n      identifier,\n    });\n    return this.accessor.writeDocument(identifier, pipedRep.data, metadata);\n  }\n\n  public async writeContainer(identifier: ResourceIdentifier, metadata: RepresentationMetadata): Promise<void> {\n    // A container's data mainly resides in its metadata,\n    // of which we can't calculate the disk size of at this point in the code.\n    // Extra info can be found here: https://github.com/CommunitySolidServer/CommunitySolidServer/pull/973#discussion_r723376888\n    return this.accessor.writeContainer(identifier, metadata);\n  }\n}\n"]}