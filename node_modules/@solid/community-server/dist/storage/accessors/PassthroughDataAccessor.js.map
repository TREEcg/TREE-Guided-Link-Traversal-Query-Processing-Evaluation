{"version":3,"file":"PassthroughDataAccessor.js","sourceRoot":"","sources":["../../../src/storage/accessors/PassthroughDataAccessor.ts"],"names":[],"mappings":";;;AAQA;;;;GAIG;AACH,MAAa,uBAAuB;IAGlC,YAAmB,QAAsB;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA8B,EAAE,IAAuB,EAAE,QAAgC;QAElH,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACjE,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,QAAgC;QAC1F,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,cAA8B;QACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,UAA8B;QACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAA8B;QACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA8B,EAAE,QAAgC;QACzF,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAEM,WAAW,CAAC,UAA8B;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B;QACxD,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;CACF;AAvCD,0DAuCC","sourcesContent":["import type { Readable } from 'stream';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Guarded } from '../../util/GuardedStream';\nimport type { AtomicDataAccessor } from './AtomicDataAccessor';\nimport type { DataAccessor } from './DataAccessor';\n\n/**\n * DataAccessor that calls the corresponding functions of the source DataAccessor.\n * Can be extended by data accessors that do not want to override all functions\n * by implementing a decorator pattern.\n */\nexport class PassthroughDataAccessor implements DataAccessor {\n  protected readonly accessor: AtomicDataAccessor;\n\n  public constructor(accessor: DataAccessor) {\n    this.accessor = accessor;\n  }\n\n  public async writeDocument(identifier: ResourceIdentifier, data: Guarded<Readable>, metadata: RepresentationMetadata):\n  Promise<void> {\n    return this.accessor.writeDocument(identifier, data, metadata);\n  }\n\n  public async writeContainer(identifier: ResourceIdentifier, metadata: RepresentationMetadata): Promise<void> {\n    return this.accessor.writeContainer(identifier, metadata);\n  }\n\n  public async canHandle(representation: Representation): Promise<void> {\n    return this.accessor.canHandle(representation);\n  }\n\n  public async getData(identifier: ResourceIdentifier): Promise<Guarded<Readable>> {\n    return this.accessor.getData(identifier);\n  }\n\n  public async getMetadata(identifier: ResourceIdentifier): Promise<RepresentationMetadata> {\n    return this.accessor.getMetadata(identifier);\n  }\n\n  public async writeMetadata(identifier: ResourceIdentifier, metadata: RepresentationMetadata): Promise<void > {\n    return this.accessor.writeMetadata(identifier, metadata);\n  }\n\n  public getChildren(identifier: ResourceIdentifier): AsyncIterableIterator<RepresentationMetadata> {\n    return this.accessor.getChildren(identifier);\n  }\n\n  public async deleteResource(identifier: ResourceIdentifier): Promise<void> {\n    return this.accessor.deleteResource(identifier);\n  }\n}\n"]}