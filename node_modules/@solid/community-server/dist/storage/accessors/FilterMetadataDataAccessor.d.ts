/// <reference types="node" />
import type { Readable } from 'stream';
import type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';
import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';
import type { Guarded } from '../../util/GuardedStream';
import type { FilterPattern } from '../../util/QuadUtil';
import type { DataAccessor } from './DataAccessor';
import { PassthroughDataAccessor } from './PassthroughDataAccessor';
/**
 * A FilterMetadataDataAccessor wraps a DataAccessor such that specific metadata properties
 * can be filtered before passing on the call to the wrapped DataAccessor.
 */
export declare class FilterMetadataDataAccessor extends PassthroughDataAccessor {
    private readonly filters;
    /**
     * Construct an instance of FilterMetadataDataAccessor.
     *
     * @param accessor - The DataAccessor to wrap.
     * @param filters - Filter patterns to be used for metadata removal.
     */
    constructor(accessor: DataAccessor, filters: FilterPattern[]);
    writeDocument(identifier: ResourceIdentifier, data: Guarded<Readable>, metadata: RepresentationMetadata): Promise<void>;
    writeContainer(identifier: ResourceIdentifier, metadata: RepresentationMetadata): Promise<void>;
    /**
     * Utility function that removes metadata entries,
     * based on the configured filter patterns.
     *
     * @param metadata - Metadata for the request.
     */
    private applyFilters;
}
