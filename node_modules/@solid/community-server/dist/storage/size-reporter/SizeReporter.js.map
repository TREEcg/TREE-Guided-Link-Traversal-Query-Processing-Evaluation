{"version":3,"file":"SizeReporter.js","sourceRoot":"","sources":["../../../src/storage/size-reporter/SizeReporter.ts"],"names":[],"mappings":"","sourcesContent":["import type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Size } from './Size';\n\n/**\n * A SizeReporter's only purpose (at the moment) is to calculate the size\n * of a resource. How the size is calculated or what unit it is in is defined by\n * the class implementing this interface.\n * One might use the amount of bytes and another might use the amount of triples\n * stored in a resource.\n */\nexport interface SizeReporter<T> {\n\n  /**\n   * Get the unit as a string in which a SizeReporter returns data\n   */\n  getUnit: () => string;\n\n  /**\n   * Get the size of a given resource\n   *\n   * @param identifier - the resource of which you want the size\n   * @returns The size of the resource as a Size object calculated recursively\n   * if the identifier leads to a container\n   */\n  getSize: (identifier: ResourceIdentifier) => Promise<Size>;\n\n  /**\n   * Calculate the size of a chunk based on which SizeReporter is being used\n   *\n   * @param chunk - the chunk of which you want the size\n   * @returns the size of the passed chunk as a number\n   */\n  calculateChunkSize: (chunk: T) => Promise<number>;\n\n  /**\n   * Estimate the size of a body / request by looking at its metadata\n   *\n   * @param metadata - the metadata of the resource you want an estimated  size of\n   * @returns the estimated size of the body / request or undefined if no\n   * meaningful estimation can be made\n   */\n  estimateSize: (metadata: RepresentationMetadata) => Promise<number | undefined>;\n}\n"]}