import type { RdfDatasetRepresentation } from '../../http/representation/RdfDatasetRepresentation';
import type { Representation } from '../../http/representation/Representation';
import type { RepresentationPatcherInput } from './RepresentationPatcher';
import { RepresentationPatcher } from './RepresentationPatcher';
/**
 * Patcher that converts the representation data to a representation with an N3 store, does the patch using this store
 * and then converts the representation with store back to a representation with data which gets returned
 */
export declare class RdfPatcher extends RepresentationPatcher<Representation> {
    protected readonly logger: import("../..").Logger;
    private readonly patcher;
    constructor(patcher: RepresentationPatcher<RdfDatasetRepresentation>);
    canHandle({ identifier, patch, representation }: RepresentationPatcherInput<Representation>): Promise<void>;
    handle({ identifier, patch, representation }: RepresentationPatcherInput<Representation>): Promise<Representation>;
}
