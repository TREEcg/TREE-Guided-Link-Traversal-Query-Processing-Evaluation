{"version":3,"file":"ImmutableMetadataPatcher.js","sourceRoot":"","sources":["../../../src/storage/patch/ImmutableMetadataPatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataFactory } from 'n3';\nimport type { Quad } from 'rdf-js';\nimport type { AuxiliaryStrategy } from '../../http/auxiliary/AuxiliaryStrategy';\nimport type { RdfDatasetRepresentation } from '../../http/representation/RdfDatasetRepresentation';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { ConflictHttpError } from '../../util/errors/ConflictHttpError';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport type { FilterPattern } from '../../util/QuadUtil';\nimport type { RepresentationPatcherInput } from './RepresentationPatcher';\nimport { RepresentationPatcher } from './RepresentationPatcher';\nimport namedNode = DataFactory.namedNode;\n\n/**\n * Guarantees that certain PATCH operations MUST NOT update certain triples in metadata resources.\n * Furthermore, this class also handles the patching for metadata resources.\n * List of triples that must not be updated are given during instantiation with the ImmutableTriple class.\n * When there is a change to an Immutable Triple, then a ConflictError will be thrown.\n */\nexport class ImmutableMetadataPatcher extends RepresentationPatcher<RdfDatasetRepresentation> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly patcher: RepresentationPatcher<RdfDatasetRepresentation>;\n  private readonly metadataStrategy: AuxiliaryStrategy;\n  private readonly immutablePatterns: FilterPattern[];\n\n  public constructor(patcher: RepresentationPatcher<RdfDatasetRepresentation>, metadataStrategy: AuxiliaryStrategy,\n    immutablePatterns: FilterPattern[]) {\n    super();\n    this.patcher = patcher;\n    this.metadataStrategy = metadataStrategy;\n    this.immutablePatterns = immutablePatterns;\n  }\n\n  public async canHandle(input: RepresentationPatcherInput<RdfDatasetRepresentation>): Promise<void> {\n    if (!this.metadataStrategy.isAuxiliaryIdentifier(input.identifier)) {\n      throw new NotImplementedHttpError('This handler only supports metadata resources.');\n    }\n    await this.patcher.canHandle(input);\n  }\n\n  public async handle(input: RepresentationPatcherInput<RdfDatasetRepresentation>): Promise<RdfDatasetRepresentation> {\n    if (!input.representation) {\n      throw new InternalServerError('Patcher requires a representation as input.');\n    }\n    const store = input.representation.dataset;\n\n    const immutablePatternMap = new Map<FilterPattern, Quad[]>();\n    const baseSubject = namedNode(this.metadataStrategy.getSubjectIdentifier(input.identifier).path);\n    for (const immutablePattern of this.immutablePatterns) {\n      const { predicate, object } = immutablePattern;\n      const subject = immutablePattern.subject ?? baseSubject;\n      const matches = store.getQuads(subject, predicate, object, null);\n      immutablePatternMap.set({ subject, predicate, object }, matches);\n    }\n\n    const patchedRepresentation = await this.patcher.handle(input);\n\n    for (const [ filterPattern, originalQuads ] of immutablePatternMap.entries()) {\n      const { subject, predicate, object } = filterPattern;\n      const quads = patchedRepresentation.dataset.getQuads(subject, predicate, object, null);\n      const predicateString = predicate ? `<${predicate.value}>` : '?p';\n      const objectString = object ? `<${object.value}>` : '?o';\n\n      if (quads.length !== originalQuads.length) {\n        throw new ConflictHttpError(\n          `Not allowed to edit metadata of the form \"<${subject!.value}> ${predicateString} ${objectString}.\".`,\n        );\n      }\n      const changed = quads.some((inputQuad): boolean => !originalQuads\n        .some((patchedQuad): boolean => inputQuad.equals(patchedQuad)));\n      if (changed) {\n        throw new ConflictHttpError(\n          `Not allowed to edit metadata of the form \"<${subject!.value}> ${predicateString} ${objectString}.\".`,\n        );\n      }\n    }\n\n    return input.representation;\n  }\n}\n"]}