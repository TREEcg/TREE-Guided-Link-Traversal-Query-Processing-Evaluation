{"version":3,"file":"N3Patcher.js","sourceRoot":"","sources":["../../../src/storage/patch/N3Patcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryEngine } from '@comunica/query-sparql';\nimport arrayifyStream from 'arrayify-stream';\nimport type { Store } from 'n3';\nimport type { Bindings, Quad, Term } from 'rdf-js';\nimport { mapTerms } from 'rdf-terms';\nimport { Generator, Wildcard } from 'sparqljs';\nimport type { SparqlGenerator } from 'sparqljs';\nimport { isN3Patch } from '../../http/representation/N3Patch';\nimport type { N3Patch } from '../../http/representation/N3Patch';\nimport type { RdfDatasetRepresentation } from '../../http/representation/RdfDatasetRepresentation';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { ConflictHttpError } from '../../util/errors/ConflictHttpError';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { uniqueQuads } from '../../util/QuadUtil';\nimport type { RdfStorePatcherInput } from './RdfStorePatcher';\nimport type { RepresentationPatcherInput } from './RepresentationPatcher';\nimport { RepresentationPatcher } from './RepresentationPatcher';\n\n/**\n * Applies an N3 Patch to a representation, or creates a new one if required.\n * Follows all the steps from Solid, §5.3.1: https://solid.github.io/specification/protocol#n3-patch\n */\nexport class N3Patcher extends RepresentationPatcher<RdfDatasetRepresentation> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly engine: QueryEngine;\n  private readonly generator: SparqlGenerator;\n\n  public constructor() {\n    super();\n    this.engine = new QueryEngine();\n    this.generator = new Generator();\n  }\n\n  public async canHandle({ patch }: RepresentationPatcherInput<RdfDatasetRepresentation>): Promise<void> {\n    if (!isN3Patch(patch)) {\n      throw new NotImplementedHttpError('Only N3 Patch updates are supported');\n    }\n  }\n\n  public async handle(input: RepresentationPatcherInput<RdfDatasetRepresentation>): Promise<RdfDatasetRepresentation> {\n    if (!input.representation) {\n      throw new InternalServerError('Patcher requires a representation as input.');\n    }\n    const store = input.representation.dataset;\n\n    const patch = input.patch as N3Patch;\n\n    // No work to be done if the patch is empty\n    if (patch.deletes.length === 0 && patch.inserts.length === 0 && patch.conditions.length === 0) {\n      this.logger.debug('Empty patch, returning input.');\n      return input.representation;\n    }\n\n    await this.patch({\n      identifier: input.identifier,\n      patch,\n      store,\n    });\n    return input.representation;\n  }\n\n  /**\n   * Applies the given N3Patch to the store.\n   * First the conditions are applied to find the necessary bindings,\n   * which are then applied to generate the triples that need to be deleted and inserted.\n   * After that the delete and insert operations are applied.\n   */\n  private async patch({ identifier, patch, store }: RdfStorePatcherInput): Promise<Store> {\n    this.logger.debug(`${store.size} quads in ${identifier.path}.`);\n\n    const { deletes, inserts } = await this.applyConditions(patch as N3Patch, identifier, store);\n\n    // Apply deletes\n    if (deletes.length > 0) {\n      // There could potentially be duplicates after applying conditions,\n      // which would result in an incorrect count.\n      const uniqueDeletes = uniqueQuads(deletes);\n      // Solid, §5.3.1: \"The triples resulting from ?deletions are to be removed from the RDF dataset.\"\n      const oldSize = store.size;\n      store.removeQuads(uniqueDeletes);\n\n      // Solid, §5.3.1: \"If the set of triples resulting from ?deletions is non-empty and the dataset\n      // does not contain all of these triples, the server MUST respond with a 409 status code.\"\n      if (oldSize - store.size !== uniqueDeletes.length) {\n        throw new ConflictHttpError(\n          'The document does not contain all triples the N3 Patch requests to delete, which is required for patching.',\n        );\n      }\n      this.logger.debug(`Deleted ${oldSize - store.size} quads from ${identifier.path}.`);\n    }\n\n    // Solid, §5.3.1: \"The triples resulting from ?insertions are to be added to the RDF dataset,\n    // with each blank node from ?insertions resulting in a newly created blank node.\"\n    store.addQuads(inserts);\n\n    this.logger.debug(`${store.size} total quads after patching ${identifier.path}.`);\n\n    return store;\n  }\n\n  /**\n   * Creates a new N3Patch where the conditions of the provided patch parameter are applied to its deletes and inserts.\n   * Also does the necessary checks to make sure the conditions are valid for the given dataset.\n   */\n  private async applyConditions(patch: N3Patch, identifier: ResourceIdentifier, source: Store): Promise<N3Patch> {\n    const { conditions } = patch;\n    let { deletes, inserts } = patch;\n\n    if (conditions.length > 0) {\n      // Solid, §5.3.1: \"If ?conditions is non-empty, find all (possibly empty) variable mappings\n      // such that all of the resulting triples occur in the dataset.\"\n      const sparql = this.generator.stringify({\n        type: 'query',\n        queryType: 'SELECT',\n        variables: [ new Wildcard() ],\n        prefixes: {},\n        where: [{\n          type: 'bgp',\n          triples: conditions,\n        }],\n      });\n      this.logger.debug(`Finding bindings using SPARQL query ${sparql}`);\n      const bindingsStream = await this.engine.queryBindings(sparql, { sources: [ source ], baseIRI: identifier.path });\n      const bindings: Bindings[] = await arrayifyStream(bindingsStream);\n\n      // Solid, §5.3.1: \"If no such mapping exists, or if multiple mappings exist,\n      // the server MUST respond with a 409 status code.\"\n      if (bindings.length === 0) {\n        throw new ConflictHttpError(\n          'The document does not contain any matches for the N3 Patch solid:where condition.',\n        );\n      }\n      if (bindings.length > 1) {\n        throw new ConflictHttpError(\n          'The document contains multiple matches for the N3 Patch solid:where condition, which is not allowed.',\n        );\n      }\n\n      // Apply bindings to deletes/inserts\n      deletes = deletes.map((quad): Quad => mapTerms<Quad>(quad, (term): Term =>\n        term.termType === 'Variable' ? bindings[0].get(term)! : term));\n      inserts = inserts.map((quad): Quad => mapTerms<Quad>(quad, (term): Term =>\n        term.termType === 'Variable' ? bindings[0].get(term)! : term));\n    }\n\n    return {\n      ...patch,\n      deletes,\n      inserts,\n      conditions: [],\n    };\n  }\n}\n"]}