{"version":3,"file":"MonitoringStore.js","sourceRoot":"","sources":["../../src/storage/MonitoringStore.ts"],"names":[],"mappings":";;;AAAA,mCAAsC;AAKtC,uDAAoD;AAIpD,sDAAsD;AACtD,MAAM,iBAAiB,GAAgB,IAAI,GAAG,CAAC,CAAE,iBAAE,CAAC,MAAM,EAAE,iBAAE,CAAC,MAAM,EAAE,iBAAE,CAAC,MAAM,CAAE,CAAC,CAAC;AAEpF;;;GAGG;AACH,MAAa,eACX,SAAQ,qBAAY;IAGpB,YAAmB,MAAS;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAA8B;QACrD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,WAAsC,EACnG,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,SAA6B,EAAE,cAA8B,EACpF,UAAuB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC,CAAC;IAChG,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EACxD,UAAuB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IACpF,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,cAA8B,EAC3F,UAAuB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC,CAAC;IACvG,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,KAAY,EACtE,UAAuB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,WAAW,CAAC,OAAkB;QACpC,KAAK,MAAM,CAAE,UAAU,EAAE,QAAQ,CAAE,IAAI,OAAO,EAAE;YAC9C,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,uBAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YAC3C,IAAI,QAAQ,IAAI,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aACvC;SACF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAjDD,0CAiDC","sourcesContent":["import { EventEmitter } from 'events';\nimport type { Patch } from '../http/representation/Patch';\nimport type { Representation } from '../http/representation/Representation';\nimport type { RepresentationPreferences } from '../http/representation/RepresentationPreferences';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { AS, SOLID_AS } from '../util/Vocabularies';\nimport type { Conditions } from './Conditions';\nimport type { ResourceStore, ChangeMap } from './ResourceStore';\n\n// The ActivityStream terms for which we emit an event\nconst emittedActivities: Set<string> = new Set([ AS.Create, AS.Delete, AS.Update ]);\n\n/**\n * Store that notifies listeners of changes to its source\n * by emitting a `changed` event.\n */\nexport class MonitoringStore<T extends ResourceStore = ResourceStore>\n  extends EventEmitter implements ResourceStore {\n  private readonly source: T;\n\n  public constructor(source: T) {\n    super();\n    this.source = source;\n  }\n\n  public async hasResource(identifier: ResourceIdentifier): Promise<boolean> {\n    return this.source.hasResource(identifier);\n  }\n\n  public async getRepresentation(identifier: ResourceIdentifier, preferences: RepresentationPreferences,\n    conditions?: Conditions): Promise<Representation> {\n    return this.source.getRepresentation(identifier, preferences, conditions);\n  }\n\n  public async addResource(container: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ChangeMap> {\n    return this.emitChanged(await this.source.addResource(container, representation, conditions));\n  }\n\n  public async deleteResource(identifier: ResourceIdentifier,\n    conditions?: Conditions): Promise<ChangeMap> {\n    return this.emitChanged(await this.source.deleteResource(identifier, conditions));\n  }\n\n  public async setRepresentation(identifier: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ChangeMap> {\n    return this.emitChanged(await this.source.setRepresentation(identifier, representation, conditions));\n  }\n\n  public async modifyResource(identifier: ResourceIdentifier, patch: Patch,\n    conditions?: Conditions): Promise<ChangeMap> {\n    return this.emitChanged(await this.source.modifyResource(identifier, patch, conditions));\n  }\n\n  private emitChanged(changes: ChangeMap): ChangeMap {\n    for (const [ identifier, metadata ] of changes) {\n      const activity = metadata.get(SOLID_AS.terms.Activity);\n      this.emit('changed', identifier, activity);\n      if (activity && emittedActivities.has(activity.value)) {\n        this.emit(activity.value, identifier);\n      }\n    }\n\n    return changes;\n  }\n}\n"]}