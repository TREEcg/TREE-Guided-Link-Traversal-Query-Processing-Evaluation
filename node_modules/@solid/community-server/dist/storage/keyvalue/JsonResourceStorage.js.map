{"version":3,"file":"JsonResourceStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/JsonResourceStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\nimport { parse } from 'path';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport { ensureLeadingSlash, ensureTrailingSlash, isContainerIdentifier, joinUrl,\n  joinFilePath } from '../../util/PathUtil';\nimport { readableToString } from '../../util/StreamUtil';\nimport { LDP } from '../../util/Vocabularies';\nimport type { ResourceStore } from '../ResourceStore';\nimport type { KeyValueStorage } from './KeyValueStorage';\n\n// Maximum allowed length for the keys, longer keys will be hashed.\nconst KEY_LENGTH_LIMIT = 255;\n\n/**\n * A {@link KeyValueStorage} for JSON-like objects using a {@link ResourceStore} as backend.\n *\n * Creates a base URL by joining the input base URL with the container string.\n * The storage assumes it has ownership over all entries in the target container\n * so no other classes should access resources there to prevent issues.\n *\n * Assumes the input keys can be safely used to generate identifiers,\n * which will be appended to the stored base URL.\n *\n * All non-404 errors will be re-thrown.\n */\nexport class JsonResourceStorage<T> implements KeyValueStorage<string, T> {\n  private readonly source: ResourceStore;\n  private readonly container: string;\n\n  public constructor(source: ResourceStore, baseUrl: string, container: string) {\n    this.source = source;\n    this.container = ensureTrailingSlash(joinUrl(baseUrl, container));\n  }\n\n  public async get(key: string): Promise<T | undefined> {\n    try {\n      const identifier = this.keyToIdentifier(key);\n      const representation = await this.source.getRepresentation(identifier, { type: { 'application/json': 1 }});\n      return JSON.parse(await readableToString(representation.data));\n    } catch (error: unknown) {\n      if (!NotFoundHttpError.isInstance(error)) {\n        throw error;\n      }\n    }\n  }\n\n  public async has(key: string): Promise<boolean> {\n    const identifier = this.keyToIdentifier(key);\n    return await this.source.hasResource(identifier);\n  }\n\n  public async set(key: string, value: unknown): Promise<this> {\n    const identifier = this.keyToIdentifier(key);\n    const representation = new BasicRepresentation(JSON.stringify(value), identifier, 'application/json');\n    await this.source.setRepresentation(identifier, representation);\n    return this;\n  }\n\n  public async delete(key: string): Promise<boolean> {\n    try {\n      const identifier = this.keyToIdentifier(key);\n      await this.source.deleteResource(identifier);\n      return true;\n    } catch (error: unknown) {\n      if (!NotFoundHttpError.isInstance(error)) {\n        throw error;\n      }\n      return false;\n    }\n  }\n\n  public async* entries(): AsyncIterableIterator<[string, T]> {\n    yield* this.getResourceEntries({ path: this.container });\n  }\n\n  /**\n   * Recursively iterates through the container to find all documents.\n   */\n  private async* getResourceEntries(identifier: ResourceIdentifier): AsyncIterableIterator<[string, T]> {\n    const representation = await this.safelyGetResource(identifier);\n    if (representation) {\n      if (isContainerIdentifier(identifier)) {\n        // Only need the metadata\n        representation.data.destroy();\n        const members = representation.metadata.getAll(LDP.terms.contains).map((term): string => term.value);\n        for (const path of members) {\n          yield* this.getResourceEntries({ path });\n        }\n      } else {\n        const json = JSON.parse(await readableToString(representation.data));\n        yield [ this.identifierToKey(identifier), json ];\n      }\n    }\n  }\n\n  /**\n   * Returns the representation for the given identifier.\n   * Returns undefined if a 404 error is thrown.\n   * Re-throws the error in all other cases.\n   */\n  private async safelyGetResource(identifier: ResourceIdentifier): Promise<Representation | undefined> {\n    let representation: Representation | undefined;\n    try {\n      const preferences = isContainerIdentifier(identifier) ? {} : { type: { 'application/json': 1 }};\n      representation = await this.source.getRepresentation(identifier, preferences);\n    } catch (error: unknown) {\n      // Can happen if resource is deleted by this point.\n      // When using this for internal data this can specifically happen quite often with locks.\n      if (!NotFoundHttpError.isInstance(error)) {\n        throw error;\n      }\n    }\n    return representation;\n  }\n\n  /**\n   * Converts a key into an identifier for internal storage.\n   */\n  private keyToIdentifier(key: string): ResourceIdentifier {\n    // Parse the key as a file path\n    const parsedPath = parse(key);\n    // Hash long filenames to prevent issues with the underlying storage.\n    // E.g. a UNIX a file name cannot exceed 255 bytes.\n    // This is a temporary fix for https://github.com/CommunitySolidServer/CommunitySolidServer/issues/1013,\n    // until we have a solution for data migration.\n    if (parsedPath.base.length > KEY_LENGTH_LIMIT) {\n      key = joinFilePath(parsedPath.dir, this.applyHash(parsedPath.base));\n    }\n    return { path: joinUrl(this.container, key) };\n  }\n\n  /**\n   * Converts an internal identifier to an external key.\n   */\n  private identifierToKey(identifier: ResourceIdentifier): string {\n    // Due to the usage of `joinUrl` we don't know for sure if there was a preceding slash,\n    // so we always add one for consistency.\n    // In practice this would only be an issue if a class depends\n    // on the `entries` results matching a key that was sent before.\n    return ensureLeadingSlash(identifier.path.slice(this.container.length));\n  }\n\n  private applyHash(key: string): string {\n    return createHash('sha256').update(key).digest('hex');\n  }\n}\n"]}