"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncodingPathStorage = void 0;
const PathUtil_1 = require("../../util/PathUtil");
/**
 * Transforms the keys into relative paths, to be used by the source storage.
 * Encodes the input key with base64 encoding,
 * to make sure there are no invalid or special path characters,
 * and prepends it with the stored relative path.
 * This can be useful to eventually generate URLs in specific containers
 * without having to worry about cleaning the input keys.
 */
class EncodingPathStorage {
    constructor(relativePath, source) {
        this.source = source;
        this.basePath = (0, PathUtil_1.ensureTrailingSlash)(relativePath);
    }
    async get(key) {
        const path = this.keyToPath(key);
        return this.source.get(path);
    }
    async has(key) {
        const path = this.keyToPath(key);
        return this.source.has(path);
    }
    async set(key, value) {
        const path = this.keyToPath(key);
        await this.source.set(path, value);
        return this;
    }
    async delete(key) {
        const path = this.keyToPath(key);
        return this.source.delete(path);
    }
    async *entries() {
        for await (const [path, value] of this.source.entries()) {
            // The only relevant entries for this storage are those that start with the base path
            if (!path.startsWith(this.basePath)) {
                continue;
            }
            const key = this.pathToKey(path);
            yield [key, value];
        }
    }
    /**
     * Converts a key into a path for internal storage.
     */
    keyToPath(key) {
        const encodedKey = Buffer.from(key).toString('base64');
        return (0, PathUtil_1.joinUrl)(this.basePath, encodedKey);
    }
    /**
     * Converts an internal storage path string into the original path key.
     */
    pathToKey(path) {
        const buffer = Buffer.from(path.slice(this.basePath.length), 'base64');
        return buffer.toString('utf-8');
    }
}
exports.EncodingPathStorage = EncodingPathStorage;
//# sourceMappingURL=EncodingPathStorage.js.map