{"version":3,"file":"EncodingPathStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/EncodingPathStorage.ts"],"names":[],"mappings":";;;AAAA,kDAAmE;AAGnE;;;;;;;GAOG;AACH,MAAa,mBAAmB;IAI9B,YAAmB,YAAoB,EAAE,MAAkC;QACzE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAA,8BAAmB,EAAC,YAAY,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAQ;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAW;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEM,KAAK,CAAA,CAAE,OAAO;QACnB,IAAI,KAAK,EAAE,MAAM,CAAE,IAAI,EAAE,KAAK,CAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;YACzD,qFAAqF;YACrF,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACnC,SAAS;aACV;YACD,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,CAAC;SACtB;IACH,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,GAAW;QAC3B,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvD,OAAO,IAAA,kBAAO,EAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,IAAY;QAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;QACvE,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;CACF;AAxDD,kDAwDC","sourcesContent":["import { ensureTrailingSlash, joinUrl } from '../../util/PathUtil';\nimport type { KeyValueStorage } from './KeyValueStorage';\n\n/**\n * Transforms the keys into relative paths, to be used by the source storage.\n * Encodes the input key with base64 encoding,\n * to make sure there are no invalid or special path characters,\n * and prepends it with the stored relative path.\n * This can be useful to eventually generate URLs in specific containers\n * without having to worry about cleaning the input keys.\n */\nexport class EncodingPathStorage<T> implements KeyValueStorage<string, T> {\n  private readonly basePath: string;\n  private readonly source: KeyValueStorage<string, T>;\n\n  public constructor(relativePath: string, source: KeyValueStorage<string, T>) {\n    this.source = source;\n    this.basePath = ensureTrailingSlash(relativePath);\n  }\n\n  public async get(key: string): Promise<T | undefined> {\n    const path = this.keyToPath(key);\n    return this.source.get(path);\n  }\n\n  public async has(key: string): Promise<boolean> {\n    const path = this.keyToPath(key);\n    return this.source.has(path);\n  }\n\n  public async set(key: string, value: T): Promise<this> {\n    const path = this.keyToPath(key);\n    await this.source.set(path, value);\n    return this;\n  }\n\n  public async delete(key: string): Promise<boolean> {\n    const path = this.keyToPath(key);\n    return this.source.delete(path);\n  }\n\n  public async* entries(): AsyncIterableIterator<[string, T]> {\n    for await (const [ path, value ] of this.source.entries()) {\n      // The only relevant entries for this storage are those that start with the base path\n      if (!path.startsWith(this.basePath)) {\n        continue;\n      }\n      const key = this.pathToKey(path);\n      yield [ key, value ];\n    }\n  }\n\n  /**\n   * Converts a key into a path for internal storage.\n   */\n  private keyToPath(key: string): string {\n    const encodedKey = Buffer.from(key).toString('base64');\n    return joinUrl(this.basePath, encodedKey);\n  }\n\n  /**\n   * Converts an internal storage path string into the original path key.\n   */\n  private pathToKey(path: string): string {\n    const buffer = Buffer.from(path.slice(this.basePath.length), 'base64');\n    return buffer.toString('utf-8');\n  }\n}\n"]}