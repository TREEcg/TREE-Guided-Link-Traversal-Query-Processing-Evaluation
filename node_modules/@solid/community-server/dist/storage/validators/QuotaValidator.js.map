{"version":3,"file":"QuotaValidator.js","sourceRoot":"","sources":["../../../src/storage/validators/QuotaValidator.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAC/C,8DAA2D;AAG3D,yEAAsE;AAEtE,4DAAuD;AACvD,sDAAmD;AAGnD;;GAEG;AACH,MAAa,cAAe,SAAQ,qBAAS;IAG3C,YAAmB,QAAuB;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,UAAU,EAAkB;QAChE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,cAAc,CAAC;QAE1C,4BAA4B;QAC5B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAExE,mEAAmE;QACnE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAEjE,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE;YAChE,OAAO;gBACL,GAAG,cAAc;gBACjB,IAAI,EAAE,IAAA,2BAAW,EAAC,IAAI,iBAAQ,CAAC;oBAC7B,IAAI;wBACF,IAAI,CAAC,OAAO,CAAC,IAAI,mCAAgB,CAC/B,gDAAgD,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,IAAI,GAAG;4BAC7F,YAAY,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,IAAI,eAAe,CACtE,CAAC,CAAC;oBACL,CAAC;iBACF,CAAC,CAAC;aACJ,CAAC;SACH;QAED,+CAA+C;QAC/C,MAAM,QAAQ,GAAyB,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAExF,kFAAkF;QAClF,MAAM,UAAU,GAAG,IAAI,oBAAW,CAAC;YACjC,KAAK,EAAE,KAAK,EAAC,IAAI,EAAiB,EAAE;gBAClC,MAAM,cAAc,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;gBAClF,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAgB,CAAC,sCAAsC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtG,CAAC;SACF,CAAC,CAAC;QAEH,OAAO;YACL,GAAG,cAAc;YACjB,IAAI,EAAE,IAAA,uBAAU,EAAC,IAAA,uBAAU,EAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,UAAU,CAAC;SACzD,CAAC;IACJ,CAAC;CACF;AA/CD,wCA+CC","sourcesContent":["import { Readable, PassThrough } from 'stream';\nimport { Validator } from '../../http/auxiliary/Validator';\nimport type { ValidatorInput } from '../../http/auxiliary/Validator';\nimport type { Representation } from '../../http/representation/Representation';\nimport { PayloadHttpError } from '../../util/errors/PayloadHttpError';\nimport type { Guarded } from '../../util/GuardedStream';\nimport { guardStream } from '../../util/GuardedStream';\nimport { pipeSafely } from '../../util/StreamUtil';\nimport type { QuotaStrategy } from '../quota/QuotaStrategy';\n\n/**\n * The QuotaValidator validates data streams by making sure they would not exceed the limits of a QuotaStrategy.\n */\nexport class QuotaValidator extends Validator {\n  private readonly strategy: QuotaStrategy;\n\n  public constructor(strategy: QuotaStrategy) {\n    super();\n    this.strategy = strategy;\n  }\n\n  public async handle({ representation, identifier }: ValidatorInput): Promise<Representation> {\n    const { data, metadata } = representation;\n\n    // 1. Get the available size\n    const availableSize = await this.strategy.getAvailableSpace(identifier);\n\n    // 2. Check if the estimated size is bigger then the available size\n    const estimatedSize = await this.strategy.estimateSize(metadata);\n\n    if (estimatedSize && availableSize.amount < estimatedSize.amount) {\n      return {\n        ...representation,\n        data: guardStream(new Readable({\n          read(this): void {\n            this.destroy(new PayloadHttpError(\n              `Quota exceeded: Advertised Content-Length is ${estimatedSize.amount} ${estimatedSize.unit} ` +\n              `and only ${availableSize.amount} ${availableSize.unit} is available`,\n            ));\n          },\n        })),\n      };\n    }\n\n    // 3. Track if quota is exceeded during writing\n    const tracking: Guarded<PassThrough> = await this.strategy.createQuotaGuard(identifier);\n\n    // 4. Double check quota is not exceeded after write (concurrent writing possible)\n    const afterWrite = new PassThrough({\n      flush: async(done): Promise<void> => {\n        const availableSpace = (await this.strategy.getAvailableSpace(identifier)).amount;\n        done(availableSpace < 0 ? new PayloadHttpError('Quota exceeded after write completed') : undefined);\n      },\n    });\n\n    return {\n      ...representation,\n      data: pipeSafely(pipeSafely(data, tracking), afterWrite),\n    };\n  }\n}\n"]}