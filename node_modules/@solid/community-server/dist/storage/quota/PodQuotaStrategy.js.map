{"version":3,"file":"PodQuotaStrategy.js","sourceRoot":"","sources":["../../../src/storage/quota/PodQuotaStrategy.ts"],"names":[],"mappings":";;;AAEA,2EAAwE;AAExE,0DAAmD;AAInD,mDAAgD;AAEhD;;GAEG;AACH,MAAa,gBAAiB,SAAQ,6BAAa;IAIjD,YACE,KAAW,EACX,QAA2B,EAC3B,kBAAsC,EACtC,QAAsB;QAEtB,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAES,KAAK,CAAC,iBAAiB,CAAC,UAA8B;QAC9D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAE3D,gHAAgH;QAChH,gEAAgE;QAChE,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,0EAA0E;IAClE,KAAK,CAAC,gBAAgB,CAAC,UAA8B;QAC3D,IAAI,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE;YACvD,OAAO;SACR;QAED,IAAI,QAAgC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAEtE,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SACxD;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,KAAK,YAAY,qCAAiB,EAAE;gBACtC,4CAA4C;gBAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;aACtC;YACD,MAAM,KAAK,CAAC;SACb;QAED,MAAM,qBAAqB,GAAG,QAAS,CAAC,MAAM,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,CAAC;aAC3D,IAAI,CAAC,CAAC,IAAI,EAAW,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,kBAAG,CAAC,OAAO,CAAC,CAAC;QAEvD,OAAO,qBAAqB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC5E,CAAC;CACF;AAnDD,4CAmDC","sourcesContent":["import type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport type { IdentifierStrategy } from '../../util/identifiers/IdentifierStrategy';\nimport { RDF, PIM } from '../../util/Vocabularies';\nimport type { DataAccessor } from '../accessors/DataAccessor';\nimport type { Size } from '../size-reporter/Size';\nimport type { SizeReporter } from '../size-reporter/SizeReporter';\nimport { QuotaStrategy } from './QuotaStrategy';\n\n/**\n * The PodQuotaStrategy sets a limit on the amount of data stored on a per pod basis\n */\nexport class PodQuotaStrategy extends QuotaStrategy {\n  private readonly identifierStrategy: IdentifierStrategy;\n  private readonly accessor: DataAccessor;\n\n  public constructor(\n    limit: Size,\n    reporter: SizeReporter<any>,\n    identifierStrategy: IdentifierStrategy,\n    accessor: DataAccessor,\n  ) {\n    super(reporter, limit);\n    this.identifierStrategy = identifierStrategy;\n    this.accessor = accessor;\n  }\n\n  protected async getTotalSpaceUsed(identifier: ResourceIdentifier): Promise<Size> {\n    const pimStorage = await this.searchPimStorage(identifier);\n\n    // No storage was found containing this identifier, so we assume this identifier points to an internal location.\n    // Quota does not apply here so there is always available space.\n    if (!pimStorage) {\n      return { amount: Number.MAX_SAFE_INTEGER, unit: this.limit.unit };\n    }\n\n    return this.reporter.getSize(pimStorage);\n  }\n\n  /** Finds the closest parent container that has pim:storage as metadata */\n  private async searchPimStorage(identifier: ResourceIdentifier): Promise<ResourceIdentifier | undefined> {\n    if (this.identifierStrategy.isRootContainer(identifier)) {\n      return;\n    }\n\n    let metadata: RepresentationMetadata;\n    const parent = this.identifierStrategy.getParentContainer(identifier);\n\n    try {\n      metadata = await this.accessor.getMetadata(identifier);\n    } catch (error: unknown) {\n      if (error instanceof NotFoundHttpError) {\n        // Resource and/or its metadata do not exist\n        return this.searchPimStorage(parent);\n      }\n      throw error;\n    }\n\n    const hasPimStorageMetadata = metadata!.getAll(RDF.terms.type)\n      .some((term): boolean => term.value === PIM.Storage);\n\n    return hasPimStorageMetadata ? identifier : this.searchPimStorage(parent);\n  }\n}\n\n"]}