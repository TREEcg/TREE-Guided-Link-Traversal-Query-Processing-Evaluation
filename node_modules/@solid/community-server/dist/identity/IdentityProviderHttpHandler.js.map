{"version":3,"file":"IdentityProviderHttpHandler.js","sourceRoot":"","sources":["../../src/identity/IdentityProviderHttpHandler.ts"],"names":[],"mappings":";;;AAAA,yFAAsF;AAEtF,gDAAkD;AAElD,yEAAsE;AAEtE,uDAAwD;AAsBxD;;;;;;;GAOG;AACH,MAAa,2BAA4B,SAAQ,2CAAoB;IAOnE,YAAmB,IAAqC;QACtD,KAAK,EAAE,CAAC;QAPS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAQ7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAA6B;QAC7E,oDAAoD;QACpD,IAAI,eAAwC,CAAC;QAC7C,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YAC1D,eAAe,GAAG,MAAM,QAAQ,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACvE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAAC,MAAM;YACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAED,6BAA6B;QAC7B,uCAAuC;QACvC,MAAM,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;QAChD,IAAI,WAAW,IAAI,WAAW,KAAK,+BAAgB,EAAE;YACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,WAAW,OAAO,+BAAgB,EAAE,CAAC,CAAC;YAC5E,MAAM,IAAI,GAAG;gBACX,cAAc,EAAE,SAAS,CAAC,IAAI;gBAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,+BAAgB,CAAC,EAAE,CAAC,EAAE,EAAC;gBAC/C,UAAU,EAAE,SAAS,CAAC,MAAM;aAC7B,CAAC;YACF,SAAS,GAAG;gBACV,GAAG,SAAS;gBACZ,IAAI,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC;aAC5C,CAAC;SACH;QAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;QACrF,OAAO,IAAI,6CAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC;CACF;AA5CD,kEA4CC","sourcesContent":["import { OkResponseDescription } from '../http/output/response/OkResponseDescription';\nimport type { ResponseDescription } from '../http/output/response/ResponseDescription';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';\nimport { OperationHttpHandler } from '../server/OperationHttpHandler';\nimport type { RepresentationConverter } from '../storage/conversion/RepresentationConverter';\nimport { APPLICATION_JSON } from '../util/ContentTypes';\nimport type { ProviderFactory } from './configuration/ProviderFactory';\nimport type {\n  InteractionHandler,\n  Interaction,\n} from './interaction/InteractionHandler';\n\nexport interface IdentityProviderHttpHandlerArgs {\n  /**\n   * Used to generate the OIDC provider.\n   */\n  providerFactory: ProviderFactory;\n  /**\n   * Used for converting the input data.\n   */\n  converter: RepresentationConverter;\n  /**\n   * Handles the requests.\n   */\n  handler: InteractionHandler;\n}\n\n/**\n * Generates the active Interaction object if there is an ongoing OIDC interaction\n * and sends it to the {@link InteractionHandler}.\n *\n * Input data will first be converted to JSON.\n *\n * Only GET and POST methods are accepted.\n */\nexport class IdentityProviderHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly providerFactory: ProviderFactory;\n  private readonly converter: RepresentationConverter;\n  private readonly handler: InteractionHandler;\n\n  public constructor(args: IdentityProviderHttpHandlerArgs) {\n    super();\n    this.providerFactory = args.providerFactory;\n    this.converter = args.converter;\n    this.handler = args.handler;\n  }\n\n  public async handle({ operation, request, response }: OperationHttpHandlerInput): Promise<ResponseDescription> {\n    // This being defined means we're in an OIDC session\n    let oidcInteraction: Interaction | undefined;\n    try {\n      const provider = await this.providerFactory.getProvider();\n      oidcInteraction = await provider.interactionDetails(request, response);\n      this.logger.debug('Found an active OIDC interaction.');\n    } catch {\n      this.logger.debug('No active OIDC interaction found.');\n    }\n\n    // Convert input data to JSON\n    // Allows us to still support form data\n    const { contentType } = operation.body.metadata;\n    if (contentType && contentType !== APPLICATION_JSON) {\n      this.logger.debug(`Converting input ${contentType} to ${APPLICATION_JSON}`);\n      const args = {\n        representation: operation.body,\n        preferences: { type: { [APPLICATION_JSON]: 1 }},\n        identifier: operation.target,\n      };\n      operation = {\n        ...operation,\n        body: await this.converter.handleSafe(args),\n      };\n    }\n\n    const representation = await this.handler.handleSafe({ operation, oidcInteraction });\n    return new OkResponseDescription(representation.metadata, representation.data);\n  }\n}\n"]}