import type { Representation } from '../../http/representation/Representation';
import type { ProviderFactory } from '../configuration/ProviderFactory';
import { BaseInteractionHandler } from './BaseInteractionHandler';
import type { InteractionHandlerInput } from './InteractionHandler';
/**
 * Handles the OIDC consent prompts where the user confirms they want to log in for the given client.
 *
 * Returns all the relevant Client metadata on GET requests.
 */
export declare class ConsentHandler extends BaseInteractionHandler {
    private readonly providerFactory;
    constructor(providerFactory: ProviderFactory);
    canHandle(input: InteractionHandlerInput): Promise<void>;
    protected handleGet(input: Required<InteractionHandlerInput>): Promise<Representation>;
    protected handlePost({ operation, oidcInteraction }: InteractionHandlerInput): Promise<never>;
    /**
     * Either returns the grant associated with the given interaction or creates a new one if it does not exist yet.
     */
    private getGrant;
    /**
     * Updates the grant with all the missing scopes and claims requested by the interaction.
     *
     * Will reject the `offline_access` scope if `remember` is false.
     */
    private updateGrant;
    /**
     * Updates the interaction with the new grant and returns the resulting redirect URL.
     */
    private updateInteraction;
}
