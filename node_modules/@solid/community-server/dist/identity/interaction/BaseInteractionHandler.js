"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseInteractionHandler = void 0;
const BasicRepresentation_1 = require("../../http/representation/BasicRepresentation");
const ContentTypes_1 = require("../../util/ContentTypes");
const MethodNotAllowedHttpError_1 = require("../../util/errors/MethodNotAllowedHttpError");
const InteractionHandler_1 = require("./InteractionHandler");
/**
 * Abstract implementation for handlers that always return a fixed JSON view on a GET.
 * POST requests are passed to an abstract function.
 * Other methods will be rejected.
 */
class BaseInteractionHandler extends InteractionHandler_1.InteractionHandler {
    constructor(view) {
        super();
        this.view = JSON.stringify(view);
    }
    async canHandle(input) {
        await super.canHandle(input);
        const { method } = input.operation;
        if (method !== 'GET' && method !== 'POST') {
            throw new MethodNotAllowedHttpError_1.MethodNotAllowedHttpError([method], 'Only GET/POST requests are supported.');
        }
    }
    async handle(input) {
        switch (input.operation.method) {
            case 'GET': return this.handleGet(input);
            case 'POST': return this.handlePost(input);
            default: throw new MethodNotAllowedHttpError_1.MethodNotAllowedHttpError([input.operation.method]);
        }
    }
    /**
     * Returns a fixed JSON view.
     * @param input - Input parameters, only the operation target is used.
     */
    async handleGet(input) {
        return new BasicRepresentation_1.BasicRepresentation(this.view, input.operation.target, ContentTypes_1.APPLICATION_JSON);
    }
}
exports.BaseInteractionHandler = BaseInteractionHandler;
//# sourceMappingURL=BaseInteractionHandler.js.map