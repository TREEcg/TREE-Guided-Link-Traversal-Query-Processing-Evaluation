{"version":3,"file":"HtmlViewHandler.js","sourceRoot":"","sources":["../../../src/identity/interaction/HtmlViewHandler.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,4EAA0F;AAC1F,0DAAsE;AACtE,2FAAwF;AACxF,2EAAwE;AACxE,uFAAoF;AAGpF,6DAA0D;AAG1D;;;;;;;;;;;GAWG;AACH,MAAa,eAAgB,SAAQ,uCAAkB;IAKrD,YAAmB,KAAuB,EAAE,cAA8B,EACxE,SAA2C;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CACjC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,QAAQ,EAAE,KAAK,CAAE,EAAsB,EAAE,CAAC,CAAE,KAAK,CAAC,OAAO,EAAE,EAAE,QAAQ,CAAE,CAAC,CAC1G,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAA2B;QAC3D,IAAI,SAAS,CAAC,MAAM,KAAK,KAAK,EAAE;YAC9B,MAAM,IAAI,qDAAyB,CAAC,CAAE,SAAS,CAAC,MAAM,CAAE,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC1C,MAAM,IAAI,qCAAiB,EAAE,CAAC;SAC/B;QACD,MAAM,WAAW,GAAG,IAAA,iCAAgB,EAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,IAAA,8BAAa,EAAC,wBAAS,EAAE,WAAW,CAAC,CAAC;QACzD,MAAM,UAAU,GAAG,IAAA,8BAAa,EAAC,+BAAgB,EAAE,WAAW,CAAC,CAAC;QAChE,IAAI,UAAU,IAAI,UAAU,EAAE;YAC5B,MAAM,IAAI,iDAAuB,CAAC,uDAAuD,CAAC,CAAC;SAC5F;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,eAAe,EAA2B;QACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;QACvF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;QACtF,OAAO,IAAI,yCAAmB,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,wBAAS,CAAC,CAAC;IACtE,CAAC;CACF;AApCD,0CAoCC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { cleanPreferences, getTypeWeight } from '../../storage/conversion/ConversionUtil';\nimport { APPLICATION_JSON, TEXT_HTML } from '../../util/ContentTypes';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport type { TemplateEngine } from '../../util/templates/TemplateEngine';\nimport type { InteractionHandlerInput } from './InteractionHandler';\nimport { InteractionHandler } from './InteractionHandler';\nimport type { InteractionRoute } from './routing/InteractionRoute';\n\n/**\n * Stores the HTML templates associated with specific InteractionRoutes.\n * Template keys should be file paths to the templates,\n * values should be the corresponding routes.\n *\n * Will only handle GET operations for which there is a matching template if HTML is more preferred than JSON.\n * Reason for doing it like this instead of a standard content negotiation flow\n * is because we only want to return the HTML pages on GET requests. *\n *\n * Templates will receive the parameter `idpIndex` in their context pointing to the root index URL of the IDP API\n * and an `authenticating` parameter indicating if this is an active OIDC interaction.\n */\nexport class HtmlViewHandler extends InteractionHandler {\n  private readonly idpIndex: string;\n  private readonly templateEngine: TemplateEngine;\n  private readonly templates: Record<string, string>;\n\n  public constructor(index: InteractionRoute, templateEngine: TemplateEngine,\n    templates: Record<string, InteractionRoute>) {\n    super();\n    this.idpIndex = index.getPath();\n    this.templateEngine = templateEngine;\n    this.templates = Object.fromEntries(\n      Object.entries(templates).map(([ template, route ]): [ string, string ] => [ route.getPath(), template ]),\n    );\n  }\n\n  public async canHandle({ operation }: InteractionHandlerInput): Promise<void> {\n    if (operation.method !== 'GET') {\n      throw new MethodNotAllowedHttpError([ operation.method ]);\n    }\n    if (!this.templates[operation.target.path]) {\n      throw new NotFoundHttpError();\n    }\n    const preferences = cleanPreferences(operation.preferences.type);\n    const htmlWeight = getTypeWeight(TEXT_HTML, preferences);\n    const jsonWeight = getTypeWeight(APPLICATION_JSON, preferences);\n    if (jsonWeight >= htmlWeight) {\n      throw new NotImplementedHttpError('HTML views are only returned when they are preferred.');\n    }\n  }\n\n  public async handle({ operation, oidcInteraction }: InteractionHandlerInput): Promise<Representation> {\n    const template = this.templates[operation.target.path];\n    const contents = { idpIndex: this.idpIndex, authenticating: Boolean(oidcInteraction) };\n    const result = await this.templateEngine.render(contents, { templateFile: template });\n    return new BasicRepresentation(result, operation.target, TEXT_HTML);\n  }\n}\n"]}