{"version":3,"file":"ConsentHandler.js","sourceRoot":"","sources":["../../../src/identity/interaction/ConsentHandler.ts"],"names":[],"mappings":";;;AAMA,uFAAoF;AAEpF,0DAA2D;AAC3D,+EAA4E;AAC5E,qEAAkE;AAClE,uFAAoF;AACpF,sDAAuD;AAEvD,qEAAkE;AAKlE;;;;GAIG;AACH,MAAa,cAAe,SAAQ,+CAAsB;IAGxD,YAAmB,eAAgC;QACjD,KAAK,CAAC,EAAE,CAAC,CAAC;QACV,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA8B;QACnD,MAAM,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;YAC/D,MAAM,IAAI,yCAAmB,CAC3B,2EAA2E,EAC3E,EAAE,SAAS,EAAE,OAAO,EAAE,CACvB,CAAC;SACH;IACH,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,KAAwC;QAChE,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC;QAC7C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAC1D,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAmB,CAAC,CAAC;QACtF,MAAM,QAAQ,GAAsB,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAE7D,8DAA8D;QAC9D,2DAA2D;QAC3D,MAAM,IAAI,GAAG,CAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,YAAY;YAChE,aAAa,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,CAAE,CAAC;QAEtD,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAW,EAAE,CAAC,GAAG,IAAI,QAAQ,CAAC;aAC3C,GAAG,CAAC,CAAC,GAAG,EAAuB,EAAE,CAAC,CAAE,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAE,CAAC,CAC7D,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,GAAG,iDAAiD,CAAC;QACvE,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QAE3E,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IAC3F,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,eAAe,EAA2B;QAChF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvE,IAAI,MAAM,EAAE;YACV,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YAC1D,MAAM,OAAO,GAAG,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,eAAgB,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAE,CAAC;YACjF,OAAO,OAAO,CAAC,SAAS,CAAC;YACzB,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAEhE,MAAM,IAAI,+BAAc,CAAC,eAAgB,CAAC,QAAQ,CAAC,CAAC;SACrD;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAgB,CAAC,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,eAAgB,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAgB,EAAE,KAAK,CAAC,CAAC;QAEvE,MAAM,IAAI,+BAAc,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,QAAQ,CAAC,eAA4B;QACjD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;YAC5B,MAAM,IAAI,iDAAuB,CAAC,uDAAuD,CAAC,CAAC;SAC5F;QAED,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC;QACpE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,KAAY,CAAC;QACjB,IAAI,OAAO,EAAE;YACX,KAAK,GAAG,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAE,CAAC;SAC/C;aAAM;YACL,KAAK,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC;gBACzB,SAAS;gBACT,QAAQ,EAAE,MAAM,CAAC,SAAmB;aACrC,CAAC,CAAC;SACJ;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACK,WAAW,CAAC,KAAY,EAAE,OAAsB,EAAE,QAAiB;QACzE,6EAA6E;QAC7E,IAAI,CAAC,QAAQ,EAAE;YACb,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;SACzC;QAED,4CAA4C;QAC5C,IAAI,OAAO,CAAC,gBAAgB,EAAE;YAC5B,KAAK,CAAC,YAAY,CAAE,OAAO,CAAC,gBAA6B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACtE;QACD,IAAI,OAAO,CAAC,iBAAiB,EAAE;YAC7B,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,iBAA6B,CAAC,CAAC;SAC5D;QACD,IAAI,OAAO,CAAC,qBAAqB,EAAE;YACjC,KAAK,MAAM,CAAE,SAAS,EAAE,MAAM,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAiD,CAAC,EAAE;gBAC7G,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACrD;SACF;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,eAA4B,EAAE,KAAY;QACxE,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;QAEnC,MAAM,OAAO,GAAkC,EAAE,CAAC;QAClD,+CAA+C;QAC/C,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;YAC5B,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;SAC3B;QAED,MAAM,MAAM,GAAuB,EAAE,OAAO,EAAE,CAAC;QAE/C,yCAAyC;QACzC,eAAe,CAAC,MAAM,GAAG,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,GAAG,MAAM,EAAE,CAAC;QAC1E,MAAM,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAEhF,OAAO,eAAe,CAAC,QAAQ,CAAC;IAClC,CAAC;CACF;AA9HD,wCA8HC","sourcesContent":["import type {\n  AllClientMetadata,\n  InteractionResults,\n  KoaContextWithOIDC,\n  UnknownObject,\n} from 'oidc-provider';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { APPLICATION_JSON } from '../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { FoundHttpError } from '../../util/errors/FoundHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { readJsonStream } from '../../util/StreamUtil';\nimport type { ProviderFactory } from '../configuration/ProviderFactory';\nimport { BaseInteractionHandler } from './BaseInteractionHandler';\nimport type { Interaction, InteractionHandlerInput } from './InteractionHandler';\n\ntype Grant = NonNullable<KoaContextWithOIDC['oidc']['entities']['Grant']>;\n\n/**\n * Handles the OIDC consent prompts where the user confirms they want to log in for the given client.\n *\n * Returns all the relevant Client metadata on GET requests.\n */\nexport class ConsentHandler extends BaseInteractionHandler {\n  private readonly providerFactory: ProviderFactory;\n\n  public constructor(providerFactory: ProviderFactory) {\n    super({});\n    this.providerFactory = providerFactory;\n  }\n\n  public async canHandle(input: InteractionHandlerInput): Promise<void> {\n    await super.canHandle(input);\n    if (input.operation.method === 'POST' && !input.oidcInteraction) {\n      throw new BadRequestHttpError(\n        'This action can only be performed as part of an OIDC authentication flow.',\n        { errorCode: 'E0002' },\n      );\n    }\n  }\n\n  protected async handleGet(input: Required<InteractionHandlerInput>): Promise<Representation> {\n    const { operation, oidcInteraction } = input;\n    const provider = await this.providerFactory.getProvider();\n    const client = await provider.Client.find(oidcInteraction.params.client_id as string);\n    const metadata: AllClientMetadata = client?.metadata() ?? {};\n\n    // Only extract specific fields to prevent leaking information\n    // Based on https://www.w3.org/ns/solid/oidc-context.jsonld\n    const keys = [ 'client_id', 'client_uri', 'logo_uri', 'policy_uri',\n      'client_name', 'contacts', 'grant_types', 'scope' ];\n\n    const jsonLd = Object.fromEntries(\n      keys.filter((key): boolean => key in metadata)\n        .map((key): [ string, unknown ] => [ key, metadata[key] ]),\n    );\n    jsonLd['@context'] = 'https://www.w3.org/ns/solid/oidc-context.jsonld';\n    const json = { webId: oidcInteraction.session?.accountId, client: jsonLd };\n\n    return new BasicRepresentation(JSON.stringify(json), operation.target, APPLICATION_JSON);\n  }\n\n  protected async handlePost({ operation, oidcInteraction }: InteractionHandlerInput): Promise<never> {\n    const { remember, logOut } = await readJsonStream(operation.body.data);\n\n    if (logOut) {\n      const provider = await this.providerFactory.getProvider();\n      const session = (await provider.Session.find(oidcInteraction!.session!.cookie))!;\n      delete session.accountId;\n      await session.save(session.exp - Math.floor(Date.now() / 1000));\n\n      throw new FoundHttpError(oidcInteraction!.returnTo);\n    }\n\n    const grant = await this.getGrant(oidcInteraction!);\n    this.updateGrant(grant, oidcInteraction!.prompt.details, remember);\n\n    const location = await this.updateInteraction(oidcInteraction!, grant);\n\n    throw new FoundHttpError(location);\n  }\n\n  /**\n   * Either returns the grant associated with the given interaction or creates a new one if it does not exist yet.\n   */\n  private async getGrant(oidcInteraction: Interaction): Promise<Grant> {\n    if (!oidcInteraction.session) {\n      throw new NotImplementedHttpError('Only interactions with a valid session are supported.');\n    }\n\n    const { params, session: { accountId }, grantId } = oidcInteraction;\n    const provider = await this.providerFactory.getProvider();\n    let grant: Grant;\n    if (grantId) {\n      grant = (await provider.Grant.find(grantId))!;\n    } else {\n      grant = new provider.Grant({\n        accountId,\n        clientId: params.client_id as string,\n      });\n    }\n    return grant;\n  }\n\n  /**\n   * Updates the grant with all the missing scopes and claims requested by the interaction.\n   *\n   * Will reject the `offline_access` scope if `remember` is false.\n   */\n  private updateGrant(grant: Grant, details: UnknownObject, remember: boolean): void {\n    // Reject the offline_access scope if the user does not want to be remembered\n    if (!remember) {\n      grant.rejectOIDCScope('offline_access');\n    }\n\n    // Grant all the requested scopes and claims\n    if (details.missingOIDCScope) {\n      grant.addOIDCScope((details.missingOIDCScope as string[]).join(' '));\n    }\n    if (details.missingOIDCClaims) {\n      grant.addOIDCClaims(details.missingOIDCClaims as string[]);\n    }\n    if (details.missingResourceScopes) {\n      for (const [ indicator, scopes ] of Object.entries(details.missingResourceScopes as Record<string, string[]>)) {\n        grant.addResourceScope(indicator, scopes.join(' '));\n      }\n    }\n  }\n\n  /**\n   * Updates the interaction with the new grant and returns the resulting redirect URL.\n   */\n  private async updateInteraction(oidcInteraction: Interaction, grant: Grant): Promise<string> {\n    const grantId = await grant.save();\n\n    const consent: InteractionResults['consent'] = {};\n    // Only need to update the grantId if it is new\n    if (!oidcInteraction.grantId) {\n      consent.grantId = grantId;\n    }\n\n    const result: InteractionResults = { consent };\n\n    // Need to merge with previous submission\n    oidcInteraction.result = { ...oidcInteraction.lastSubmission, ...result };\n    await oidcInteraction.save(oidcInteraction.exp - Math.floor(Date.now() / 1000));\n\n    return oidcInteraction.returnTo;\n  }\n}\n"]}