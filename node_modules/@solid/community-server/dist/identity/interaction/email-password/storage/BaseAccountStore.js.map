{"version":3,"file":"BaseAccountStore.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/storage/BaseAccountStore.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,uCAAyC;AACzC,+BAA0B;AA0B1B;;;;;;GAMG;AACH,MAAa,gBAAgB;IAM3B,YAAmB,OAAmD,EACpE,qBAAiE,EACjE,UAAkB,EAClB,wBAAwB,GAAG,EAAE;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,GAAG,EAAE,GAAG,IAAI,CAAC;QACrE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,4BAA4B,CAAC,KAAa;QAChD,OAAO,WAAW,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,yCAAyC,CAAC,QAAgB;QAChE,OAAO,uCAAuC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC/E,CAAC;IAaO,KAAK,CAAC,iBAAiB,CAAC,KAAa,EAAE,cAAuB;QAEpE,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAA+B,CAAC;QAC1E,IAAA,gBAAM,EAAC,CAAC,cAAc,IAAI,OAAO,EAAE,wBAAwB,CAAC,CAAC;QAC7D,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;IAC1B,CAAC;IACD,+CAA+C;IAExC,KAAK,CAAC,YAAY,CAAC,KAAa,EAAE,QAAgB;QACvD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAA,gBAAM,EAAC,OAAO,CAAC,QAAQ,EAAE,oCAAoC,CAAC,CAAC;QAC/D,IAAA,gBAAM,EAAC,MAAM,IAAA,kBAAO,EAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACxE,OAAO,OAAO,CAAC,KAAK,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAa,EAAE,KAAa,EAAE,QAAgB,EAAE,QAAyB;QAC3F,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpE,IAAA,gBAAM,EAAC,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;QAC3C,qDAAqD;QACrD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrD,IAAA,gBAAM,EAAC,CAAC,cAAc,EAAE,4CAA4C,CAAC,CAAC;QACtE,MAAM,OAAO,GAAmB;YAC9B,KAAK;YACL,QAAQ,EAAE,MAAM,IAAA,eAAI,EAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC/C,QAAQ,EAAE,KAAK;YACf,KAAK;SACN,CAAC;QACF,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACrC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAa;QAC/B,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACnE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;QACxB,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,KAAa,EAAE,QAAgB;QACzD,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACnE,OAAO,CAAC,QAAQ,GAAG,MAAM,IAAA,eAAI,EAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,KAAa;QACpC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAgC,CAAC;QAC9E,IAAA,gBAAM,EAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QAC3C,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,KAAa,EAAE,QAAyB;QAClE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClD,IAAA,gBAAM,EAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;QAC9C,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,KAAa;QACtC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpE,IAAI,OAAO,EAAE;YACX,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/B,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC1C;IACH,CAAC;IAEM,KAAK,CAAC,4BAA4B,CAAC,KAAa;QACrD,MAAM,QAAQ,GAAG,IAAA,SAAE,GAAE,CAAC;QACtB,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAClC,IAAI,CAAC,yCAAyC,CAAC,QAAQ,CAAC,EACxD,EAAE,QAAQ,EAAE,KAAK,EAAE,EACnB,IAAI,CAAC,wBAAwB,CAC9B,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,QAAgB;QACnD,MAAM,UAAU,GAAG,IAAI,CAAC,yCAAyC,CAAC,QAAQ,CAAC,CAAC;QAC5E,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAsC,CAAC;QACnH,OAAO,oBAAoB,EAAE,KAAK,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,0BAA0B,CAAC,QAAgB;QACtD,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpG,CAAC;CACF;AA7HD,4CA6HC","sourcesContent":["import assert from 'assert';\nimport { hash, compare } from 'bcryptjs';\nimport { v4 } from 'uuid';\nimport type { ExpiringStorage } from '../../../../storage/keyvalue/ExpiringStorage';\nimport type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';\nimport type { AccountSettings, AccountStore } from './AccountStore';\n\n/**\n * A payload to persist a user account\n */\nexport interface AccountPayload {\n  webId: string;\n  email: string;\n  password: string;\n  verified: boolean;\n}\n\n/**\n * A payload to persist the fact that a user\n * has requested to reset their password\n */\nexport interface ForgotPasswordPayload {\n  email: string;\n  recordId: string;\n}\n\nexport type EmailPasswordData = AccountPayload | ForgotPasswordPayload | AccountSettings;\n\n/**\n * A EmailPasswordStore that uses a KeyValueStorage to persist its information and an\n * ExpiringStorage to persist ForgotPassword records.\n *\n * `forgotPasswordExpiration` parameter is how long the ForgotPassword record should be\n *   stored in minutes. *(defaults to 15 minutes)*\n */\nexport class BaseAccountStore implements AccountStore {\n  private readonly storage: KeyValueStorage<string, EmailPasswordData>;\n  private readonly forgotPasswordStorage: ExpiringStorage<string, EmailPasswordData>;\n  private readonly saltRounds: number;\n  private readonly forgotPasswordExpiration: number;\n\n  public constructor(storage: KeyValueStorage<string, EmailPasswordData>,\n    forgotPasswordStorage: ExpiringStorage<string, EmailPasswordData>,\n    saltRounds: number,\n    forgotPasswordExpiration = 15) {\n    this.storage = storage;\n    this.forgotPasswordStorage = forgotPasswordStorage;\n    this.forgotPasswordExpiration = forgotPasswordExpiration * 60 * 1000;\n    this.saltRounds = saltRounds;\n  }\n\n  /**\n   * Generates a ResourceIdentifier to store data for the given email.\n   */\n  private getAccountResourceIdentifier(email: string): string {\n    return `account/${encodeURIComponent(email)}`;\n  }\n\n  /**\n   * Generates a ResourceIdentifier to store data for the given recordId.\n   */\n  private getForgotPasswordRecordResourceIdentifier(recordId: string): string {\n    return `forgot-password-resource-identifier/${encodeURIComponent(recordId)}`;\n  }\n\n  /* eslint-disable lines-between-class-members */\n  /**\n   * Helper function that converts the given e-mail to an account identifier\n   * and retrieves the account data from the internal storage.\n   *\n   * Will error if `checkExistence` is true and the account does not exist.\n   */\n  private async getAccountPayload(email: string, checkExistence: true):\n  Promise<{ key: string; account: AccountPayload }>;\n  private async getAccountPayload(email: string, checkExistence: false):\n  Promise<{ key: string; account?: AccountPayload }>;\n  private async getAccountPayload(email: string, checkExistence: boolean):\n  Promise<{ key: string; account?: AccountPayload }> {\n    const key = this.getAccountResourceIdentifier(email);\n    const account = await this.storage.get(key) as AccountPayload | undefined;\n    assert(!checkExistence || account, 'Account does not exist');\n    return { key, account };\n  }\n  /* eslint-enable lines-between-class-members */\n\n  public async authenticate(email: string, password: string): Promise<string> {\n    const { account } = await this.getAccountPayload(email, true);\n    assert(account.verified, 'Account still needs to be verified');\n    assert(await compare(password, account.password), 'Incorrect password');\n    return account.webId;\n  }\n\n  public async create(email: string, webId: string, password: string, settings: AccountSettings): Promise<void> {\n    const { key, account } = await this.getAccountPayload(email, false);\n    assert(!account, 'Account already exists');\n    // Make sure there is no other account for this WebID\n    const storedSettings = await this.storage.get(webId);\n    assert(!storedSettings, 'There already is an account for this WebID');\n    const payload: AccountPayload = {\n      email,\n      password: await hash(password, this.saltRounds),\n      verified: false,\n      webId,\n    };\n    await this.storage.set(key, payload);\n    await this.storage.set(webId, settings);\n  }\n\n  public async verify(email: string): Promise<void> {\n    const { key, account } = await this.getAccountPayload(email, true);\n    account.verified = true;\n    await this.storage.set(key, account);\n  }\n\n  public async changePassword(email: string, password: string): Promise<void> {\n    const { key, account } = await this.getAccountPayload(email, true);\n    account.password = await hash(password, this.saltRounds);\n    await this.storage.set(key, account);\n  }\n\n  public async getSettings(webId: string): Promise<AccountSettings> {\n    const settings = await this.storage.get(webId) as AccountSettings | undefined;\n    assert(settings, 'Account does not exist');\n    return settings;\n  }\n\n  public async updateSettings(webId: string, settings: AccountSettings): Promise<void> {\n    const oldSettings = await this.storage.get(webId);\n    assert(oldSettings, 'Account does not exist');\n    await this.storage.set(webId, settings);\n  }\n\n  public async deleteAccount(email: string): Promise<void> {\n    const { key, account } = await this.getAccountPayload(email, false);\n    if (account) {\n      await this.storage.delete(key);\n      await this.storage.delete(account.webId);\n    }\n  }\n\n  public async generateForgotPasswordRecord(email: string): Promise<string> {\n    const recordId = v4();\n    await this.getAccountPayload(email, true);\n    await this.forgotPasswordStorage.set(\n      this.getForgotPasswordRecordResourceIdentifier(recordId),\n      { recordId, email },\n      this.forgotPasswordExpiration,\n    );\n    return recordId;\n  }\n\n  public async getForgotPasswordRecord(recordId: string): Promise<string | undefined> {\n    const identifier = this.getForgotPasswordRecordResourceIdentifier(recordId);\n    const forgotPasswordRecord = await this.forgotPasswordStorage.get(identifier) as ForgotPasswordPayload | undefined;\n    return forgotPasswordRecord?.email;\n  }\n\n  public async deleteForgotPasswordRecord(recordId: string): Promise<void> {\n    await this.forgotPasswordStorage.delete(this.getForgotPasswordRecordResourceIdentifier(recordId));\n  }\n}\n"]}