"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistrationHandler = void 0;
const BasicRepresentation_1 = require("../../../../http/representation/BasicRepresentation");
const LogUtil_1 = require("../../../../logging/LogUtil");
const ContentTypes_1 = require("../../../../util/ContentTypes");
const StreamUtil_1 = require("../../../../util/StreamUtil");
const BaseInteractionHandler_1 = require("../../BaseInteractionHandler");
const registrationView = {
    required: {
        email: 'string',
        password: 'string',
        confirmPassword: 'string',
        createWebId: 'boolean',
        register: 'boolean',
        createPod: 'boolean',
        rootPod: 'boolean',
    },
    optional: {
        webId: 'string',
        podName: 'string',
        template: 'string',
    },
};
/**
 * Supports registration based on the `RegistrationManager` behaviour.
 */
class RegistrationHandler extends BaseInteractionHandler_1.BaseInteractionHandler {
    constructor(registrationManager) {
        super(registrationView);
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.registrationManager = registrationManager;
    }
    async handlePost({ operation }) {
        const data = await (0, StreamUtil_1.readJsonStream)(operation.body.data);
        const validated = this.registrationManager.validateInput(data, false);
        const details = await this.registrationManager.register(validated, false);
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify(details), operation.target, ContentTypes_1.APPLICATION_JSON);
    }
}
exports.RegistrationHandler = RegistrationHandler;
//# sourceMappingURL=RegistrationHandler.js.map