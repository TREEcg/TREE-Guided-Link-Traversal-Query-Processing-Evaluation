{"version":3,"file":"LoginHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/LoginHandler.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAG5B,yDAA2D;AAC3D,qFAAkF;AAClF,2EAAwE;AACxE,4DAA6D;AAC7D,yEAAsE;AAItE,MAAM,SAAS,GAAG;IAChB,QAAQ,EAAE;QACR,KAAK,EAAE,QAAQ;QACf,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,SAAS;KACpB;CACO,CAAC;AAQX;;;GAGG;AACH,MAAa,YAAa,SAAQ,+CAAsB;IAKtD,YAAmB,YAA0B;QAC3C,KAAK,CAAC,SAAS,CAAC,CAAC;QALA,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA8B;QACnD,MAAM,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;YAC/D,MAAM,IAAI,yCAAmB,CAC3B,2EAA2E,EAC3E,EAAE,SAAS,EAAE,OAAO,EAAE,CACvB,CAAC;SACH;IACH,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,eAAe,EAA2B;QAC7E,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACvE,qEAAqE;QACrE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,sEAAsE;YACtE,MAAM,IAAI,yCAAmB,CAAC,2DAA2D,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,KAAK,EAAE,CAAC,CAAC;QAE9C,iDAAiD;QACjD,MAAM,KAAK,GAAgC;YACzC,SAAS,EAAE,KAAK;YAChB,QAAQ;SACT,CAAC;QACF,eAAgB,CAAC,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC;QACpC,MAAM,eAAgB,CAAC,IAAI,CAAC,eAAgB,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAElF,MAAM,IAAI,+BAAc,CAAC,eAAgB,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,UAAU,CAAC,SAAoB;QAC3C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,IAAA,gBAAM,EAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACxE,IAAA,gBAAM,EAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,mBAAmB,CAAC,CAAC;QACjF,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC1D,CAAC;CACF;AApDD,oCAoDC","sourcesContent":["import assert from 'assert';\nimport type { InteractionResults } from 'oidc-provider';\nimport type { Operation } from '../../../../http/Operation';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { BadRequestHttpError } from '../../../../util/errors/BadRequestHttpError';\nimport { FoundHttpError } from '../../../../util/errors/FoundHttpError';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport { BaseInteractionHandler } from '../../BaseInteractionHandler';\nimport type { InteractionHandlerInput } from '../../InteractionHandler';\nimport type { AccountStore } from '../storage/AccountStore';\n\nconst loginView = {\n  required: {\n    email: 'string',\n    password: 'string',\n    remember: 'boolean',\n  },\n} as const;\n\ninterface LoginInput {\n  email: string;\n  password: string;\n  remember: boolean;\n}\n\n/**\n * Handles the submission of the Login Form and logs the user in.\n * Will throw a RedirectHttpError on success.\n */\nexport class LoginHandler extends BaseInteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n\n  public constructor(accountStore: AccountStore) {\n    super(loginView);\n    this.accountStore = accountStore;\n  }\n\n  public async canHandle(input: InteractionHandlerInput): Promise<void> {\n    await super.canHandle(input);\n    if (input.operation.method === 'POST' && !input.oidcInteraction) {\n      throw new BadRequestHttpError(\n        'This action can only be performed as part of an OIDC authentication flow.',\n        { errorCode: 'E0002' },\n      );\n    }\n  }\n\n  public async handlePost({ operation, oidcInteraction }: InteractionHandlerInput): Promise<never> {\n    const { email, password, remember } = await this.parseInput(operation);\n    // Try to log in, will error if email/password combination is invalid\n    const webId = await this.accountStore.authenticate(email, password);\n    const settings = await this.accountStore.getSettings(webId);\n    if (!settings.useIdp) {\n      // There is an account but is not used for identification with the IDP\n      throw new BadRequestHttpError('This server is not an identity provider for this account.');\n    }\n    this.logger.debug(`Logging in user ${email}`);\n\n    // Update the interaction to get the redirect URL\n    const login: InteractionResults['login'] = {\n      accountId: webId,\n      remember,\n    };\n    oidcInteraction!.result = { login };\n    await oidcInteraction!.save(oidcInteraction!.exp - Math.floor(Date.now() / 1000));\n\n    throw new FoundHttpError(oidcInteraction!.returnTo);\n  }\n\n  /**\n   * Validates the input data. Also makes sure remember is a boolean.\n   * Will throw an error in case something is wrong.\n   */\n  private async parseInput(operation: Operation): Promise<LoginInput> {\n    const { email, password, remember } = await readJsonStream(operation.body.data);\n    assert(typeof email === 'string' && email.length > 0, 'Email required');\n    assert(typeof password === 'string' && password.length > 0, 'Password required');\n    return { email, password, remember: Boolean(remember) };\n  }\n}\n"]}