"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetPasswordHandler = void 0;
const assert_1 = __importDefault(require("assert"));
const BasicRepresentation_1 = require("../../../../http/representation/BasicRepresentation");
const LogUtil_1 = require("../../../../logging/LogUtil");
const ContentTypes_1 = require("../../../../util/ContentTypes");
const StreamUtil_1 = require("../../../../util/StreamUtil");
const BaseInteractionHandler_1 = require("../../BaseInteractionHandler");
const EmailPasswordUtil_1 = require("../EmailPasswordUtil");
const resetPasswordView = {
    required: {
        password: 'string',
        confirmPassword: 'string',
        recordId: 'string',
    },
};
/**
 * Resets a password if a valid `recordId` is provided,
 * which should have been generated by a different handler.
 */
class ResetPasswordHandler extends BaseInteractionHandler_1.BaseInteractionHandler {
    constructor(accountStore) {
        super(resetPasswordView);
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.accountStore = accountStore;
    }
    async handlePost({ operation }) {
        // Validate input data
        const { password, confirmPassword, recordId } = await (0, StreamUtil_1.readJsonStream)(operation.body.data);
        (0, assert_1.default)(typeof recordId === 'string' && recordId.length > 0, 'Invalid request. Open the link from your email again');
        (0, EmailPasswordUtil_1.assertPassword)(password, confirmPassword);
        await this.resetPassword(recordId, password);
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify({}), operation.target, ContentTypes_1.APPLICATION_JSON);
    }
    /**
     * Resets the password for the account associated with the given recordId.
     */
    async resetPassword(recordId, newPassword) {
        const email = await this.accountStore.getForgotPasswordRecord(recordId);
        (0, assert_1.default)(email, 'This reset password link is no longer valid.');
        await this.accountStore.deleteForgotPasswordRecord(recordId);
        await this.accountStore.changePassword(email, newPassword);
        this.logger.debug(`Resetting password for user ${email}`);
    }
}
exports.ResetPasswordHandler = ResetPasswordHandler;
//# sourceMappingURL=ResetPasswordHandler.js.map