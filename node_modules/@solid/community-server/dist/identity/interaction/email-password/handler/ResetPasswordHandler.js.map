{"version":3,"file":"ResetPasswordHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/ResetPasswordHandler.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,6FAA0F;AAE1F,yDAA2D;AAC3D,gEAAiE;AACjE,4DAA6D;AAC7D,yEAAsE;AAEtE,4DAAsD;AAGtD,MAAM,iBAAiB,GAAG;IACxB,QAAQ,EAAE;QACR,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,QAAQ;QACzB,QAAQ,EAAE,QAAQ;KACnB;CACO,CAAC;AAEX;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,+CAAsB;IAK9D,YAAmB,YAA0B;QAC3C,KAAK,CAAC,iBAAiB,CAAC,CAAC;QALR,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAA2B;QAC5D,sBAAsB;QACtB,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1F,IAAA,gBAAM,EACJ,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EACnD,sDAAsD,CACvD,CAAC;QACF,IAAA,kCAAc,EAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAE1C,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7C,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IACzF,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,WAAmB;QAC/D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACxE,IAAA,gBAAM,EAAC,KAAK,EAAE,8CAA8C,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAC7D,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,KAAK,EAAE,CAAC,CAAC;IAC5D,CAAC;CACF;AAjCD,oDAiCC","sourcesContent":["import assert from 'assert';\nimport { BasicRepresentation } from '../../../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../../../http/representation/Representation';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { APPLICATION_JSON } from '../../../../util/ContentTypes';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport { BaseInteractionHandler } from '../../BaseInteractionHandler';\nimport type { InteractionHandlerInput } from '../../InteractionHandler';\nimport { assertPassword } from '../EmailPasswordUtil';\nimport type { AccountStore } from '../storage/AccountStore';\n\nconst resetPasswordView = {\n  required: {\n    password: 'string',\n    confirmPassword: 'string',\n    recordId: 'string',\n  },\n} as const;\n\n/**\n * Resets a password if a valid `recordId` is provided,\n * which should have been generated by a different handler.\n */\nexport class ResetPasswordHandler extends BaseInteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n\n  public constructor(accountStore: AccountStore) {\n    super(resetPasswordView);\n    this.accountStore = accountStore;\n  }\n\n  public async handlePost({ operation }: InteractionHandlerInput): Promise<Representation> {\n    // Validate input data\n    const { password, confirmPassword, recordId } = await readJsonStream(operation.body.data);\n    assert(\n      typeof recordId === 'string' && recordId.length > 0,\n      'Invalid request. Open the link from your email again',\n    );\n    assertPassword(password, confirmPassword);\n\n    await this.resetPassword(recordId, password);\n    return new BasicRepresentation(JSON.stringify({}), operation.target, APPLICATION_JSON);\n  }\n\n  /**\n   * Resets the password for the account associated with the given recordId.\n   */\n  private async resetPassword(recordId: string, newPassword: string): Promise<void> {\n    const email = await this.accountStore.getForgotPasswordRecord(recordId);\n    assert(email, 'This reset password link is no longer valid.');\n    await this.accountStore.deleteForgotPasswordRecord(recordId);\n    await this.accountStore.changePassword(email, newPassword);\n    this.logger.debug(`Resetting password for user ${email}`);\n  }\n}\n"]}