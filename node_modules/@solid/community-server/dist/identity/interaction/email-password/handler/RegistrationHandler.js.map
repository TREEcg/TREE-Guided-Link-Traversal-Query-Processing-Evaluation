{"version":3,"file":"RegistrationHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/RegistrationHandler.ts"],"names":[],"mappings":";;;AAAA,6FAA0F;AAE1F,yDAA2D;AAC3D,gEAAiE;AACjE,4DAA6D;AAC7D,yEAAsE;AAItE,MAAM,gBAAgB,GAAG;IACvB,QAAQ,EAAE;QACR,KAAK,EAAE,QAAQ;QACf,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,QAAQ;QACzB,WAAW,EAAE,SAAS;QACtB,QAAQ,EAAE,SAAS;QACnB,SAAS,EAAE,SAAS;QACpB,OAAO,EAAE,SAAS;KACnB;IACD,QAAQ,EAAE;QACR,KAAK,EAAE,QAAQ;QACf,OAAO,EAAE,QAAQ;QACjB,QAAQ,EAAE,QAAQ;KACnB;CACO,CAAC;AAEX;;GAEG;AACH,MAAa,mBAAoB,SAAQ,+CAAsB;IAK7D,YAAmB,mBAAwC;QACzD,KAAK,CAAC,gBAAgB,CAAC,CAAC;QALP,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAA2B;QAC5D,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC1E,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IAC9F,CAAC;CACF;AAhBD,kDAgBC","sourcesContent":["import { BasicRepresentation } from '../../../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../../../http/representation/Representation';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { APPLICATION_JSON } from '../../../../util/ContentTypes';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport { BaseInteractionHandler } from '../../BaseInteractionHandler';\nimport type { InteractionHandlerInput } from '../../InteractionHandler';\nimport type { RegistrationManager } from '../util/RegistrationManager';\n\nconst registrationView = {\n  required: {\n    email: 'string',\n    password: 'string',\n    confirmPassword: 'string',\n    createWebId: 'boolean',\n    register: 'boolean',\n    createPod: 'boolean',\n    rootPod: 'boolean',\n  },\n  optional: {\n    webId: 'string',\n    podName: 'string',\n    template: 'string',\n  },\n} as const;\n\n/**\n * Supports registration based on the `RegistrationManager` behaviour.\n */\nexport class RegistrationHandler extends BaseInteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly registrationManager: RegistrationManager;\n\n  public constructor(registrationManager: RegistrationManager) {\n    super(registrationView);\n    this.registrationManager = registrationManager;\n  }\n\n  public async handlePost({ operation }: InteractionHandlerInput): Promise<Representation> {\n    const data = await readJsonStream(operation.body.data);\n    const validated = this.registrationManager.validateInput(data, false);\n    const details = await this.registrationManager.register(validated, false);\n    return new BasicRepresentation(JSON.stringify(details), operation.target, APPLICATION_JSON);\n  }\n}\n"]}