"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginHandler = void 0;
const assert_1 = __importDefault(require("assert"));
const LogUtil_1 = require("../../../../logging/LogUtil");
const BadRequestHttpError_1 = require("../../../../util/errors/BadRequestHttpError");
const FoundHttpError_1 = require("../../../../util/errors/FoundHttpError");
const StreamUtil_1 = require("../../../../util/StreamUtil");
const BaseInteractionHandler_1 = require("../../BaseInteractionHandler");
const loginView = {
    required: {
        email: 'string',
        password: 'string',
        remember: 'boolean',
    },
};
/**
 * Handles the submission of the Login Form and logs the user in.
 * Will throw a RedirectHttpError on success.
 */
class LoginHandler extends BaseInteractionHandler_1.BaseInteractionHandler {
    constructor(accountStore) {
        super(loginView);
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.accountStore = accountStore;
    }
    async canHandle(input) {
        await super.canHandle(input);
        if (input.operation.method === 'POST' && !input.oidcInteraction) {
            throw new BadRequestHttpError_1.BadRequestHttpError('This action can only be performed as part of an OIDC authentication flow.', { errorCode: 'E0002' });
        }
    }
    async handlePost({ operation, oidcInteraction }) {
        const { email, password, remember } = await this.parseInput(operation);
        // Try to log in, will error if email/password combination is invalid
        const webId = await this.accountStore.authenticate(email, password);
        const settings = await this.accountStore.getSettings(webId);
        if (!settings.useIdp) {
            // There is an account but is not used for identification with the IDP
            throw new BadRequestHttpError_1.BadRequestHttpError('This server is not an identity provider for this account.');
        }
        this.logger.debug(`Logging in user ${email}`);
        // Update the interaction to get the redirect URL
        const login = {
            accountId: webId,
            remember,
        };
        oidcInteraction.result = { login };
        await oidcInteraction.save(oidcInteraction.exp - Math.floor(Date.now() / 1000));
        throw new FoundHttpError_1.FoundHttpError(oidcInteraction.returnTo);
    }
    /**
     * Validates the input data. Also makes sure remember is a boolean.
     * Will throw an error in case something is wrong.
     */
    async parseInput(operation) {
        const { email, password, remember } = await (0, StreamUtil_1.readJsonStream)(operation.body.data);
        (0, assert_1.default)(typeof email === 'string' && email.length > 0, 'Email required');
        (0, assert_1.default)(typeof password === 'string' && password.length > 0, 'Password required');
        return { email, password, remember: Boolean(remember) };
    }
}
exports.LoginHandler = LoginHandler;
//# sourceMappingURL=LoginHandler.js.map