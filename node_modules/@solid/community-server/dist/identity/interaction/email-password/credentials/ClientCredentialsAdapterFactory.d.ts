import type { AdapterPayload, Adapter } from 'oidc-provider';
import type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';
import type { AdapterFactory } from '../../../storage/AdapterFactory';
import { PassthroughAdapterFactory, PassthroughAdapter } from '../../../storage/PassthroughAdapterFactory';
export interface ClientCredentials {
    secret: string;
    webId: string;
}
/**
 * A {@link PassthroughAdapter} that overrides the `find` function
 * by checking if there are stored client credentials for the given ID
 * if no payload is found in the source.
 */
export declare class ClientCredentialsAdapter extends PassthroughAdapter {
    private readonly storage;
    constructor(name: string, source: Adapter, storage: KeyValueStorage<string, ClientCredentials>);
    find(id: string): Promise<AdapterPayload | void | undefined>;
}
export declare class ClientCredentialsAdapterFactory extends PassthroughAdapterFactory {
    private readonly storage;
    constructor(source: AdapterFactory, storage: KeyValueStorage<string, ClientCredentials>);
    createStorageAdapter(name: string): Adapter;
}
