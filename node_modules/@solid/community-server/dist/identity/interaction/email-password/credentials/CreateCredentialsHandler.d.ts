import type { Representation } from '../../../../http/representation/Representation';
import type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';
import type { AccountStore } from '../storage/AccountStore';
import type { ClientCredentials } from './ClientCredentialsAdapterFactory';
import type { CredentialsHandlerInput } from './CredentialsHandler';
import { CredentialsHandler } from './CredentialsHandler';
/**
 * Handles the creation of credential tokens.
 * Requires a `name` field in the input JSON body,
 * that will be used to generate the ID token.
 */
export declare class CreateCredentialsHandler extends CredentialsHandler {
    private readonly accountStore;
    private readonly credentialStorage;
    constructor(accountStore: AccountStore, credentialStorage: KeyValueStorage<string, ClientCredentials>);
    canHandle({ body }: CredentialsHandlerInput): Promise<void>;
    handle({ operation, body: { webId, name } }: CredentialsHandlerInput): Promise<Representation>;
}
