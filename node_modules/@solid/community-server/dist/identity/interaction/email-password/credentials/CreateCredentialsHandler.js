"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateCredentialsHandler = void 0;
const crypto_1 = require("crypto");
const uuid_1 = require("uuid");
const BasicRepresentation_1 = require("../../../../http/representation/BasicRepresentation");
const ContentTypes_1 = require("../../../../util/ContentTypes");
const BadRequestHttpError_1 = require("../../../../util/errors/BadRequestHttpError");
const NotImplementedHttpError_1 = require("../../../../util/errors/NotImplementedHttpError");
const CredentialsHandler_1 = require("./CredentialsHandler");
/**
 * Handles the creation of credential tokens.
 * Requires a `name` field in the input JSON body,
 * that will be used to generate the ID token.
 */
class CreateCredentialsHandler extends CredentialsHandler_1.CredentialsHandler {
    constructor(accountStore, credentialStorage) {
        super();
        this.accountStore = accountStore;
        this.credentialStorage = credentialStorage;
    }
    async canHandle({ body }) {
        if (typeof body.name !== 'string') {
            throw new NotImplementedHttpError_1.NotImplementedHttpError();
        }
    }
    async handle({ operation, body: { webId, name } }) {
        const settings = await this.accountStore.getSettings(webId);
        if (!settings.useIdp) {
            throw new BadRequestHttpError_1.BadRequestHttpError('This server is not an identity provider for this account.');
        }
        const id = `${name.replace(/\W/gu, '-')}_${(0, uuid_1.v4)()}`;
        const secret = (0, crypto_1.randomBytes)(64).toString('hex');
        // Store the credentials, and point to them from the account
        settings.clientCredentials = settings.clientCredentials ?? [];
        settings.clientCredentials.push(id);
        await this.accountStore.updateSettings(webId, settings);
        await this.credentialStorage.set(id, { secret, webId });
        const response = { id, secret };
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify(response), operation.target, ContentTypes_1.APPLICATION_JSON);
    }
}
exports.CreateCredentialsHandler = CreateCredentialsHandler;
//# sourceMappingURL=CreateCredentialsHandler.js.map