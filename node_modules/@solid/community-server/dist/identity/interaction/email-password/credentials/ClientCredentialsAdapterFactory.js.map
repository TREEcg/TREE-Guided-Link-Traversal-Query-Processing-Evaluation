{"version":3,"file":"ClientCredentialsAdapterFactory.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/credentials/ClientCredentialsAdapterFactory.ts"],"names":[],"mappings":";;;AAGA,0FAA2G;AAO3G;;;;GAIG;AACH,MAAa,wBAAyB,SAAQ,8CAAkB;IAG9D,YAAmB,IAAY,EAAE,MAAe,EAAE,OAAmD;QACnG,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,EAAU;QAC1B,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACtC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC/C,IAAI,WAAW,EAAE;gBACf,yDAAyD;gBACzD,OAAO,GAAG;oBACR,SAAS,EAAE,EAAE;oBACb,aAAa,EAAE,WAAW,CAAC,MAAM;oBACjC,WAAW,EAAE,CAAE,oBAAoB,CAAE;oBACrC,aAAa,EAAE,EAAE;oBACjB,cAAc,EAAE,EAAE;iBACnB,CAAC;gBACF,wDAAwD;aACzD;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AA3BD,4DA2BC;AAED,MAAa,+BAAgC,SAAQ,qDAAyB;IAG5E,YAAmB,MAAsB,EAAE,OAAmD;QAC5F,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,oBAAoB,CAAC,IAAY;QACtC,OAAO,IAAI,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAClG,CAAC;CACF;AAXD,0EAWC","sourcesContent":["import type { AdapterPayload, Adapter } from 'oidc-provider';\nimport type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';\nimport type { AdapterFactory } from '../../../storage/AdapterFactory';\nimport { PassthroughAdapterFactory, PassthroughAdapter } from '../../../storage/PassthroughAdapterFactory';\n\nexport interface ClientCredentials {\n  secret: string;\n  webId: string;\n}\n\n/**\n * A {@link PassthroughAdapter} that overrides the `find` function\n * by checking if there are stored client credentials for the given ID\n * if no payload is found in the source.\n */\nexport class ClientCredentialsAdapter extends PassthroughAdapter {\n  private readonly storage: KeyValueStorage<string, ClientCredentials>;\n\n  public constructor(name: string, source: Adapter, storage: KeyValueStorage<string, ClientCredentials>) {\n    super(name, source);\n    this.storage = storage;\n  }\n\n  public async find(id: string): Promise<AdapterPayload | void | undefined> {\n    let payload = await this.source.find(id);\n\n    if (!payload && this.name === 'Client') {\n      const credentials = await this.storage.get(id);\n      if (credentials) {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        payload = {\n          client_id: id,\n          client_secret: credentials.secret,\n          grant_types: [ 'client_credentials' ],\n          redirect_uris: [],\n          response_types: [],\n        };\n        /* eslint-enable @typescript-eslint/naming-convention */\n      }\n    }\n    return payload;\n  }\n}\n\nexport class ClientCredentialsAdapterFactory extends PassthroughAdapterFactory {\n  private readonly storage: KeyValueStorage<string, ClientCredentials>;\n\n  public constructor(source: AdapterFactory, storage: KeyValueStorage<string, ClientCredentials>) {\n    super(source);\n    this.storage = storage;\n  }\n\n  public createStorageAdapter(name: string): Adapter {\n    return new ClientCredentialsAdapter(name, this.source.createStorageAdapter(name), this.storage);\n  }\n}\n"]}