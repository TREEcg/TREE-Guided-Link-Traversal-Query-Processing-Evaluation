{"version":3,"file":"CreateCredentialsHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/credentials/CreateCredentialsHandler.ts"],"names":[],"mappings":";;;AAAA,mCAAqC;AACrC,+BAA0B;AAC1B,6FAA0F;AAG1F,gEAAiE;AACjE,qFAAkF;AAClF,6FAA0F;AAI1F,6DAA0D;AAE1D;;;;GAIG;AACH,MAAa,wBAAyB,SAAQ,uCAAkB;IAI9D,YAAmB,YAA0B,EAAE,iBAA6D;QAC1G,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAA2B;QACtD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACjC,MAAM,IAAI,iDAAuB,EAAE,CAAC;SACrC;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAA0B;QAC9E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE5D,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,MAAM,IAAI,yCAAmB,CAAC,2DAA2D,CAAC,CAAC;SAC5F;QAED,MAAM,EAAE,GAAG,GAAI,IAAe,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,IAAA,SAAE,GAAE,EAAE,CAAC;QAC9D,MAAM,MAAM,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE/C,4DAA4D;QAC5D,QAAQ,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,IAAI,EAAE,CAAC;QAC9D,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACxD,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAExD,MAAM,QAAQ,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;QAChC,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IAC/F,CAAC;CACF;AAnCD,4DAmCC","sourcesContent":["import { randomBytes } from 'crypto';\nimport { v4 } from 'uuid';\nimport { BasicRepresentation } from '../../../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../../../http/representation/Representation';\nimport type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';\nimport { APPLICATION_JSON } from '../../../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../../../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../../../../util/errors/NotImplementedHttpError';\nimport type { AccountStore } from '../storage/AccountStore';\nimport type { ClientCredentials } from './ClientCredentialsAdapterFactory';\nimport type { CredentialsHandlerInput } from './CredentialsHandler';\nimport { CredentialsHandler } from './CredentialsHandler';\n\n/**\n * Handles the creation of credential tokens.\n * Requires a `name` field in the input JSON body,\n * that will be used to generate the ID token.\n */\nexport class CreateCredentialsHandler extends CredentialsHandler {\n  private readonly accountStore: AccountStore;\n  private readonly credentialStorage: KeyValueStorage<string, ClientCredentials>;\n\n  public constructor(accountStore: AccountStore, credentialStorage: KeyValueStorage<string, ClientCredentials>) {\n    super();\n    this.accountStore = accountStore;\n    this.credentialStorage = credentialStorage;\n  }\n\n  public async canHandle({ body }: CredentialsHandlerInput): Promise<void> {\n    if (typeof body.name !== 'string') {\n      throw new NotImplementedHttpError();\n    }\n  }\n\n  public async handle({ operation, body: { webId, name }}: CredentialsHandlerInput): Promise<Representation> {\n    const settings = await this.accountStore.getSettings(webId);\n\n    if (!settings.useIdp) {\n      throw new BadRequestHttpError('This server is not an identity provider for this account.');\n    }\n\n    const id = `${(name as string).replace(/\\W/gu, '-')}_${v4()}`;\n    const secret = randomBytes(64).toString('hex');\n\n    // Store the credentials, and point to them from the account\n    settings.clientCredentials = settings.clientCredentials ?? [];\n    settings.clientCredentials.push(id);\n    await this.accountStore.updateSettings(webId, settings);\n    await this.credentialStorage.set(id, { secret, webId });\n\n    const response = { id, secret };\n    return new BasicRepresentation(JSON.stringify(response), operation.target, APPLICATION_JSON);\n  }\n}\n"]}