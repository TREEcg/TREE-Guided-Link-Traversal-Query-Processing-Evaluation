{"version":3,"file":"DeleteCredentialsHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/credentials/DeleteCredentialsHandler.ts"],"names":[],"mappings":";;;AAAA,6FAA0F;AAG1F,gEAAiE;AACjE,qFAAkF;AAClF,6FAA0F;AAI1F,6DAA0D;AAE1D;;;;GAIG;AACH,MAAa,wBAAyB,SAAQ,uCAAkB;IAI9D,YAAmB,YAA0B,EAAE,iBAA6D;QAC1G,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAA2B;QACtD,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE;YACnC,MAAM,IAAI,iDAAuB,EAAE,CAAC;SACrC;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,IAAI,EAA2B;QAC9D,MAAM,EAAE,GAAG,IAAI,CAAC,MAAgB,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjE,QAAQ,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,IAAI,EAAE,CAAC;QAC9D,MAAM,GAAG,GAAG,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,GAAG,GAAG,CAAC,EAAE;YACX,MAAM,IAAI,yCAAmB,CAAC,qDAAqD,CAAC,CAAC;SACtF;QAED,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACxC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC7D,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IACzF,CAAC;CACF;AA9BD,4DA8BC","sourcesContent":["import { BasicRepresentation } from '../../../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../../../http/representation/Representation';\nimport type { KeyValueStorage } from '../../../../storage/keyvalue/KeyValueStorage';\nimport { APPLICATION_JSON } from '../../../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../../../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../../../../util/errors/NotImplementedHttpError';\nimport type { AccountStore } from '../storage/AccountStore';\nimport type { ClientCredentials } from './ClientCredentialsAdapterFactory';\nimport type { CredentialsHandlerInput } from './CredentialsHandler';\nimport { CredentialsHandler } from './CredentialsHandler';\n\n/**\n * Handles the deletion of credential tokens.\n * Expects the JSON body to have a `delete` field with as value the ID of the token to be deleted.\n * This should be replaced to be an actual DELETE request once the API supports it.\n */\nexport class DeleteCredentialsHandler extends CredentialsHandler {\n  private readonly accountStore: AccountStore;\n  private readonly credentialStorage: KeyValueStorage<string, ClientCredentials>;\n\n  public constructor(accountStore: AccountStore, credentialStorage: KeyValueStorage<string, ClientCredentials>) {\n    super();\n    this.accountStore = accountStore;\n    this.credentialStorage = credentialStorage;\n  }\n\n  public async canHandle({ body }: CredentialsHandlerInput): Promise<void> {\n    if (typeof body.delete !== 'string') {\n      throw new NotImplementedHttpError();\n    }\n  }\n\n  public async handle({ operation, body }: CredentialsHandlerInput): Promise<Representation> {\n    const id = body.delete as string;\n    const settings = await this.accountStore.getSettings(body.webId);\n    settings.clientCredentials = settings.clientCredentials ?? [];\n    const idx = settings.clientCredentials.indexOf(id);\n    if (idx < 0) {\n      throw new BadRequestHttpError('No credential with this ID exists for this account.');\n    }\n\n    await this.credentialStorage.delete(id);\n    settings.clientCredentials.splice(idx, 1);\n    await this.accountStore.updateSettings(body.webId, settings);\n    return new BasicRepresentation(JSON.stringify({}), operation.target, APPLICATION_JSON);\n  }\n}\n"]}