"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailPasswordAuthorizer = void 0;
const assert_1 = __importDefault(require("assert"));
const MethodNotAllowedHttpError_1 = require("../../../../util/errors/MethodNotAllowedHttpError");
const StreamUtil_1 = require("../../../../util/StreamUtil");
const InteractionHandler_1 = require("../../InteractionHandler");
/**
 * Authenticates a user by the email/password in a JSON POST body.
 * Passes the body and the WebID associated with that account to the source handler.
 */
class EmailPasswordAuthorizer extends InteractionHandler_1.InteractionHandler {
    constructor(accountStore, source) {
        super();
        this.accountStore = accountStore;
        this.source = source;
    }
    async handle({ operation }) {
        if (operation.method !== 'POST') {
            throw new MethodNotAllowedHttpError_1.MethodNotAllowedHttpError([operation.method], 'Only POST requests are supported.');
        }
        const json = await (0, StreamUtil_1.readJsonStream)(operation.body.data);
        const { email, password } = json;
        (0, assert_1.default)(typeof email === 'string' && email.length > 0, 'Email required');
        (0, assert_1.default)(typeof password === 'string' && password.length > 0, 'Password required');
        const webId = await this.accountStore.authenticate(email, password);
        // Password no longer needed from this point on
        delete json.password;
        return this.source.handleSafe({ operation, body: { ...json, email, webId } });
    }
}
exports.EmailPasswordAuthorizer = EmailPasswordAuthorizer;
//# sourceMappingURL=EmailPasswordAuthorizer.js.map