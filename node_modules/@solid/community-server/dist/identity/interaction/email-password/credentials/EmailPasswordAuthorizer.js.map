{"version":3,"file":"EmailPasswordAuthorizer.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/credentials/EmailPasswordAuthorizer.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,iGAA8F;AAC9F,4DAA6D;AAE7D,iEAA8D;AAI9D;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,uCAAkB;IAI7D,YAAmB,YAA0B,EAAE,MAA0B;QACvE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA2B;QACxD,IAAI,SAAS,CAAC,MAAM,KAAK,MAAM,EAAE;YAC/B,MAAM,IAAI,qDAAyB,CAAC,CAAE,SAAS,CAAC,MAAM,CAAE,EAAE,mCAAmC,CAAC,CAAC;SAChG;QACD,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QACjC,IAAA,gBAAM,EAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACxE,IAAA,gBAAM,EAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,mBAAmB,CAAC,CAAC;QACjF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACpE,+CAA+C;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAC,CAAC,CAAC;IAC/E,CAAC;CACF;AAvBD,0DAuBC","sourcesContent":["import assert from 'assert';\nimport type { Representation } from '../../../../http/representation/Representation';\nimport { MethodNotAllowedHttpError } from '../../../../util/errors/MethodNotAllowedHttpError';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport type { InteractionHandlerInput } from '../../InteractionHandler';\nimport { InteractionHandler } from '../../InteractionHandler';\nimport type { AccountStore } from '../storage/AccountStore';\nimport type { CredentialsHandler } from './CredentialsHandler';\n\n/**\n * Authenticates a user by the email/password in a JSON POST body.\n * Passes the body and the WebID associated with that account to the source handler.\n */\nexport class EmailPasswordAuthorizer extends InteractionHandler {\n  private readonly accountStore: AccountStore;\n  private readonly source: CredentialsHandler;\n\n  public constructor(accountStore: AccountStore, source: CredentialsHandler) {\n    super();\n    this.accountStore = accountStore;\n    this.source = source;\n  }\n\n  public async handle({ operation }: InteractionHandlerInput): Promise<Representation> {\n    if (operation.method !== 'POST') {\n      throw new MethodNotAllowedHttpError([ operation.method ], 'Only POST requests are supported.');\n    }\n    const json = await readJsonStream(operation.body.data);\n    const { email, password } = json;\n    assert(typeof email === 'string' && email.length > 0, 'Email required');\n    assert(typeof password === 'string' && password.length > 0, 'Password required');\n    const webId = await this.accountStore.authenticate(email, password);\n    // Password no longer needed from this point on\n    delete json.password;\n    return this.source.handleSafe({ operation, body: { ...json, email, webId }});\n  }\n}\n"]}