"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteCredentialsHandler = void 0;
const BasicRepresentation_1 = require("../../../../http/representation/BasicRepresentation");
const ContentTypes_1 = require("../../../../util/ContentTypes");
const BadRequestHttpError_1 = require("../../../../util/errors/BadRequestHttpError");
const NotImplementedHttpError_1 = require("../../../../util/errors/NotImplementedHttpError");
const CredentialsHandler_1 = require("./CredentialsHandler");
/**
 * Handles the deletion of credential tokens.
 * Expects the JSON body to have a `delete` field with as value the ID of the token to be deleted.
 * This should be replaced to be an actual DELETE request once the API supports it.
 */
class DeleteCredentialsHandler extends CredentialsHandler_1.CredentialsHandler {
    constructor(accountStore, credentialStorage) {
        super();
        this.accountStore = accountStore;
        this.credentialStorage = credentialStorage;
    }
    async canHandle({ body }) {
        if (typeof body.delete !== 'string') {
            throw new NotImplementedHttpError_1.NotImplementedHttpError();
        }
    }
    async handle({ operation, body }) {
        const id = body.delete;
        const settings = await this.accountStore.getSettings(body.webId);
        settings.clientCredentials = settings.clientCredentials ?? [];
        const idx = settings.clientCredentials.indexOf(id);
        if (idx < 0) {
            throw new BadRequestHttpError_1.BadRequestHttpError('No credential with this ID exists for this account.');
        }
        await this.credentialStorage.delete(id);
        settings.clientCredentials.splice(idx, 1);
        await this.accountStore.updateSettings(body.webId, settings);
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify({}), operation.target, ContentTypes_1.APPLICATION_JSON);
    }
}
exports.DeleteCredentialsHandler = DeleteCredentialsHandler;
//# sourceMappingURL=DeleteCredentialsHandler.js.map