"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCredentialsAdapterFactory = exports.ClientCredentialsAdapter = void 0;
const PassthroughAdapterFactory_1 = require("../../../storage/PassthroughAdapterFactory");
/**
 * A {@link PassthroughAdapter} that overrides the `find` function
 * by checking if there are stored client credentials for the given ID
 * if no payload is found in the source.
 */
class ClientCredentialsAdapter extends PassthroughAdapterFactory_1.PassthroughAdapter {
    constructor(name, source, storage) {
        super(name, source);
        this.storage = storage;
    }
    async find(id) {
        let payload = await this.source.find(id);
        if (!payload && this.name === 'Client') {
            const credentials = await this.storage.get(id);
            if (credentials) {
                /* eslint-disable @typescript-eslint/naming-convention */
                payload = {
                    client_id: id,
                    client_secret: credentials.secret,
                    grant_types: ['client_credentials'],
                    redirect_uris: [],
                    response_types: [],
                };
                /* eslint-enable @typescript-eslint/naming-convention */
            }
        }
        return payload;
    }
}
exports.ClientCredentialsAdapter = ClientCredentialsAdapter;
class ClientCredentialsAdapterFactory extends PassthroughAdapterFactory_1.PassthroughAdapterFactory {
    constructor(source, storage) {
        super(source);
        this.storage = storage;
    }
    createStorageAdapter(name) {
        return new ClientCredentialsAdapter(name, this.source.createStorageAdapter(name), this.storage);
    }
}
exports.ClientCredentialsAdapterFactory = ClientCredentialsAdapterFactory;
//# sourceMappingURL=ClientCredentialsAdapterFactory.js.map