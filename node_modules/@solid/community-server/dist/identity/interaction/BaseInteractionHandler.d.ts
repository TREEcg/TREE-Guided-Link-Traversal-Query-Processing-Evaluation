import type { Representation } from '../../http/representation/Representation';
import type { InteractionHandlerInput } from './InteractionHandler';
import { InteractionHandler } from './InteractionHandler';
/**
 * Abstract implementation for handlers that always return a fixed JSON view on a GET.
 * POST requests are passed to an abstract function.
 * Other methods will be rejected.
 */
export declare abstract class BaseInteractionHandler extends InteractionHandler {
    private readonly view;
    protected constructor(view: Record<string, unknown>);
    canHandle(input: InteractionHandlerInput): Promise<void>;
    handle(input: InteractionHandlerInput): Promise<Representation>;
    /**
     * Returns a fixed JSON view.
     * @param input - Input parameters, only the operation target is used.
     */
    protected handleGet(input: InteractionHandlerInput): Promise<Representation>;
    /**
     * Function that will be called for POST requests.
     * Input data remains unchanged.
     * @param input - Input operation and OidcInteraction if it exists.
     */
    protected abstract handlePost(input: InteractionHandlerInput): Promise<Representation>;
}
