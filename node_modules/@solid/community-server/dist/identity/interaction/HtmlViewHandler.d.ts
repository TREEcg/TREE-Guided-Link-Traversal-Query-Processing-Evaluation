import type { Representation } from '../../http/representation/Representation';
import type { TemplateEngine } from '../../util/templates/TemplateEngine';
import type { InteractionHandlerInput } from './InteractionHandler';
import { InteractionHandler } from './InteractionHandler';
import type { InteractionRoute } from './routing/InteractionRoute';
/**
 * Stores the HTML templates associated with specific InteractionRoutes.
 * Template keys should be file paths to the templates,
 * values should be the corresponding routes.
 *
 * Will only handle GET operations for which there is a matching template if HTML is more preferred than JSON.
 * Reason for doing it like this instead of a standard content negotiation flow
 * is because we only want to return the HTML pages on GET requests. *
 *
 * Templates will receive the parameter `idpIndex` in their context pointing to the root index URL of the IDP API
 * and an `authenticating` parameter indicating if this is an active OIDC interaction.
 */
export declare class HtmlViewHandler extends InteractionHandler {
    private readonly idpIndex;
    private readonly templateEngine;
    private readonly templates;
    constructor(index: InteractionRoute, templateEngine: TemplateEngine, templates: Record<string, InteractionRoute>);
    canHandle({ operation }: InteractionHandlerInput): Promise<void>;
    handle({ operation, oidcInteraction }: InteractionHandlerInput): Promise<Representation>;
}
