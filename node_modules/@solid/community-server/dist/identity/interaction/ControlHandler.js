"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlHandler = void 0;
const BasicRepresentation_1 = require("../../http/representation/BasicRepresentation");
const ContentTypes_1 = require("../../util/ContentTypes");
const InternalServerError_1 = require("../../util/errors/InternalServerError");
const StreamUtil_1 = require("../../util/StreamUtil");
const InteractionHandler_1 = require("./InteractionHandler");
const INTERNAL_API_VERSION = '0.4';
/**
 * Adds `controls` and `apiVersion` fields to the output of its source handler,
 * such that clients can predictably find their way to other resources.
 * Control paths are determined by the input routes.
 */
class ControlHandler extends InteractionHandler_1.InteractionHandler {
    constructor(source, controls) {
        super();
        this.source = source;
        this.controls = Object.fromEntries(Object.entries(controls).map(([control, route]) => [control, route.getPath()]));
    }
    async canHandle(input) {
        await this.source.canHandle(input);
    }
    async handle(input) {
        const result = await this.source.handle(input);
        if (result.metadata.contentType !== ContentTypes_1.APPLICATION_JSON) {
            throw new InternalServerError_1.InternalServerError('Source handler should return application/json.');
        }
        const json = await (0, StreamUtil_1.readJsonStream)(result.data);
        json.controls = this.controls;
        json.apiVersion = INTERNAL_API_VERSION;
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify(json), result.metadata);
    }
}
exports.ControlHandler = ControlHandler;
//# sourceMappingURL=ControlHandler.js.map