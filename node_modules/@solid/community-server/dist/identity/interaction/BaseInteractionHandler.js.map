{"version":3,"file":"BaseInteractionHandler.js","sourceRoot":"","sources":["../../../src/identity/interaction/BaseInteractionHandler.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,0DAA2D;AAC3D,2FAAwF;AAExF,6DAA0D;AAE1D;;;;GAIG;AACH,MAAsB,sBAAuB,SAAQ,uCAAkB;IAGrE,YAAsB,IAA6B;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA8B;QACnD,MAAM,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7B,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC;QACnC,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM,EAAE;YACzC,MAAM,IAAI,qDAAyB,CAAC,CAAE,MAAM,CAAE,EAAE,uCAAuC,CAAC,CAAC;SAC1F;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA8B;QAChD,QAAQ,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;YAC9B,KAAK,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACzC,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC3C,OAAO,CAAC,CAAC,MAAM,IAAI,qDAAyB,CAAC,CAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAE,CAAC,CAAC;SAC1E;IACH,CAAC;IAED;;;OAGG;IACO,KAAK,CAAC,SAAS,CAAC,KAA8B;QACtD,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,+BAAgB,CAAC,CAAC;IACtF,CAAC;CAQF;AAtCD,wDAsCC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { APPLICATION_JSON } from '../../util/ContentTypes';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport type { InteractionHandlerInput } from './InteractionHandler';\nimport { InteractionHandler } from './InteractionHandler';\n\n/**\n * Abstract implementation for handlers that always return a fixed JSON view on a GET.\n * POST requests are passed to an abstract function.\n * Other methods will be rejected.\n */\nexport abstract class BaseInteractionHandler extends InteractionHandler {\n  private readonly view: string;\n\n  protected constructor(view: Record<string, unknown>) {\n    super();\n    this.view = JSON.stringify(view);\n  }\n\n  public async canHandle(input: InteractionHandlerInput): Promise<void> {\n    await super.canHandle(input);\n    const { method } = input.operation;\n    if (method !== 'GET' && method !== 'POST') {\n      throw new MethodNotAllowedHttpError([ method ], 'Only GET/POST requests are supported.');\n    }\n  }\n\n  public async handle(input: InteractionHandlerInput): Promise<Representation> {\n    switch (input.operation.method) {\n      case 'GET': return this.handleGet(input);\n      case 'POST': return this.handlePost(input);\n      default: throw new MethodNotAllowedHttpError([ input.operation.method ]);\n    }\n  }\n\n  /**\n   * Returns a fixed JSON view.\n   * @param input - Input parameters, only the operation target is used.\n   */\n  protected async handleGet(input: InteractionHandlerInput): Promise<Representation> {\n    return new BasicRepresentation(this.view, input.operation.target, APPLICATION_JSON);\n  }\n\n  /**\n   * Function that will be called for POST requests.\n   * Input data remains unchanged.\n   * @param input - Input operation and OidcInteraction if it exists.\n   */\n  protected abstract handlePost(input: InteractionHandlerInput): Promise<Representation>;\n}\n"]}