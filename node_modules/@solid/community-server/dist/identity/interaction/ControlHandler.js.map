{"version":3,"file":"ControlHandler.js","sourceRoot":"","sources":["../../../src/identity/interaction/ControlHandler.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,0DAA2D;AAC3D,+EAA4E;AAC5E,sDAAuD;AAEvD,6DAA0D;AAG1D,MAAM,oBAAoB,GAAG,KAAK,CAAC;AAEnC;;;;GAIG;AACH,MAAa,cAAe,SAAQ,uCAAkB;IAIpD,YAAmB,MAA0B,EAAE,QAA0C;QACvF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,WAAW,CAChC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,OAAO,EAAE,KAAK,CAAE,EAAsB,EAAE,CAAC,CAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAE,CAAC,CACvG,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA8B;QACnD,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA8B;QAChD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,KAAK,+BAAgB,EAAE;YACpD,MAAM,IAAI,yCAAmB,CAAC,gDAAgD,CAAC,CAAC;SACjF;QACD,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAc,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,oBAAoB,CAAC;QACvC,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IACxE,CAAC;CACF;AA1BD,wCA0BC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { APPLICATION_JSON } from '../../util/ContentTypes';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { readJsonStream } from '../../util/StreamUtil';\nimport type { InteractionHandlerInput } from './InteractionHandler';\nimport { InteractionHandler } from './InteractionHandler';\nimport type { InteractionRoute } from './routing/InteractionRoute';\n\nconst INTERNAL_API_VERSION = '0.4';\n\n/**\n * Adds `controls` and `apiVersion` fields to the output of its source handler,\n * such that clients can predictably find their way to other resources.\n * Control paths are determined by the input routes.\n */\nexport class ControlHandler extends InteractionHandler {\n  private readonly source: InteractionHandler;\n  private readonly controls: Record<string, string>;\n\n  public constructor(source: InteractionHandler, controls: Record<string, InteractionRoute>) {\n    super();\n    this.source = source;\n    this.controls = Object.fromEntries(\n      Object.entries(controls).map(([ control, route ]): [ string, string ] => [ control, route.getPath() ]),\n    );\n  }\n\n  public async canHandle(input: InteractionHandlerInput): Promise<void> {\n    await this.source.canHandle(input);\n  }\n\n  public async handle(input: InteractionHandlerInput): Promise<Representation> {\n    const result = await this.source.handle(input);\n    if (result.metadata.contentType !== APPLICATION_JSON) {\n      throw new InternalServerError('Source handler should return application/json.');\n    }\n    const json = await readJsonStream(result.data);\n    json.controls = this.controls;\n    json.apiVersion = INTERNAL_API_VERSION;\n    return new BasicRepresentation(JSON.stringify(json), result.metadata);\n  }\n}\n"]}