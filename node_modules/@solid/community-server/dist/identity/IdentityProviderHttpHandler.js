"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityProviderHttpHandler = void 0;
const OkResponseDescription_1 = require("../http/output/response/OkResponseDescription");
const LogUtil_1 = require("../logging/LogUtil");
const OperationHttpHandler_1 = require("../server/OperationHttpHandler");
const ContentTypes_1 = require("../util/ContentTypes");
/**
 * Generates the active Interaction object if there is an ongoing OIDC interaction
 * and sends it to the {@link InteractionHandler}.
 *
 * Input data will first be converted to JSON.
 *
 * Only GET and POST methods are accepted.
 */
class IdentityProviderHttpHandler extends OperationHttpHandler_1.OperationHttpHandler {
    constructor(args) {
        super();
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.providerFactory = args.providerFactory;
        this.converter = args.converter;
        this.handler = args.handler;
    }
    async handle({ operation, request, response }) {
        // This being defined means we're in an OIDC session
        let oidcInteraction;
        try {
            const provider = await this.providerFactory.getProvider();
            oidcInteraction = await provider.interactionDetails(request, response);
            this.logger.debug('Found an active OIDC interaction.');
        }
        catch {
            this.logger.debug('No active OIDC interaction found.');
        }
        // Convert input data to JSON
        // Allows us to still support form data
        const { contentType } = operation.body.metadata;
        if (contentType && contentType !== ContentTypes_1.APPLICATION_JSON) {
            this.logger.debug(`Converting input ${contentType} to ${ContentTypes_1.APPLICATION_JSON}`);
            const args = {
                representation: operation.body,
                preferences: { type: { [ContentTypes_1.APPLICATION_JSON]: 1 } },
                identifier: operation.target,
            };
            operation = {
                ...operation,
                body: await this.converter.handleSafe(args),
            };
        }
        const representation = await this.handler.handleSafe({ operation, oidcInteraction });
        return new OkResponseDescription_1.OkResponseDescription(representation.metadata, representation.data);
    }
}
exports.IdentityProviderHttpHandler = IdentityProviderHttpHandler;
//# sourceMappingURL=IdentityProviderHttpHandler.js.map