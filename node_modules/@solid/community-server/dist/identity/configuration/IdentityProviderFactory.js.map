{"version":3,"file":"IdentityProviderFactory.js","sourceRoot":"","sources":["../../../src/identity/configuration/IdentityProviderFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention, tsdoc/syntax */\n// import/no-unresolved can't handle jose imports\n// tsdoc/syntax can't handle {json} parameter\nimport { randomBytes } from 'crypto';\nimport type { JWK } from 'jose';\nimport { exportJWK, generateKeyPair } from 'jose';\nimport type { Account,\n  Adapter,\n  Configuration,\n  ErrorOut,\n  KoaContextWithOIDC,\n  ResourceServer,\n  UnknownObject,\n  errors } from 'oidc-provider';\nimport { Provider } from 'oidc-provider';\nimport type { Operation } from '../../http/Operation';\nimport type { ErrorHandler } from '../../http/output/error/ErrorHandler';\nimport type { ResponseWriter } from '../../http/output/ResponseWriter';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { RedirectHttpError } from '../../util/errors/RedirectHttpError';\nimport { guardStream } from '../../util/GuardedStream';\nimport { joinUrl } from '../../util/PathUtil';\nimport type { ClientCredentials } from '../interaction/email-password/credentials/ClientCredentialsAdapterFactory';\nimport type { InteractionHandler } from '../interaction/InteractionHandler';\nimport type { AdapterFactory } from '../storage/AdapterFactory';\nimport type { ProviderFactory } from './ProviderFactory';\n\nexport interface IdentityProviderFactoryArgs {\n  /**\n   * Factory that creates the adapter used for OIDC data storage.\n   */\n  adapterFactory: AdapterFactory;\n  /**\n   * Base URL of the server.\n   */\n  baseUrl: string;\n  /**\n   * Path for all requests targeting the OIDC library.\n   */\n  oidcPath: string;\n  /**\n   * The handler responsible for redirecting interaction requests to the correct URL.\n   */\n  interactionHandler: InteractionHandler;\n  /**\n   * Storage containing the generated client credentials with their associated WebID.\n   */\n  credentialStorage: KeyValueStorage<string, ClientCredentials>;\n  /**\n   * Storage used to store cookie and JWT keys so they can be re-used in case of multithreading.\n   */\n  storage: KeyValueStorage<string, unknown>;\n  /**\n   * Extra information will be added to the error output if this is true.\n   */\n  showStackTrace: boolean;\n  /**\n   * Used to convert errors thrown by the OIDC library.\n   */\n  errorHandler: ErrorHandler;\n  /**\n   * Used to write out errors thrown by the OIDC library.\n   */\n  responseWriter: ResponseWriter;\n}\n\nconst JWKS_KEY = 'jwks';\nconst COOKIES_KEY = 'cookie-secret';\n\n/**\n * Creates an OIDC Provider based on the provided configuration and parameters.\n * The provider will be cached and returned on subsequent calls.\n * Cookie and JWT keys will be stored in an internal storage so they can be re-used over multiple threads.\n * Necessary claims for Solid OIDC interactions will be added.\n * Routes will be updated based on the `baseUrl` and `oidcPath`.\n */\nexport class IdentityProviderFactory implements ProviderFactory {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly config: Configuration;\n  private readonly adapterFactory: AdapterFactory;\n  private readonly baseUrl: string;\n  private readonly oidcPath: string;\n  private readonly interactionHandler: InteractionHandler;\n  private readonly credentialStorage: KeyValueStorage<string, ClientCredentials>;\n  private readonly storage: KeyValueStorage<string, unknown>;\n  private readonly showStackTrace: boolean;\n  private readonly errorHandler: ErrorHandler;\n  private readonly responseWriter: ResponseWriter;\n\n  private readonly jwtAlg = 'ES256';\n  private provider?: Provider;\n\n  /**\n   * @param config - JSON config for the OIDC library @range {json}\n   * @param args - Remaining parameters required for the factory.\n   */\n  public constructor(config: Configuration, args: IdentityProviderFactoryArgs) {\n    this.config = config;\n\n    this.adapterFactory = args.adapterFactory;\n    this.baseUrl = args.baseUrl;\n    this.oidcPath = args.oidcPath;\n    this.interactionHandler = args.interactionHandler;\n    this.credentialStorage = args.credentialStorage;\n    this.storage = args.storage;\n    this.showStackTrace = args.showStackTrace;\n    this.errorHandler = args.errorHandler;\n    this.responseWriter = args.responseWriter;\n  }\n\n  public async getProvider(): Promise<Provider> {\n    if (this.provider) {\n      return this.provider;\n    }\n    this.provider = await this.createProvider();\n    return this.provider;\n  }\n\n  /**\n   * Creates a Provider by building a Configuration using all the stored parameters.\n   */\n  private async createProvider(): Promise<Provider> {\n    const config = await this.initConfig();\n\n    // Add correct claims to IdToken/AccessToken responses\n    this.configureClaims(config);\n\n    // Make sure routes are contained in the IDP space\n    this.configureRoutes(config);\n\n    // Render errors with our own error handler\n    this.configureErrors(config);\n\n    // Allow provider to interpret reverse proxy headers\n    const provider = new Provider(this.baseUrl, config);\n    provider.proxy = true;\n\n    this.captureErrorResponses(provider);\n\n    return provider;\n  }\n\n  /**\n   * In the `configureErrors` function below, we configure the `renderError` function of the provider configuration.\n   * This function is called by the OIDC provider library to render errors,\n   * but only does this if the accept header is HTML.\n   * Otherwise, it just returns the error object iself as a JSON object.\n   * See https://github.com/panva/node-oidc-provider/blob/0fcc112e0a95b3b2dae4eba6da812253277567c9/lib/shared/error_handler.js#L48-L52.\n   *\n   * In this function we override the `ctx.accepts` function\n   * to make the above code think HTML is always requested there.\n   * This way we have full control over error representation as configured in `configureErrors`.\n   * We still check the accept headers ourselves so there still is content negotiation on the output,\n   * the client will not simply always receive HTML.\n   *\n   * Should this part of the OIDC library code ever change, our function will break,\n   * at which point behaviour will simply revert to what it was before.\n   */\n  private captureErrorResponses(provider: Provider): void {\n    provider.use(async(ctx, next): Promise<void> => {\n      const accepts = ctx.accepts.bind(ctx);\n\n      // Using `any` typings to make sure we support all different versions of `ctx.accepts`\n      ctx.accepts = (...types: any[]): any => {\n        // Make sure we only override our specific case\n        if (types.length === 2 && types[0] === 'json' && types[1] === 'html') {\n          return 'html';\n        }\n        return accepts(...types);\n      };\n\n      return next();\n    });\n  }\n\n  /**\n   * Creates a configuration by copying the internal configuration\n   * and adding the adapter, default audience and jwks/cookie keys.\n   */\n  private async initConfig(): Promise<Configuration> {\n    // Create a deep copy\n    const config: Configuration = JSON.parse(JSON.stringify(this.config));\n\n    // Indicates which Adapter should be used for storing oidc data\n    // The adapter function MUST be a named function.\n    // See https://github.com/panva/node-oidc-provider/issues/799\n    const factory = this.adapterFactory;\n    config.adapter = function loadAdapter(name: string): Adapter {\n      return factory.createStorageAdapter(name);\n    };\n\n    // Cast necessary due to typing conflict between jose 2.x and 3.x\n    config.jwks = await this.generateJwks() as any;\n    config.cookies = {\n      ...config.cookies,\n      keys: await this.generateCookieKeys(),\n    };\n\n    // Solid OIDC requires pkce https://solid.github.io/solid-oidc/#concepts\n    config.pkce = {\n      methods: [ 'S256' ],\n      required: (): true => true,\n    };\n\n    // Default client settings that might not be defined.\n    // Mostly relevant for WebID clients.\n    config.clientDefaults = {\n      id_token_signed_response_alg: this.jwtAlg,\n    };\n\n    return config;\n  }\n\n  /**\n   * Generates a JWKS using a single JWK.\n   * The JWKS will be cached so subsequent calls return the same key.\n   */\n  private async generateJwks(): Promise<{ keys: JWK[] }> {\n    // Check to see if the keys are already saved\n    const jwks = await this.storage.get(JWKS_KEY) as { keys: JWK[] } | undefined;\n    if (jwks) {\n      return jwks;\n    }\n    // If they are not, generate and save them\n    const { privateKey } = await generateKeyPair(this.jwtAlg);\n    const jwk = await exportJWK(privateKey);\n    // Required for Solid authn client\n    jwk.alg = this.jwtAlg;\n    // In node v15.12.0 the JWKS does not get accepted because the JWK is not a plain object,\n    // which is why we convert it into a plain object here.\n    // Potentially this can be changed at a later point in time to `{ keys: [ jwk ]}`.\n    const newJwks = { keys: [{ ...jwk }]};\n    await this.storage.set(JWKS_KEY, newJwks);\n    return newJwks;\n  }\n\n  /**\n   * Generates a cookie secret to be used for cookie signing.\n   * The key will be cached so subsequent calls return the same key.\n   */\n  private async generateCookieKeys(): Promise<string[]> {\n    // Check to see if the keys are already saved\n    const cookieSecret = await this.storage.get(COOKIES_KEY);\n    if (Array.isArray(cookieSecret)) {\n      return cookieSecret;\n    }\n    // If they are not, generate and save them\n    const newCookieSecret = [ randomBytes(64).toString('hex') ];\n    await this.storage.set(COOKIES_KEY, newCookieSecret);\n    return newCookieSecret;\n  }\n\n  /**\n   * Checks if the given token is an access token.\n   * The AccessToken interface is not exported so we have to access it like this.\n   */\n  private isAccessToken(token: any): token is KoaContextWithOIDC['oidc']['accessToken'] {\n    return token.kind === 'AccessToken';\n  }\n\n  /**\n   * Adds the necessary claims the to id and access tokens based on the Solid OIDC spec.\n   */\n  private configureClaims(config: Configuration): void {\n    // Returns the id_token\n    // See https://solid.github.io/authentication-panel/solid-oidc/#tokens-id\n    // Some fields are still missing, see https://github.com/CommunitySolidServer/CommunitySolidServer/issues/1154#issuecomment-1040233385\n    config.findAccount = async(ctx: KoaContextWithOIDC, sub: string): Promise<Account> => ({\n      accountId: sub,\n      async claims(): Promise<{ sub: string; [key: string]: any }> {\n        return { sub, webid: sub, azp: ctx.oidc.client?.clientId };\n      },\n    });\n\n    // Add extra claims in case an AccessToken is being issued.\n    // Specifically this sets the required webid and client_id claims for the access token\n    // See https://solid.github.io/solid-oidc/#resource-access-validation\n    config.extraTokenClaims = async(ctx, token): Promise<UnknownObject> =>\n      this.isAccessToken(token) ?\n        { webid: token.accountId } :\n        { webid: token.client && (await this.credentialStorage.get(token.client.clientId))?.webId };\n\n    config.features = {\n      ...config.features,\n      resourceIndicators: {\n        defaultResource(): string {\n          // This value is irrelevant, but is necessary to trigger the `getResourceServerInfo` call below,\n          // where it will be an input parameter in case the client provided no value.\n          // Note that an empty string is not a valid value.\n          return 'http://example.com/';\n        },\n        enabled: true,\n        // This call is necessary to force the OIDC library to return a JWT access token.\n        // See https://github.com/panva/node-oidc-provider/discussions/959#discussioncomment-524757\n        getResourceServerInfo: (): ResourceServer => ({\n          // The scopes of the Resource Server.\n          // These get checked when requesting client credentials.\n          scope: 'webid',\n          audience: 'solid',\n          accessTokenFormat: 'jwt',\n          jwt: {\n            sign: { alg: this.jwtAlg },\n          },\n        }),\n      },\n    };\n  }\n\n  /**\n   * Creates the route string as required by the `oidc-provider` library.\n   * In case base URL is `http://test.com/foo/`, `oidcPath` is `/idp` and `relative` is `device/auth`,\n   * this would result in `/foo/idp/device/auth`.\n   */\n  private createRoute(relative: string): string {\n    return new URL(joinUrl(this.baseUrl, this.oidcPath, relative)).pathname;\n  }\n\n  /**\n   * Sets up all the IDP routes relative to the IDP path.\n   */\n  private configureRoutes(config: Configuration): void {\n    // When oidc-provider cannot fulfill the authorization request for any of the possible reasons\n    // (missing user session, requested ACR not fulfilled, prompt requested, ...)\n    // it will resolve the interactions.url helper function and redirect the User-Agent to that url.\n    // Another requirement is that `features.userinfo` is disabled in the configuration.\n    config.interactions = {\n      url: async(ctx, oidcInteraction): Promise<string> => {\n        const operation: Operation = {\n          method: ctx.method,\n          target: { path: ctx.request.href },\n          preferences: {},\n          body: new BasicRepresentation(),\n        };\n\n        // Instead of sending a 3xx redirect to the client (via a RedirectHttpError),\n        // we need to pass the location URL to the OIDC library\n        try {\n          await this.interactionHandler.handleSafe({ operation, oidcInteraction });\n        } catch (error: unknown) {\n          if (RedirectHttpError.isInstance(error)) {\n            return error.location;\n          }\n          throw error;\n        }\n        throw new InternalServerError('Could not correctly redirect for the given interaction.');\n      },\n    };\n\n    config.routes = {\n      authorization: this.createRoute('auth'),\n      backchannel_authentication: this.createRoute('backchannel'),\n      code_verification: this.createRoute('device'),\n      device_authorization: this.createRoute('device/auth'),\n      end_session: this.createRoute('session/end'),\n      introspection: this.createRoute('token/introspection'),\n      jwks: this.createRoute('jwks'),\n      pushed_authorization_request: this.createRoute('request'),\n      registration: this.createRoute('reg'),\n      revocation: this.createRoute('token/revocation'),\n      token: this.createRoute('token'),\n      userinfo: this.createRoute('me'),\n    };\n  }\n\n  /**\n   * Pipes library errors to the provided ErrorHandler and ResponseWriter.\n   */\n  private configureErrors(config: Configuration): void {\n    config.renderError = async(ctx: KoaContextWithOIDC, out: ErrorOut, error: errors.OIDCProviderError | Error):\n    Promise<void> => {\n      // This allows us to stream directly to the response object, see https://github.com/koajs/koa/issues/944\n      ctx.respond = false;\n\n      // Doesn't really matter which type it is since all relevant fields are optional\n      const oidcError = error as errors.OIDCProviderError;\n\n      let detailedError = error.message;\n      if (oidcError.error_description) {\n        detailedError += ` - ${oidcError.error_description}`;\n      }\n      if (oidcError.error_detail) {\n        detailedError += ` - ${oidcError.error_detail}`;\n      }\n\n      this.logger.warn(`OIDC request failed: ${detailedError}`);\n\n      // OIDC library hides extra details in these fields\n      if (this.showStackTrace) {\n        error.message = detailedError;\n\n        // Also change the error message in the stack trace\n        if (error.stack) {\n          error.stack = error.stack.replace(/.*/u, `${error.name}: ${error.message}`);\n        }\n      }\n\n      const result = await this.errorHandler.handleSafe({ error, request: guardStream(ctx.req) });\n      await this.responseWriter.handleSafe({ response: ctx.res, result });\n    };\n  }\n}\n"]}