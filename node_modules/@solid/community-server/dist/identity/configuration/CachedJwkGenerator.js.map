{"version":3,"file":"CachedJwkGenerator.js","sourceRoot":"","sources":["../../../src/identity/configuration/CachedJwkGenerator.ts"],"names":[],"mappings":";;;AAAA,mCAAyC;AAEzC,+BAA6D;AAK7D;;;;;;;GAOG;AACH,MAAa,kBAAkB;IAS7B,YAAmB,GAA+B,EAAE,UAAkB,EAAE,OAAwC;QAC9G,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,aAAa;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QAED,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;YACtB,OAAO,GAAG,CAAC;SACZ;QAED,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAA,sBAAe,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEvD,uDAAuD;QACvD,MAAM,UAAU,GAAG,EAAE,GAAG,MAAM,IAAA,gBAAS,EAAC,UAAU,CAAC,EAAY,CAAC;QAChE,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAE1B,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,OAAO,UAAU,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAE9C,oGAAoG;QACpG,6FAA6F;QAC7F,4CAA4C;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAA,gBAAS,EAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,IAAA,wBAAe,EAAC,UAAuB,CAAC,CAAC;QAE3D,MAAM,SAAS,GAAG,EAAE,GAAG,MAAM,IAAA,gBAAS,EAAC,SAAS,CAAC,EAAY,CAAC;QAC9D,gDAAgD;QAChD,SAAS,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QAE/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA1DD,gDA0DC","sourcesContent":["import { createPublicKey } from 'crypto';\nimport type { KeyObject } from 'crypto';\nimport { exportJWK, generateKeyPair, importJWK } from 'jose';\nimport type { AsymmetricSigningAlgorithm } from 'oidc-provider';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport type { AlgJwk, JwkGenerator } from './JwkGenerator';\n\n/**\n * Generates a key pair once and then caches it using both an internal variable a {@link KeyValueStorage}.\n * The storage makes sure the keys remain the same between server restarts,\n * while the internet variable makes it so the storage doesn't have to be accessed every time a key is needed.\n *\n * Only the private key is stored in the internal storage, using the `storageKey` parameter.\n * The public key is determined based on the private key and then also stored in memory.\n */\nexport class CachedJwkGenerator implements JwkGenerator {\n  public readonly alg: AsymmetricSigningAlgorithm;\n\n  private readonly key: string;\n  private readonly storage: KeyValueStorage<string, AlgJwk>;\n\n  private privateJwk?: AlgJwk;\n  private publicJwk?: AlgJwk;\n\n  public constructor(alg: AsymmetricSigningAlgorithm, storageKey: string, storage: KeyValueStorage<string, AlgJwk>) {\n    this.alg = alg;\n    this.key = storageKey;\n    this.storage = storage;\n  }\n\n  public async getPrivateKey(): Promise<AlgJwk> {\n    if (this.privateJwk) {\n      return this.privateJwk;\n    }\n\n    const jwk = await this.storage.get(this.key);\n    if (jwk) {\n      this.privateJwk = jwk;\n      return jwk;\n    }\n\n    const { privateKey } = await generateKeyPair(this.alg);\n\n    // Make sure the JWK is a plain node object for storage\n    const privateJwk = { ...await exportJWK(privateKey) } as AlgJwk;\n    privateJwk.alg = this.alg;\n\n    await this.storage.set(this.key, privateJwk);\n    this.privateJwk = privateJwk;\n    return privateJwk;\n  }\n\n  public async getPublicKey(): Promise<AlgJwk> {\n    if (this.publicJwk) {\n      return this.publicJwk;\n    }\n\n    const privateJwk = await this.getPrivateKey();\n\n    // The main reason we generate the public key from the private key is, so we don't have to store it.\n    // This allows our storage to not break previous versions where we only used the private key.\n    // In practice this results in the same key.\n    const privateKey = await importJWK(privateJwk);\n    const publicKey = createPublicKey(privateKey as KeyObject);\n\n    const publicJwk = { ...await exportJWK(publicKey) } as AlgJwk;\n    // These fields get lost during the above proces\n    publicJwk.alg = privateJwk.alg;\n\n    this.publicJwk = publicJwk;\n\n    return publicJwk;\n  }\n}\n"]}