{"version":3,"file":"JwkGenerator.js","sourceRoot":"","sources":["../../../src/identity/configuration/JwkGenerator.ts"],"names":[],"mappings":"","sourcesContent":["import type { JWK } from 'jose';\nimport type { AsymmetricSigningAlgorithm } from 'oidc-provider';\n\n/**\n * A {@link JWK} where the `alg` parameter is always defined.\n */\nexport interface AlgJwk extends JWK {\n  alg: AsymmetricSigningAlgorithm;\n}\n\n/**\n * Generates an asymmetric JWK.\n *\n * The functions always need to return the same value.\n */\nexport interface JwkGenerator {\n  /**\n   * The algorithm used for the keys.\n   */\n  readonly alg: AsymmetricSigningAlgorithm;\n\n  /**\n   * @returns The public key of the asymmetric JWK.\n   */\n  getPublicKey: () => Promise<AlgJwk>;\n\n  /**\n   * @returns The private key of the asymmetric JWK.\n   */\n  getPrivateKey: () => Promise<AlgJwk>;\n}\n"]}