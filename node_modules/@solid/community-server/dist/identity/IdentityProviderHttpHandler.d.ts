import type { ResponseDescription } from '../http/output/response/ResponseDescription';
import type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';
import { OperationHttpHandler } from '../server/OperationHttpHandler';
import type { RepresentationConverter } from '../storage/conversion/RepresentationConverter';
import type { ProviderFactory } from './configuration/ProviderFactory';
import type { InteractionHandler } from './interaction/InteractionHandler';
export interface IdentityProviderHttpHandlerArgs {
    /**
     * Used to generate the OIDC provider.
     */
    providerFactory: ProviderFactory;
    /**
     * Used for converting the input data.
     */
    converter: RepresentationConverter;
    /**
     * Handles the requests.
     */
    handler: InteractionHandler;
}
/**
 * Generates the active Interaction object if there is an ongoing OIDC interaction
 * and sends it to the {@link InteractionHandler}.
 *
 * Input data will first be converted to JSON.
 *
 * Only GET and POST methods are accepted.
 */
export declare class IdentityProviderHttpHandler extends OperationHttpHandler {
    protected readonly logger: import("..").Logger;
    private readonly providerFactory;
    private readonly converter;
    private readonly handler;
    constructor(args: IdentityProviderHttpHandlerArgs);
    handle({ operation, request, response }: OperationHttpHandlerInput): Promise<ResponseDescription>;
}
