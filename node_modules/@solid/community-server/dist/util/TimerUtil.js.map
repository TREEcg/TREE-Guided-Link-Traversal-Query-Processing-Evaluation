{"version":3,"file":"TimerUtil.js","sourceRoot":"","sources":["../../src/util/TimerUtil.ts"],"names":[],"mappings":";;;AACA,kDAAwD;AAExD;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,MAAc,EAAE,OAAe,EAAE,QAAoC,EAAE,EAAW,EAChH,GAAG,IAAW;IACd,KAAK,UAAU,YAAY,CAAC,GAAG,MAAa;QAC1C,IAAI;YACF,yEAAyE;YACzE,wDAAwD;YACxD,6DAA6D;YAC7D,OAAO,MAAM,QAAQ,CAAC,GAAG,MAAM,CAAC,CAAC;SAClC;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,CAAC,KAAK,CAAC,mCAAmC,OAAO,MAAM,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SAC3F;IACH,CAAC;IACD,OAAO,WAAW,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;AAChD,CAAC;AAbD,0CAaC","sourcesContent":["import type { Logger } from '../logging/Logger';\nimport { createErrorMessage } from './errors/ErrorUtil';\n\n/**\n * Wraps the callback for {@link setInterval} so errors get caught and logged.\n * Parameters are identical to the {@link setInterval} parameters starting from the 3rd argument.\n * The logger and message will be used when the callback throws an error.\n * Supports asynchronous callback functions.\n */\nexport function setSafeInterval(logger: Logger, message: string, callback: (...cbArgs: any[]) => void, ms?: number,\n  ...args: any[]): NodeJS.Timeout {\n  async function safeCallback(...cbArgs: any[]): Promise<void> {\n    try {\n      // We don't know if the callback is async or not so this way we make sure\n      // the full function execution is done in the try block.\n      // eslint-disable-next-line @typescript-eslint/await-thenable\n      return await callback(...cbArgs);\n    } catch (error: unknown) {\n      logger.error(`Error during interval callback: ${message} - ${createErrorMessage(error)}`);\n    }\n  }\n  return setInterval(safeCallback, ms, ...args);\n}\n"]}