{"version":3,"file":"BaseIdentifierStrategy.js","sourceRoot":"","sources":["../../../src/util/identifiers/BaseIdentifierStrategy.ts"],"names":[],"mappings":";;;AAAA,6BAA0B;AAE1B,uEAAoE;AACpE,0CAAyE;AAGzE;;;;;;;GAOG;AACH,MAAsB,sBAAsB;IAGnC,kBAAkB,CAAC,UAA8B;QACtD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YACxC,MAAM,IAAI,yCAAmB,CAAC,kBAAkB,UAAU,CAAC,IAAI,8CAA8C,EAC3G,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC;SAC9D;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE;YACpC,MAAM,IAAI,yCAAmB,CAAC,+BAA+B,UAAU,CAAC,IAAI,kCAAkC,CAAC,CAAC;SACjH;QAED,8CAA8C;QAC9C,MAAM,UAAU,GAAG,IAAI,SAAG,CAAC,IAAI,EAAE,IAAA,8BAAmB,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAE5E,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;IAIM,QAAQ,CAAC,SAA6B,EAAE,UAA8B,EAAE,UAAmB;QAChG,IAAI,CAAC,IAAA,gCAAqB,EAAC,SAAS,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,UAAU,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QAED,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1D,wFAAwF;QACxF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACF;AArCD,wDAqCC","sourcesContent":["import { URL } from 'url';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { InternalServerError } from '../errors/InternalServerError';\nimport { ensureTrailingSlash, isContainerIdentifier } from '../PathUtil';\nimport type { IdentifierStrategy } from './IdentifierStrategy';\n\n/**\n * Provides a default implementation for `getParentContainer`\n * which checks if the identifier is supported and not a root container.\n * If not, the last part before the first relevant slash will be removed to find the parent.\n *\n * Provides a default implementation for `contains`\n * which does standard slash-semantics based string comparison.\n */\nexport abstract class BaseIdentifierStrategy implements IdentifierStrategy {\n  public abstract supportsIdentifier(identifier: ResourceIdentifier): boolean;\n\n  public getParentContainer(identifier: ResourceIdentifier): ResourceIdentifier {\n    if (!this.supportsIdentifier(identifier)) {\n      throw new InternalServerError(`The identifier ${identifier.path} is outside the configured identifier space.`,\n        { errorCode: 'E0001', details: { path: identifier.path }});\n    }\n    if (this.isRootContainer(identifier)) {\n      throw new InternalServerError(`Cannot obtain the parent of ${identifier.path} because it is a root container.`);\n    }\n\n    // Trailing slash is necessary for URL library\n    const parentPath = new URL('..', ensureTrailingSlash(identifier.path)).href;\n\n    return { path: parentPath };\n  }\n\n  public abstract isRootContainer(identifier: ResourceIdentifier): boolean;\n\n  public contains(container: ResourceIdentifier, identifier: ResourceIdentifier, transitive: boolean): boolean {\n    if (!isContainerIdentifier(container)) {\n      return false;\n    }\n\n    if (!identifier.path.startsWith(container.path)) {\n      return false;\n    }\n\n    if (transitive) {\n      return true;\n    }\n\n    const tail = identifier.path.slice(container.path.length);\n    // If there is at least one `/` followed by a char this is not a direct parent container\n    return !/\\/./u.test(tail);\n  }\n}\n"]}