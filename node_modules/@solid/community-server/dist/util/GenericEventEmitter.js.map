{"version":3,"file":"GenericEventEmitter.js","sourceRoot":"","sources":["../../src/util/GenericEventEmitter.ts"],"names":[],"mappings":";;;AAAA,mCAAsC;AA4BtC;;;;GAIG;AACH,SAAgB,8BAA8B;IAC5C,OAAO,qBAAqC,CAAC;AAC/C,CAAC;AAFD,wEAEC","sourcesContent":["import { EventEmitter } from 'events';\n\n/**\n * A typed interface of {@link EventEmitter}.\n *\n * Use the `&` operator to combine multiple event/function pairs into a single event emitter.\n * The result needs to be a type and not an interface because of https://github.com/microsoft/TypeScript/issues/16936.\n *\n * Use the {@link createGenericEventEmitterClass} function to generate an event emitter class with the correct typings\n * in case {@link EventEmitter} needs to be extended.\n */\nexport interface GenericEventEmitter<TEvent extends string | symbol, TFunc extends (...args: any[]) => void>\n  extends EventEmitter {\n  addListener: (event: TEvent, listener: TFunc) => this;\n  on: (event: TEvent, listener: TFunc) => this;\n  once: (event: TEvent, listener: TFunc) => this;\n  removeListener: (event: TEvent, listener: TFunc) => this;\n  off: (event: TEvent, listener: TFunc) => this;\n  removeAllListeners: (event: TEvent) => this;\n  listeners: (event: TEvent) => TFunc[];\n  rawListeners: (event: TEvent) => TFunc[];\n  emit: (event: TEvent, ...args: Parameters<TFunc>) => boolean;\n  listenerCount: (event: TEvent) => number;\n  prependListener: (event: TEvent, listener: TFunc) => this;\n  prependOnceListener: (event: TEvent, listener: TFunc) => this;\n  eventNames: () => TEvent[];\n}\n\n/**\n * Creates a class that is an implementation of {@link EventEmitter}\n * but with specific typings based on {@link GenericEventEmitter}.\n * Useful in case a class needs to extend {@link EventEmitter} and wants specific internal typings.\n */\nexport function createGenericEventEmitterClass<T extends EventEmitter>(): (new() => T) {\n  return EventEmitter as unknown as new() => T;\n}\n"]}