{"version":3,"file":"ArrayUnionHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/ArrayUnionHandler.ts"],"names":[],"mappings":";;;AACA,iDAA8C;AAE9C;;GAEG;AACH,MAAa,iBAAsD,SAAQ,2BAAe;IACxF,YAAmB,QAAa,EAAE,UAAoB,EAAE,YAAsB;QAC5E,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IAC5C,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,OAAgC;QACtD,OAAO,OAAO,CAAC,IAAI,EAA2B,CAAC;IACjD,CAAC;CACF;AARD,8CAQC","sourcesContent":["import type { AsyncHandler, AsyncHandlerOutput } from './AsyncHandler';\nimport { UnionHandler } from './UnionHandler';\n\n/**\n * A utility handler that concatenates the results of all its handlers into a single result.\n */\nexport class ArrayUnionHandler<T extends AsyncHandler<any, any[]>> extends UnionHandler<T> {\n  public constructor(handlers: T[], requireAll?: boolean, ignoreErrors?: boolean) {\n    super(handlers, requireAll, ignoreErrors);\n  }\n\n  protected async combine(results: AsyncHandlerOutput<T>[]): Promise<AsyncHandlerOutput<T>> {\n    return results.flat() as AsyncHandlerOutput<T>;\n  }\n}\n"]}