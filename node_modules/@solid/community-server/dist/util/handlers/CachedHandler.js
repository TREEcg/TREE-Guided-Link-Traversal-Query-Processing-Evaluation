"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedHandler = void 0;
const AsyncHandler_1 = require("./AsyncHandler");
/**
 * Caches output data from the source handler based on the input object.
 * The `field` parameter can be used to instead use a specific entry from the input object as cache key,
 * so has as actual required typing `keyof TIn`.
 *
 * A {@link WeakMap} is used internally so strict object equality determines cache hits,
 * and data will be removed once the key stops existing.
 * This also means that the cache key needs to be an object.
 * Errors will be thrown in case a primitve is used.
 */
class CachedHandler extends AsyncHandler_1.AsyncHandler {
    constructor(source, field) {
        super();
        this.source = source;
        this.field = field;
        this.cache = new WeakMap();
    }
    async canHandle(input) {
        const key = this.getKey(input);
        if (this.cache.has(key)) {
            return;
        }
        return this.source.canHandle(input);
    }
    async handle(input) {
        const key = this.getKey(input);
        let result = this.cache.get(key);
        if (result) {
            return result;
        }
        result = await this.source.handle(input);
        this.cache.set(key, result);
        return result;
    }
    getKey(input) {
        return this.field ? input[this.field] : input;
    }
}
exports.CachedHandler = CachedHandler;
//# sourceMappingURL=CachedHandler.js.map