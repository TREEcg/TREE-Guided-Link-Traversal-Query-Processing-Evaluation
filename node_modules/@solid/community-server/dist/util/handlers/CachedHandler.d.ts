import { AsyncHandler } from './AsyncHandler';
/**
 * Caches output data from the source handler based on the input object.
 * The `field` parameter can be used to instead use a specific entry from the input object as cache key,
 * so has as actual required typing `keyof TIn`.
 *
 * A {@link WeakMap} is used internally so strict object equality determines cache hits,
 * and data will be removed once the key stops existing.
 * This also means that the cache key needs to be an object.
 * Errors will be thrown in case a primitve is used.
 */
export declare class CachedHandler<TIn, TOut = void> extends AsyncHandler<TIn, TOut> {
    private readonly source;
    private readonly field?;
    private readonly cache;
    constructor(source: AsyncHandler<TIn, TOut>, field?: string);
    canHandle(input: TIn): Promise<void>;
    handle(input: TIn): Promise<TOut>;
    protected getKey(input: TIn): any;
}
