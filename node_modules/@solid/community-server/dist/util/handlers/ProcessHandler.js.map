{"version":3,"file":"ProcessHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/ProcessHandler.ts"],"names":[],"mappings":";;;AACA,+EAA4E;AAC5E,iDAA8C;AAE9C;;;;GAIG;AACH,MAAa,cAA0B,SAAQ,2BAAuB;IAKpE;;;;;OAKG;IACH,YAAmB,MAA+B,EAAE,cAA8B,EAAE,gBAAyB;QAC3G,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,MAAM,IAAI,iDAAuB,CAAC,uBAAuB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,WAAW,CAAC,CAAC;SACnH;QACD,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAU;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,UAAU;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE;YAC5C,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC9F,CAAC;CACF;AApCD,wCAoCC","sourcesContent":["import type { ClusterManager } from '../../init/cluster/ClusterManager';\nimport { NotImplementedHttpError } from '../errors/NotImplementedHttpError';\nimport { AsyncHandler } from './AsyncHandler';\n\n/**\n * A wrapper handler that will only run the wrapped handler if it is executed from:\n * * when running multithreaded: either the **primary** or a **worker process**\n * * when running singlethreaded: **the only process** (i.e. always)\n */\nexport class ProcessHandler<TIn, TOut> extends AsyncHandler<TIn, TOut> {\n  private readonly clusterManager: ClusterManager;\n  private readonly source: AsyncHandler<TIn, TOut>;\n  private readonly executeOnPrimary: boolean;\n\n  /**\n   * Creates a new ProcessHandler\n   * @param source - The wrapped handler\n   * @param clusterManager - The ClusterManager in use\n   * @param executeOnPrimary - Whether to execute the source handler when the process is the _primary_ or a _worker_.\n   */\n  public constructor(source: AsyncHandler<TIn, TOut>, clusterManager: ClusterManager, executeOnPrimary: boolean) {\n    super();\n    this.source = source;\n    this.clusterManager = clusterManager;\n    this.executeOnPrimary = executeOnPrimary;\n  }\n\n  public async canHandle(input: TIn): Promise<void> {\n    if (!this.canExecute()) {\n      throw new NotImplementedHttpError(`Will not execute on ${this.executeOnPrimary ? 'worker' : 'primary'} process.`);\n    }\n    await this.source.canHandle(input);\n  }\n\n  public async handle(input: TIn): Promise<TOut> {\n    return this.source.handle(input);\n  }\n\n  /**\n   * Checks if the condition has already been fulfilled.\n   */\n  private canExecute(): boolean {\n    return this.clusterManager.isSingleThreaded() ||\n     (this.executeOnPrimary ? this.clusterManager.isPrimary() : this.clusterManager.isWorker());\n  }\n}\n"]}