{"version":3,"file":"FetchUtil.js","sourceRoot":"","sources":["../../src/util/FetchUtil.ts"],"names":[],"mappings":";;;;;;AACA,sEAA6C;AAE7C,sEAA8C;AAC9C,oFAAiF;AAEjF,gDAAkD;AAElD,iDAAgD;AAChD,sEAAmE;AACnE,kDAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,sBAAY,EAAC,WAAW,CAAC,CAAC;AAEzC;;;;GAIG;AACI,KAAK,UAAU,YAAY,CAAC,GAAW;IAC5C,sDAAsD;IACtD,OAAO,CAAC,KAAK,IAA4B,EAAE;QACzC,IAAI;YACF,MAAM,UAAU,GAAG,CAAC,MAAM,yBAAe,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;YACjE,MAAM,SAAS,GAAG,MAAM,IAAA,yBAAc,EAAO,UAAU,CAAC,CAAC;YACzD,OAAO,IAAI,yCAAmB,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,6BAAc,EAAE,KAAK,CAAC,CAAC;SACjF;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,IAAI,yCAAmB,CAAC,oCAAoC,GAAG,MAAM,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACzG;IACH,CAAC,CAAC,EAAE,CAAC;AACP,CAAC;AAXD,oCAWC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,iBAAiB,CAAC,QAAkB,EAAE,SAAkC,EAAE,IAAa;IAE3G,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAED,wGAAwG;IACxG,MAAM,KAAK,GAAG,IAAI,yCAAmB,CAAC,4BAA4B,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;IAElF,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,CAAC,IAAI,CAAC,gBAAgB,QAAQ,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC,CAAC;QACrD,MAAM,KAAK,CAAC;KACb;IAED,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACzD,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,CAAC,IAAI,CAAC,oCAAoC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,MAAM,KAAK,CAAC;KACb;IAED,0BAA0B;IAC1B,MAAM,cAAc,GAAG,IAAI,yCAAmB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAClE,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,6BAAc,CAAC,EAAE,CAAC,EAAE,EAAC,CAAC;IACrD,OAAO,SAAS,CAAC,UAAU,CAAC,EAAE,cAAc,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;AACnG,CAAC;AAxBD,8CAwBC","sourcesContent":["import type { Quad } from '@rdfjs/types';\nimport arrayifyStream from 'arrayify-stream';\nimport type { Response } from 'cross-fetch';\nimport rdfDereferencer from 'rdf-dereference';\nimport { BasicRepresentation } from '../http/representation/BasicRepresentation';\nimport type { Representation } from '../http/representation/Representation';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { RepresentationConverter } from '../storage/conversion/RepresentationConverter';\nimport { INTERNAL_QUADS } from './ContentTypes';\nimport { BadRequestHttpError } from './errors/BadRequestHttpError';\nimport { createErrorMessage } from './errors/ErrorUtil';\n\nconst logger = getLoggerFor('FetchUtil');\n\n/**\n * Fetches an RDF dataset from the given URL.\n *\n * Response will be a Representation with content-type internal/quads.\n */\nexport async function fetchDataset(url: string): Promise<Representation> {\n  // Try content negotiation to parse quads from the URL\n  return (async(): Promise<Representation> => {\n    try {\n      const quadStream = (await rdfDereferencer.dereference(url)).data;\n      const quadArray = await arrayifyStream<Quad>(quadStream);\n      return new BasicRepresentation(quadArray, { path: url }, INTERNAL_QUADS, false);\n    } catch (error: unknown) {\n      throw new BadRequestHttpError(`Could not parse resource at URL (${url})! ${createErrorMessage(error)}`);\n    }\n  })();\n}\n\n/**\n * Converts a given Response (from a request that was already made) to  an RDF dataset.\n * In case the given Response object was already parsed its body can be passed along as a string.\n *\n * The converter will be used to convert the response body to RDF.\n *\n * Response will be a Representation with content-type internal/quads.\n */\nexport async function responseToDataset(response: Response, converter: RepresentationConverter, body?: string):\nPromise<Representation> {\n  if (!body) {\n    body = await response.text();\n  }\n\n  // Keeping the error message the same everywhere to prevent leaking possible information about intranet.\n  const error = new BadRequestHttpError(`Unable to access data at ${response.url}`);\n\n  if (response.status !== 200) {\n    logger.warn(`Cannot fetch ${response.url}: ${body}`);\n    throw error;\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (!contentType) {\n    logger.warn(`Missing content-type header from ${response.url}`);\n    throw error;\n  }\n\n  // Try to convert to quads\n  const representation = new BasicRepresentation(body, contentType);\n  const preferences = { type: { [INTERNAL_QUADS]: 1 }};\n  return converter.handleSafe({ representation, identifier: { path: response.url }, preferences });\n}\n"]}