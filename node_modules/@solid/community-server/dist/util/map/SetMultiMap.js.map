{"version":3,"file":"SetMultiMap.js","sourceRoot":"","sources":["../../../src/util/map/SetMultiMap.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A SetMultiMap is a Map where a single key can have multiple unique values.\n * Deleting a key removes all bindings with this key from the Map.\n * Setting a value for a key replaces all previous bindings with this key.\n * Using an empty Set when calling the `set` function is the same as deleting that key.\n */\nexport interface SetMultiMap<TKey, TVal> extends Map<TKey, TVal | ReadonlySet<TVal>> {\n  /**\n   * Returns all values stored for the given key.\n   * Returns `undefined` if there are no values for this key.\n   */\n  get: (key: TKey) => ReadonlySet<TVal> | undefined;\n  /**\n   * Returns true if this key/value binding exists in the Map.\n   */\n  hasEntry: (key: TKey, value: TVal) => boolean;\n  /**\n   * Adds the given key/value binding to the Map.\n   */\n  add: (key: TKey, value: TVal | ReadonlySet<TVal>) => this;\n  /**\n   * Deletes the given key/value binding from the Map.\n   */\n  deleteEntry: (key: TKey, value: TVal) => boolean;\n\n  /**\n   * Returns a Readonly {@link Map} representation of this Map.\n   */\n  asMap: () => ReadonlyMap<TKey, ReadonlySet<TVal>>;\n\n  /**\n   * Iterates over all key/value bindings in this Map.\n   */\n  [Symbol.iterator]: () => IterableIterator<[TKey, TVal]>;\n  /**\n   * Iterates over all key/value bindings in this Map.\n   */\n  entries: () => IterableIterator<[TKey, TVal]>;\n  /**\n   * Iterates over all distinct keys in this Map, together with a {@link Set} of their values.\n   */\n  entrySets: () => IterableIterator<[TKey, ReadonlySet<TVal>]>;\n  /**\n   * Iterates over all distinct keys in this Map.\n   */\n  distinctKeys: () => IterableIterator<TKey>;\n  /**\n   * Iterates over all values in this Map.\n   */\n  values: () => IterableIterator<TVal>;\n  /**\n   * Iterates over all distinct keys and returns their {@link Set} of values.\n   */\n  valueSets: () => IterableIterator<ReadonlySet<TVal>>;\n  /**\n   * Loops over all key/value bindings.\n   */\n  forEach: (callbackfn: (value: TVal, key: TKey, map: SetMultiMap<TKey, TVal>) => void, thisArg?: any) => void;\n}\n"]}