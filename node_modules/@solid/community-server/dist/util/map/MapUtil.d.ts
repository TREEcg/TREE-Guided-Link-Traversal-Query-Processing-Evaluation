import type { SetMultiMap } from './SetMultiMap';
export declare type MapKey<T> = T extends Map<infer TKey, any> ? TKey : never;
export declare type MapValue<T> = T extends Map<any, infer TValue> ? TValue : never;
export declare type MapEntry<T> = T extends Map<any, any> ? [MapKey<T>, MapValue<T>] : never;
/**
 * A simplified version of {@link MapConstructor} that only allows creating an empty {@link Map}.
 */
export declare type EmptyMapConstructor = new () => Map<any, any>;
/**
 * Options describing the necessary changes when calling {@link modify}.
 */
export declare type ModifyOptions<T extends SetMultiMap<any, any>> = {
    /**
     * Entries that need to be added to the Map.
     */
    add?: Iterable<MapEntry<T>>;
    /**
     * Keys that need to be removed from the Map.
     */
    remove?: Iterable<MapKey<T>>;
};
/**
 * Modifies a {@link SetMultiMap} in place by removing and adding the requested entries.
 * Removals happen before additions.
 *
 * @param map - Map to start from.
 * @param options - {@link ModifyOptions} describing the necessary changes.
 */
export declare function modify<T extends SetMultiMap<any, any>>(map: T, options: ModifyOptions<T>): T;
/**
 * Finds the result of calling `map.get(key)`.
 * If there is no result, it instead returns the default value.
 * The Map will also be updated to assign that default value to the given key.
 *
 * @param map - Map to use.
 * @param key - Key to find the value for.
 * @param defaultValue - Value to insert and return if no result was found.
 */
export declare function getDefault<TKey, TValue>(map: Map<TKey, TValue>, key: TKey, defaultValue: TValue): TValue;
