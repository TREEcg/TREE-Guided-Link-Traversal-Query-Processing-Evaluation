{"version":3,"file":"HashMap.js","sourceRoot":"","sources":["../../../src/util/map/HashMap.ts"],"names":[],"mappings":";;;;AAAA,kDAAsC;AAItC;;;GAGG;AACH,MAAa,OAAO;IAIlB,YAAmB,MAA6B,EAAE,QAA0C;QAgE5E,QAAoB,GAAG,SAAS,CAAC;QA/D/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,IAAA,kBAAG,EAAC,QAAQ,EAAE,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAA+B,EAAE,CACnF,CAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;SACzC;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;SAC1B;IACH,CAAC;IAEM,GAAG,CAAC,GAAS;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEM,GAAG,CAAC,GAAS;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACnD,CAAC;IAEM,GAAG,CAAC,GAAS,EAAE,KAAW;QAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,GAAS;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEK,CAAE,OAAO;QACb,KAAK,MAAM,CAAE,AAAD,EAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9C,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,CAAC;SACtB;IACH,CAAC;IAEK,CAAE,IAAI;QACV,KAAK,MAAM,CAAE,AAAD,EAAG,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACvC,MAAM,GAAG,CAAC;SACX;IACH,CAAC;IAEK,CAAE,MAAM;QACZ,KAAK,MAAM,CAAE,AAAD,EAAG,EAAE,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,OAAO,CAAC,UAAkE,EAAE,OAAa;QAC9F,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,IAAI,EAAE;YACjC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC3B,CAAC;CAGF;AArED,0BAqEC;KADkB,MAAM,CAAC,WAAW","sourcesContent":["import { map } from '../IterableUtil';\n\ntype Entry<TKey, TVal> = { key: TKey; value: TVal };\n\n/**\n * A {@link Map} implementation that maps the Key object to a string using the provided hash function.\n * This ensures that equal objects that are not the same instance are mapped to the same value.\n */\nexport class HashMap<TKey = any, TVal = any> implements Map<TKey, TVal> {\n  private readonly hashMap: Map<string, Entry<TKey, TVal>>;\n  private readonly hashFn: (key: TKey) => string;\n\n  public constructor(hashFn: (key: TKey) => string, iterable?: Iterable<readonly [TKey, TVal]>) {\n    this.hashFn = hashFn;\n\n    if (iterable) {\n      this.hashMap = new Map(map(iterable, ([ key, value ]): [string, Entry<TKey, TVal>] =>\n        [ this.hashFn(key), { key, value }]));\n    } else {\n      this.hashMap = new Map();\n    }\n  }\n\n  public has(key: TKey): boolean {\n    return this.hashMap.has(this.hashFn(key));\n  }\n\n  public get(key: TKey): TVal | undefined {\n    return this.hashMap.get(this.hashFn(key))?.value;\n  }\n\n  public set(key: TKey, value: TVal): this {\n    this.hashMap.set(this.hashFn(key), { key, value });\n    return this;\n  }\n\n  public delete(key: TKey): boolean {\n    return this.hashMap.delete(this.hashFn(key));\n  }\n\n  public clear(): void {\n    this.hashMap.clear();\n  }\n\n  public [Symbol.iterator](): IterableIterator<[TKey, TVal]> {\n    return this.entries();\n  }\n\n  public* entries(): IterableIterator<[TKey, TVal]> {\n    for (const [ , { key, value }] of this.hashMap) {\n      yield [ key, value ];\n    }\n  }\n\n  public* keys(): IterableIterator<TKey> {\n    for (const [ , { key }] of this.hashMap) {\n      yield key;\n    }\n  }\n\n  public* values(): IterableIterator<TVal> {\n    for (const [ , { value }] of this.hashMap) {\n      yield value;\n    }\n  }\n\n  public forEach(callbackfn: (value: TVal, key: TKey, map: Map<TKey, TVal>) => void, thisArg?: any): void {\n    for (const [ key, value ] of this) {\n      callbackfn.bind(thisArg)(value, key, this);\n    }\n  }\n\n  public get size(): number {\n    return this.hashMap.size;\n  }\n\n  public readonly [Symbol.toStringTag] = 'HashMap';\n}\n"]}