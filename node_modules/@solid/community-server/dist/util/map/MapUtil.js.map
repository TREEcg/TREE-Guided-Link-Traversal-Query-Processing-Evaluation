{"version":3,"file":"MapUtil.js","sourceRoot":"","sources":["../../../src/util/map/MapUtil.ts"],"names":[],"mappings":";;;AAyBA;;;;;;GAMG;AACH,SAAgB,MAAM,CAAkC,GAAM,EAAE,OAAyB;IACvF,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE;QACtC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACjB;IACD,KAAK,MAAM,CAAE,GAAG,EAAE,GAAG,CAAE,IAAI,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE;QAC5C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KACnB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AARD,wBAQC;AAED;;;;;;;;GAQG;AACH,SAAgB,UAAU,CAAe,GAAsB,EAAE,GAAS,EAAE,YAAoB;IAC9F,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,KAAK,EAAE;QACT,OAAO,KAAK,CAAC;KACd;IACD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAC3B,OAAO,YAAY,CAAC;AACtB,CAAC;AAPD,gCAOC","sourcesContent":["import type { SetMultiMap } from './SetMultiMap';\n\nexport type MapKey<T> = T extends Map<infer TKey, any> ? TKey : never;\nexport type MapValue<T> = T extends Map<any, infer TValue> ? TValue : never;\nexport type MapEntry<T> = T extends Map<any, any> ? [MapKey<T>, MapValue<T>] : never;\n\n/**\n * A simplified version of {@link MapConstructor} that only allows creating an empty {@link Map}.\n */\nexport type EmptyMapConstructor = new() => Map<any, any>;\n\n/**\n * Options describing the necessary changes when calling {@link modify}.\n */\nexport type ModifyOptions<T extends SetMultiMap<any, any>> = {\n  /**\n   * Entries that need to be added to the Map.\n   */\n  add?: Iterable<MapEntry<T>>;\n  /**\n   * Keys that need to be removed from the Map.\n   */\n  remove?: Iterable<MapKey<T>>;\n};\n\n/**\n * Modifies a {@link SetMultiMap} in place by removing and adding the requested entries.\n * Removals happen before additions.\n *\n * @param map - Map to start from.\n * @param options - {@link ModifyOptions} describing the necessary changes.\n */\nexport function modify<T extends SetMultiMap<any, any>>(map: T, options: ModifyOptions<T>): T {\n  for (const key of options.remove ?? []) {\n    map.delete(key);\n  }\n  for (const [ key, val ] of options.add ?? []) {\n    map.add(key, val);\n  }\n  return map;\n}\n\n/**\n * Finds the result of calling `map.get(key)`.\n * If there is no result, it instead returns the default value.\n * The Map will also be updated to assign that default value to the given key.\n *\n * @param map - Map to use.\n * @param key - Key to find the value for.\n * @param defaultValue - Value to insert and return if no result was found.\n */\nexport function getDefault<TKey, TValue>(map: Map<TKey, TValue>, key: TKey, defaultValue: TValue): TValue {\n  const value = map.get(key);\n  if (value) {\n    return value;\n  }\n  map.set(key, defaultValue);\n  return defaultValue;\n}\n"]}