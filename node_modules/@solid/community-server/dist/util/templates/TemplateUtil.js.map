{"version":3,"file":"TemplateUtil.js","sourceRoot":"","sources":["../../../src/util/templates/TemplateUtil.ts"],"names":[],"mappings":";;;AAAA,2BAA4C;AAC5C,0CAA6D;AAG7D;;;GAGG;AACH,SAAgB,mBAAmB,CAAC,QAAmB;IACrD,6CAA6C;IAC7C,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAO,mBAAmB,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;KACxD;IACD,mEAAmE;IACnE,IAAI,CAAC,QAAQ,IAAI,gBAAgB,IAAI,QAAQ,EAAE;QAC7C,OAAO;KACR;IACD,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAC;IAChD,MAAM,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,IAAA,uBAAY,EAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAChG,OAAO,IAAA,2BAAgB,EAAC,gBAAgB,CAAC,CAAC;AAC5C,CAAC;AAZD,kDAYC;AAED;;GAEG;AACI,KAAK,UAAU,YAAY,CAAC,WAAqB,EAAE,cAAc,EAAE,EAAE,EAAE;IAC5E,kDAAkD;IAClD,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,gBAAgB,IAAI,QAAQ,EAAE;QAChE,OAAO,QAAQ,CAAC,cAAc,CAAC;KAChC;IACD,0CAA0C;IAC1C,OAAO,aAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAE,EAAE,MAAM,CAAC,CAAC;AACrE,CAAC;AAPD,oCAOC","sourcesContent":["import { promises as fsPromises } from 'fs';\nimport { joinFilePath, resolveAssetPath } from '../PathUtil';\nimport type { Template } from './TemplateEngine';\n\n/**\n * Returns the absolute path to the template.\n * Returns undefined if the input does not contain a file path.\n */\nexport function getTemplateFilePath(template?: Template): string | undefined {\n  // The template has been passed as a filename\n  if (typeof template === 'string') {\n    return getTemplateFilePath({ templateFile: template });\n  }\n  // The template has already been given as a string so no known path\n  if (!template || 'templateString' in template) {\n    return;\n  }\n  const { templateFile, templatePath } = template;\n  const fullTemplatePath = templatePath ? joinFilePath(templatePath, templateFile) : templateFile;\n  return resolveAssetPath(fullTemplatePath);\n}\n\n/**\n * Reads the template and returns it as a string.\n */\nexport async function readTemplate(template: Template = { templateString: '' }): Promise<string> {\n  // The template has already been given as a string\n  if (typeof template === 'object' && 'templateString' in template) {\n    return template.templateString;\n  }\n  // The template needs to be read from disk\n  return fsPromises.readFile(getTemplateFilePath(template)!, 'utf8');\n}\n"]}