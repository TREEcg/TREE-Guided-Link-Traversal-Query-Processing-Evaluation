{"version":3,"file":"StaticTemplateEngine.js","sourceRoot":"","sources":["../../../src/util/templates/StaticTemplateEngine.ts"],"names":[],"mappings":";;;AAEA,qDAAkD;AAGlD;;GAEG;AACH,MAAa,oBAAsD,SAAQ,+BAAiB;IAI1F;;;;;OAKG;IACH,YAAmB,cAA4D,EAAE,QAAkB;QACjG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAA0B;QACnE,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,kEAAkE;gBAC9E,iDAAiD,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,EAA0B;QACtD,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3E,CAAC;CACF;AA3BD,oDA2BC","sourcesContent":["import type { AsyncHandler } from '../handlers/AsyncHandler';\nimport type { TemplateEngineInput, Template } from './TemplateEngine';\nimport { TemplateEngine } from './TemplateEngine';\nimport Dict = NodeJS.Dict;\n\n/**\n * Template engine that renders output based on a static template file.\n */\nexport class StaticTemplateEngine<T extends Dict<any> = Dict<any>> extends TemplateEngine<T> {\n  private readonly template: Template;\n  private readonly templateEngine: AsyncHandler<TemplateEngineInput<T>, string>;\n\n  /**\n   * Creates a new StaticTemplateEngine.\n   *\n   * @param templateEngine - The template engine that should be used for processing the template.\n   * @param template - The static template to be used.\n   */\n  public constructor(templateEngine: AsyncHandler<TemplateEngineInput<T>, string>, template: Template) {\n    super();\n    this.template = template;\n    this.templateEngine = templateEngine;\n  }\n\n  public async canHandle({ contents, template }: TemplateEngineInput<T>): Promise<void> {\n    if (typeof template !== 'undefined') {\n      throw new Error('StaticTemplateEngine does not support template as handle input, ' +\n          'provide a template via the constructor instead!');\n    }\n    return this.templateEngine.canHandle({ contents, template: this.template });\n  }\n\n  public async handle({ contents }: TemplateEngineInput<T>): Promise<string> {\n    return this.templateEngine.handle({ contents, template: this.template });\n  }\n}\n"]}