{"version":3,"file":"ExtensionBasedTemplateEngine.js","sourceRoot":"","sources":["../../../src/util/templates/ExtensionBasedTemplateEngine.ts"],"names":[],"mappings":";;;AAAA,+EAA4E;AAC5E,0CAA2C;AAE3C,qDAAkD;AAClD,iDAAqD;AAGrD;;GAEG;AACH,MAAsB,4BAA8D,SAAQ,+BAAiB;IAG3G;;;;OAIG;IACH,YAAsB,mBAA6B;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAA0B;QACzD,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,MAAM,IAAI,iDAAuB,CAAC,2BAA2B,CAAC,CAAC;SAChE;QACD,uDAAuD;QACvD,MAAM,QAAQ,GAAG,IAAA,kCAAmB,EAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAA,uBAAY,EAAC,QAAQ,CAAC,CAAC,EAAE;YACjG,MAAM,IAAI,iDAAuB,CAAC,yCAAyC,CAAC,CAAC;SAC9E;IACH,CAAC;CACF;AAvBD,oEAuBC","sourcesContent":["import { NotImplementedHttpError } from '../errors/NotImplementedHttpError';\nimport { getExtension } from '../PathUtil';\nimport type { TemplateEngineInput } from './TemplateEngine';\nimport { TemplateEngine } from './TemplateEngine';\nimport { getTemplateFilePath } from './TemplateUtil';\nimport Dict = NodeJS.Dict;\n\n/**\n * Parent class for template engines that accept handling based on whether the template extension is supported.\n */\nexport abstract class ExtensionBasedTemplateEngine<T extends Dict<any> = Dict<any>> extends TemplateEngine<T> {\n  protected readonly supportedExtensions: string[];\n\n  /**\n   * Constructor for ExtensionBasedTemplateEngine.\n   *\n   * @param supportedExtensions - Array of the extensions supported by the template engine (e.g. [ 'ejs' ]).\n   */\n  protected constructor(supportedExtensions: string[]) {\n    super();\n    this.supportedExtensions = supportedExtensions;\n  }\n\n  public async canHandle({ template }: TemplateEngineInput<T>): Promise<void> {\n    if (typeof template === 'undefined') {\n      throw new NotImplementedHttpError('No template was provided.');\n    }\n    // Check if the target template extension is supported.\n    const filepath = getTemplateFilePath(template);\n    if (typeof filepath === 'undefined' || !this.supportedExtensions.includes(getExtension(filepath))) {\n      throw new NotImplementedHttpError('The provided template is not supported.');\n    }\n  }\n}\n"]}