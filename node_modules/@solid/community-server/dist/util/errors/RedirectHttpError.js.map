{"version":3,"file":"RedirectHttpError.js","sourceRoot":"","sources":["../../../src/util/errors/RedirectHttpError.ts"],"names":[],"mappings":";;;AACA,2CAAgE;AAEhE;;;GAGG;AACH,MAAa,iBAAiD,SAAQ,qBAAgB;IAGpF,YAAmB,UAAiB,EAAE,IAAY,EAAE,QAAgB,EAAE,OAAgB,EAAE,OAA0B;QAChH,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,KAAU;QACjC,OAAO,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,OAAQ,KAAa,CAAC,QAAQ,KAAK,QAAQ,CAAC;IACpF,CAAC;CACF;AAXD,8CAWC;AAUD;;;;GAIG;AACH,SAAgB,8BAA8B,CAC5C,IAAW,EACX,IAAY;IAEZ,gEAAgE;IAChE,MAAM,SAAS,GAAG,IAAA,kCAAsB,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAErD,gGAAgG;IAChG,OAAO,MAAM,yBAA0B,SAAQ,SAAS;QAGtD,YAAmB,QAAgB,EAAE,OAAgB,EAAE,OAA0B;YAC/E,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3B,CAAC;QAEM,MAAM,CAAC,UAAU,CAAC,KAAU;YACjC,OAAO,iBAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,KAAK,IAAI,CAAC;QAC1E,CAAC;KACF,CAAC;AACJ,CAAC;AApBD,wEAoBC","sourcesContent":["import type { HttpErrorClass, HttpErrorOptions } from './HttpError';\nimport { generateHttpErrorClass, HttpError } from './HttpError';\n\n/**\n * An error corresponding to a 3xx status code.\n * Includes the location it redirects to.\n */\nexport class RedirectHttpError<TCode extends number = number> extends HttpError<TCode> {\n  public readonly location: string;\n\n  public constructor(statusCode: TCode, name: string, location: string, message?: string, options?: HttpErrorOptions) {\n    super(statusCode, name, message, options);\n    this.location = location;\n  }\n\n  public static isInstance(error: any): error is RedirectHttpError {\n    return HttpError.isInstance(error) && typeof (error as any).location === 'string';\n  }\n}\n\n/**\n * Interface describing what a {@link RedirectHttpError} class should look like.\n * Makes sure a `location` value is always needed.\n */\nexport interface RedirectHttpErrorClass<TCode extends number = number> extends Omit<HttpErrorClass<TCode>, 'new'> {\n  new(location: string, message?: string, options?: HttpErrorOptions): RedirectHttpError<TCode>;\n}\n\n/**\n * Generates a {@link RedirectHttpErrorClass}, similar to how {@link generateHttpErrorClass} works.\n * The difference is that here a `location` field also gets set and the `getInstance` method\n * also uses the {@link RedirectHttpError.isInstance} function.\n */\nexport function generateRedirectHttpErrorClass<TCode extends number>(\n  code: TCode,\n  name: string,\n): RedirectHttpErrorClass<TCode> {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const BaseClass = generateHttpErrorClass(code, name);\n\n  // Need to extend `BaseClass` instead of `RedirectHttpError` to have the required static methods\n  return class SpecificRedirectHttpError extends BaseClass implements RedirectHttpError {\n    public readonly location: string;\n\n    public constructor(location: string, message?: string, options?: HttpErrorOptions) {\n      super(message, options);\n      this.location = location;\n    }\n\n    public static isInstance(error: any): error is SpecificRedirectHttpError {\n      return RedirectHttpError.isInstance(error) && error.statusCode === code;\n    }\n  };\n}\n"]}