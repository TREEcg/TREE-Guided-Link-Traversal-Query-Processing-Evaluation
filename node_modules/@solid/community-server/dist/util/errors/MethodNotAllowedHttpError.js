"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodNotAllowedHttpError = void 0;
const n3_1 = require("n3");
const TermUtil_1 = require("../TermUtil");
const Vocabularies_1 = require("../Vocabularies");
const HttpError_1 = require("./HttpError");
var quad = n3_1.DataFactory.quad;
// eslint-disable-next-line @typescript-eslint/naming-convention
const BaseHttpError = (0, HttpError_1.generateHttpErrorClass)(405, 'MethodNotAllowedHttpError');
/**
 * An error thrown when data was found for the requested identifier, but is not supported by the target resource.
 * Can keep track of the methods that are not allowed.
 */
class MethodNotAllowedHttpError extends BaseHttpError {
    constructor(methods = [], message, options) {
        super(message ?? `${methods} are not allowed.`, options);
        this.methods = methods;
    }
    generateMetadata(subject) {
        const term = (0, TermUtil_1.toNamedTerm)(subject);
        const quads = super.generateMetadata(term);
        for (const method of this.methods) {
            quads.push(quad(term, Vocabularies_1.SOLID_ERROR.terms.disallowedMethod, (0, TermUtil_1.toObjectTerm)(method, true)));
        }
        return quads;
    }
}
exports.MethodNotAllowedHttpError = MethodNotAllowedHttpError;
//# sourceMappingURL=MethodNotAllowedHttpError.js.map