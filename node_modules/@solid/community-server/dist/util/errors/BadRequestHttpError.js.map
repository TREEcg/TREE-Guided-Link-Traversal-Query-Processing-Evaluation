{"version":3,"file":"BadRequestHttpError.js","sourceRoot":"","sources":["../../../src/util/errors/BadRequestHttpError.ts"],"names":[],"mappings":";;;AACA,2CAAqD;AAErD,gEAAgE;AAChE,MAAM,aAAa,GAAG,IAAA,kCAAsB,EAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AAEzE;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,aAAa;IACpD;;;;OAIG;IACH,YAAmB,OAAgB,EAAE,OAA0B;QAC7D,KAAK,CAAC,OAAO,IAAI,+DAA+D,EAAE,OAAO,CAAC,CAAC;IAC7F,CAAC;CACF;AATD,kDASC","sourcesContent":["import type { HttpErrorOptions } from './HttpError';\nimport { generateHttpErrorClass } from './HttpError';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst BaseHttpError = generateHttpErrorClass(400, 'BadRequestHttpError');\n\n/**\n * An error thrown when incoming data is not supported.\n * Probably because an {@link AsyncHandler} returns false on the canHandle call.\n */\nexport class BadRequestHttpError extends BaseHttpError {\n  /**\n   * Default message is 'The given input is not supported by the server configuration.'.\n   * @param message - Optional, more specific, message.\n   * @param options - Optional error options.\n   */\n  public constructor(message?: string, options?: HttpErrorOptions) {\n    super(message ?? 'The given input is not supported by the server configuration.', options);\n  }\n}\n"]}