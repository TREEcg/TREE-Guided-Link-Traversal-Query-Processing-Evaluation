import type { AuxiliaryStrategy } from '../http/auxiliary/AuxiliaryStrategy';
import type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';
import type { PermissionReaderInput } from './PermissionReader';
import { PermissionReader } from './PermissionReader';
import type { PermissionMap, PermissionSet } from './permissions/Permissions';
/**
 * Determines the permission for ACL auxiliary resources.
 * This is done by looking for control permissions on the subject resource.
 */
export declare class WebAclAuxiliaryReader extends PermissionReader {
    protected readonly logger: import("..").Logger;
    private readonly reader;
    private readonly aclStrategy;
    constructor(reader: PermissionReader, aclStrategy: AuxiliaryStrategy);
    handle({ requestedModes, credentials }: PermissionReaderInput): Promise<PermissionMap>;
    /**
     * Finds all ACL identifiers and maps them to their subject identifier and the requested modes.
     */
    private findAcl;
    /**
     * Updates the permissions for an ACL resource by interpreting the Control access mode as allowing full access.
     */
    protected interpretControl(identifier: ResourceIdentifier, permissionSet?: PermissionSet): PermissionSet;
}
