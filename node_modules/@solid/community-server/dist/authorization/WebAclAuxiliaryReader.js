"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebAclAuxiliaryReader = void 0;
const LogUtil_1 = require("../logging/LogUtil");
const IdentifierMap_1 = require("../util/map/IdentifierMap");
const MapUtil_1 = require("../util/map/MapUtil");
const PermissionReader_1 = require("./PermissionReader");
const AclPermission_1 = require("./permissions/AclPermission");
/**
 * Determines the permission for ACL auxiliary resources.
 * This is done by looking for control permissions on the subject resource.
 */
class WebAclAuxiliaryReader extends PermissionReader_1.PermissionReader {
    constructor(reader, aclStrategy) {
        super();
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.reader = reader;
        this.aclStrategy = aclStrategy;
    }
    async handle({ requestedModes, credentials }) {
        // Finds all the ACL identifiers
        const aclMap = new Map(this.findAcl(requestedModes));
        // Replaces the ACL identifies with the corresponding subject identifiers
        const updatedMap = (0, MapUtil_1.modify)(new IdentifierMap_1.IdentifierSetMultiMap(requestedModes), { add: aclMap.values(), remove: aclMap.keys() });
        const result = await this.reader.handleSafe({ requestedModes: updatedMap, credentials });
        // Extracts the ACL permissions based on the subject control permissions
        for (const [identifier, [subject]] of aclMap) {
            this.logger.debug(`Mapping ${subject.path} control permission to all permissions for ${identifier.path}`);
            result.set(identifier, this.interpretControl(identifier, result.get(subject)));
        }
        return result;
    }
    /**
     * Finds all ACL identifiers and maps them to their subject identifier and the requested modes.
     */
    *findAcl(accessMap) {
        for (const [identifier] of accessMap) {
            if (this.aclStrategy.isAuxiliaryIdentifier(identifier)) {
                const subject = this.aclStrategy.getSubjectIdentifier(identifier);
                // Unfortunately there is no enum inheritance so we have to cast like this
                yield [identifier, [subject, new Set([AclPermission_1.AclMode.control])]];
            }
        }
    }
    /**
     * Updates the permissions for an ACL resource by interpreting the Control access mode as allowing full access.
     */
    interpretControl(identifier, permissionSet = {}) {
        const aclSet = {};
        for (const [group, permissions] of Object.entries(permissionSet)) {
            const { control } = permissions;
            aclSet[group] = {
                read: control,
                append: control,
                write: control,
                control,
            };
        }
        return aclSet;
    }
}
exports.WebAclAuxiliaryReader = WebAclAuxiliaryReader;
//# sourceMappingURL=WebAclAuxiliaryReader.js.map