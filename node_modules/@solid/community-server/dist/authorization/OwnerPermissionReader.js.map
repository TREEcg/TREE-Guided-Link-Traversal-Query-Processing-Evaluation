{"version":3,"file":"OwnerPermissionReader.js","sourceRoot":"","sources":["../../src/authorization/OwnerPermissionReader.ts"],"names":[],"mappings":";;;AACA,+DAAgE;AAIhE,gDAAkD;AAClD,wDAA8D;AAC9D,oFAAiF;AAEjF,uDAA8C;AAC9C,6DAA0D;AAE1D,yDAAsD;AAItD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,mCAAgB;IAOzD,YAAmB,YAA0B,EAAE,WAAwC,EACrF,kBAAsC;QACtC,KAAK,EAAE,CAAC;QARS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAS7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA4B;QAC9C,MAAM,MAAM,GAAkB,IAAI,6BAAa,EAAE,CAAC;QAClD,MAAM,kBAAkB,GAAG,KAAK,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;QAC/D,MAAM,IAAI,GAAG,CAAE,GAAG,IAAA,qBAAM,EAAC,kBAAkB,EAAE,CAAC,EAAE,EAAW,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC;QAC5G,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;YAC1E,OAAO,MAAM,CAAC;SACf;QAED,IAAI,UAA8B,CAAC;QACnC,IAAI;YACF,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;SAC3D;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpF,OAAO,MAAM,CAAC;SACf;QAED,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC1E,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE;wBACzC,IAAI,EAAE,IAAI;wBACV,KAAK,EAAE,IAAI;wBACX,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI;wBACZ,OAAO,EAAE,IAAI;qBACG,EAAE,CAAC,CAAC;aACvB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,cAAc,CAAC,WAA0B;QACrD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE;YAC7B,MAAM,IAAI,iDAAuB,CAAC,2CAA2C,CAAC,CAAC;SAChF;QACD,IAAI,QAAyB,CAAC;QAC9B,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACzE;QAAC,MAAM;YACN,MAAM,IAAI,iDAAuB,CAAC,sCAAsC,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YACxB,MAAM,IAAI,iDAAuB,CAAC,qCAAqC,CAAC,CAAC;SAC1E;QACD,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC;IACvC,CAAC;CACF;AAnED,sDAmEC","sourcesContent":["import type { CredentialSet } from '../authentication/Credentials';\nimport { CredentialGroup } from '../authentication/Credentials';\nimport type { AuxiliaryIdentifierStrategy } from '../http/auxiliary/AuxiliaryIdentifierStrategy';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport type { AccountSettings, AccountStore } from '../identity/interaction/email-password/storage/AccountStore';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { createErrorMessage } from '../util/errors/ErrorUtil';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport type { IdentifierStrategy } from '../util/identifiers/IdentifierStrategy';\nimport { filter } from '../util/IterableUtil';\nimport { IdentifierMap } from '../util/map/IdentifierMap';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { AclPermission } from './permissions/AclPermission';\nimport type { PermissionMap } from './permissions/Permissions';\n\n/**\n * Allows control access if the request is being made by the owner of the pod containing the resource.\n */\nexport class OwnerPermissionReader extends PermissionReader {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n  private readonly aclStrategy: AuxiliaryIdentifierStrategy;\n  private readonly identifierStrategy: IdentifierStrategy;\n\n  public constructor(accountStore: AccountStore, aclStrategy: AuxiliaryIdentifierStrategy,\n    identifierStrategy: IdentifierStrategy) {\n    super();\n    this.accountStore = accountStore;\n    this.aclStrategy = aclStrategy;\n    this.identifierStrategy = identifierStrategy;\n  }\n\n  public async handle(input: PermissionReaderInput): Promise<PermissionMap> {\n    const result: PermissionMap = new IdentifierMap();\n    const requestedResources = input.requestedModes.distinctKeys();\n    const acls = [ ...filter(requestedResources, (id): boolean => this.aclStrategy.isAuxiliaryIdentifier(id)) ];\n    if (acls.length === 0) {\n      this.logger.debug(`No ACL resources found that need an ownership check.`);\n      return result;\n    }\n\n    let podBaseUrl: ResourceIdentifier;\n    try {\n      podBaseUrl = await this.findPodBaseUrl(input.credentials);\n    } catch (error: unknown) {\n      this.logger.debug(`No pod owner Control permissions: ${createErrorMessage(error)}`);\n      return result;\n    }\n\n    for (const acl of acls) {\n      if (this.identifierStrategy.contains(podBaseUrl, acl, true)) {\n        this.logger.debug(`Granting Control permissions to owner on ${acl.path}`);\n        result.set(acl, { [CredentialGroup.agent]: {\n          read: true,\n          write: true,\n          append: true,\n          create: true,\n          delete: true,\n          control: true,\n        } as AclPermission });\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Find the base URL of the pod the given credentials own.\n   * Will throw an error if none can be found.\n   */\n  private async findPodBaseUrl(credentials: CredentialSet): Promise<ResourceIdentifier> {\n    if (!credentials.agent?.webId) {\n      throw new NotImplementedHttpError('Only authenticated agents could be owners');\n    }\n    let settings: AccountSettings;\n    try {\n      settings = await this.accountStore.getSettings(credentials.agent.webId);\n    } catch {\n      throw new NotImplementedHttpError('No account registered for this WebID');\n    }\n    if (!settings.podBaseUrl) {\n      throw new NotImplementedHttpError('This agent has no pod on the server');\n    }\n    return { path: settings.podBaseUrl };\n  }\n}\n"]}