{"version":3,"file":"UnionPermissionReader.js","sourceRoot":"","sources":["../../src/authorization/UnionPermissionReader.ts"],"names":[],"mappings":";;;AACA,gEAA6D;AAC7D,6DAA0D;AAC1D,iDAAiD;AAIjD;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,2BAA8B;IACvE,YAAmB,OAA2B;QAC5C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,OAAwB;QAC9C,MAAM,MAAM,GAAkB,IAAI,6BAAa,EAAE,CAAC;QAClD,KAAK,MAAM,aAAa,IAAI,OAAO,EAAE;YACnC,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SACjD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,aAA4B,EAAE,MAAqB;QAC7E,KAAK,MAAM,CAAE,UAAU,EAAE,aAAa,CAAE,IAAI,aAAa,EAAE;YACzD,KAAK,MAAM,CAAE,UAAU,EAAE,UAAU,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAoC,EAAE;gBACzG,MAAM,SAAS,GAAG,IAAA,oBAAU,EAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;gBACrD,SAAS,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;aAClF;SACF;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,WAAwB,EAAE,SAAqB,EAAE;QACxE,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,MAAM,CAAC;SACf;QAED,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAgD,EAAE;YACvG,IAAI,OAAO,KAAK,KAAK,WAAW,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;gBACzD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACrB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAxCD,sDAwCC","sourcesContent":["import type { CredentialGroup } from '../authentication/Credentials';\nimport { UnionHandler } from '../util/handlers/UnionHandler';\nimport { IdentifierMap } from '../util/map/IdentifierMap';\nimport { getDefault } from '../util/map/MapUtil';\nimport type { PermissionReader } from './PermissionReader';\nimport type { Permission, PermissionMap } from './permissions/Permissions';\n\n/**\n * Combines the results of multiple PermissionReaders.\n * Every permission in every credential type is handled according to the rule `false` \\> `true` \\> `undefined`.\n */\nexport class UnionPermissionReader extends UnionHandler<PermissionReader> {\n  public constructor(readers: PermissionReader[]) {\n    super(readers);\n  }\n\n  protected async combine(results: PermissionMap[]): Promise<PermissionMap> {\n    const result: PermissionMap = new IdentifierMap();\n    for (const permissionMap of results) {\n      this.mergePermissionMaps(permissionMap, result);\n    }\n    return result;\n  }\n\n  /**\n   * Merges all entries of the given map into the result map.\n   */\n  private mergePermissionMaps(permissionMap: PermissionMap, result: PermissionMap): void {\n    for (const [ identifier, permissionSet ] of permissionMap) {\n      for (const [ credential, permission ] of Object.entries(permissionSet) as [CredentialGroup, Permission][]) {\n        const resultSet = getDefault(result, identifier, {});\n        resultSet[credential] = this.mergePermissions(permission, resultSet[credential]);\n      }\n    }\n  }\n\n  /**\n   * Adds the given permissions to the result object according to the combination rules of the class.\n   */\n  private mergePermissions(permissions?: Permission, result: Permission = {}): Permission {\n    if (!permissions) {\n      return result;\n    }\n\n    for (const [ key, value ] of Object.entries(permissions) as [ keyof Permission, boolean | undefined ][]) {\n      if (typeof value !== 'undefined' && result[key] !== false) {\n        result[key] = value;\n      }\n    }\n    return result;\n  }\n}\n"]}