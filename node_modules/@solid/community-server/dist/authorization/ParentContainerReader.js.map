{"version":3,"file":"ParentContainerReader.js","sourceRoot":"","sources":["../../src/authorization/ParentContainerReader.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CredentialGroup } from '../authentication/Credentials';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { IdentifierStrategy } from '../util/identifiers/IdentifierStrategy';\nimport { IdentifierMap, IdentifierSetMultiMap } from '../util/map/IdentifierMap';\nimport type { MapEntry } from '../util/map/MapUtil';\nimport { modify } from '../util/map/MapUtil';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { PermissionMap, Permission, PermissionSet, AccessMap } from './permissions/Permissions';\nimport { AccessMode } from './permissions/Permissions';\n\n/**\n * Determines `delete` and `create` permissions for those resources that need it\n * by making sure the parent container has the required permissions.\n *\n * Create requires `append` permissions on the parent container.\n * Delete requires `write` permissions on both the parent container and the resource itself.\n */\nexport class ParentContainerReader extends PermissionReader {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly reader: PermissionReader;\n  private readonly identifierStrategy: IdentifierStrategy;\n\n  public constructor(reader: PermissionReader, identifierStrategy: IdentifierStrategy) {\n    super();\n    this.reader = reader;\n    this.identifierStrategy = identifierStrategy;\n  }\n\n  public async handle({ requestedModes, credentials }: PermissionReaderInput): Promise<PermissionMap> {\n    // Finds the entries for which we require parent container permissions\n    const containerMap = this.findParents(requestedModes);\n\n    // Merges the necessary parent container modes with the already requested modes\n    const combinedModes = modify(new IdentifierSetMultiMap(requestedModes), { add: containerMap.values() });\n    const result = await this.reader.handleSafe({ requestedModes: combinedModes, credentials });\n\n    // Updates the create/delete permissions based on the parent container permissions\n    for (const [ identifier, [ container ]] of containerMap) {\n      this.logger.debug(`Determining ${identifier.path} create and delete permissions based on ${container.path}`);\n      result.set(identifier, this.addContainerPermissions(result.get(identifier), result.get(container)));\n    }\n    return result;\n  }\n\n  /**\n   * Finds the identifiers for which we need parent permissions.\n   * Values are the parent identifier and the permissions they need.\n   */\n  private findParents(requestedModes: AccessMap): IdentifierMap<MapEntry<AccessMap>> {\n    const containerMap = new IdentifierMap<[ResourceIdentifier, Set<AccessMode>]>();\n    for (const [ identifier, modes ] of requestedModes.entrySets()) {\n      if (modes.has(AccessMode.create) || modes.has(AccessMode.delete)) {\n        const container = this.identifierStrategy.getParentContainer(identifier);\n        containerMap.set(identifier, [ container, this.getParentModes(modes) ]);\n      }\n    }\n    return containerMap;\n  }\n\n  /**\n   * Determines which permissions are required on the parent container.\n   */\n  private getParentModes(modes: ReadonlySet<AccessMode>): Set<AccessMode> {\n    const containerModes: Set<AccessMode> = new Set();\n    if (modes.has(AccessMode.create)) {\n      containerModes.add(AccessMode.append);\n    }\n    if (modes.has(AccessMode.delete)) {\n      containerModes.add(AccessMode.write);\n    }\n    return containerModes;\n  }\n\n  /**\n   * Merges the container permission set into the resource permission set\n   * based on the parent container rules for create/delete permissions.\n   */\n  private addContainerPermissions(resourceSet?: PermissionSet, containerSet?: PermissionSet): PermissionSet {\n    resourceSet = resourceSet ?? {};\n    containerSet = containerSet ?? {};\n    // Already copying the `permissionSet` here since the loop only iterates over the container entries.\n    // It is possible `resourceSet` contains a key that `containerSet` does not contain.\n    const resultSet: PermissionSet = { ...resourceSet };\n    for (const [ group, containerPermission ] of Object.entries(containerSet) as [ CredentialGroup, Permission ][]) {\n      resultSet[group] = this.interpretContainerPermission(resourceSet[group] ?? {}, containerPermission);\n    }\n    return resultSet;\n  }\n\n  /**\n   * Determines the create and delete permissions for the given resource permissions\n   * based on those of its parent container.\n   */\n  private interpretContainerPermission(resourcePermission: Permission, containerPermission: Permission): Permission {\n    const mergedPermission = { ...resourcePermission };\n\n    // https://solidproject.org/TR/2021/wac-20210711:\n    // When an operation requests to create a resource as a member of a container resource,\n    // the server MUST match an Authorization allowing the acl:Append or acl:Write access privilege\n    // on the container for new members.\n    mergedPermission.create = containerPermission.append && resourcePermission.create !== false;\n\n    // https://solidproject.org/TR/2021/wac-20210711:\n    // When an operation requests to delete a resource,\n    // the server MUST match Authorizations allowing the acl:Write access privilege\n    // on the resource and the containing container.\n    mergedPermission.delete = resourcePermission.write && containerPermission.write &&\n      resourcePermission.delete !== false;\n\n    return mergedPermission;\n  }\n}\n"]}