{"version":3,"file":"AcpUtil.js","sourceRoot":"","sources":["../../src/authorization/AcpUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAccessControl } from '@solid/access-control-policy/dist/type/i_access_control';\nimport type { IAccessControlResource } from '@solid/access-control-policy/dist/type/i_access_control_resource';\nimport type { IAccessControlledResource } from '@solid/access-control-policy/dist/type/i_access_controlled_resource';\nimport type { IAccessMode } from '@solid/access-control-policy/dist/type/i_access_mode';\nimport type { IMatcher } from '@solid/access-control-policy/dist/type/i_matcher';\nimport type { IPolicy } from '@solid/access-control-policy/dist/type/i_policy';\nimport type { Store } from 'n3';\nimport type { NamedNode, Term } from 'rdf-js';\nimport { ACP } from '../util/Vocabularies';\n\n/**\n * Returns all objects found using the given subject and predicate, mapped with the given function.\n */\nfunction mapObjects<T>(data: Store, subject: Term, predicate: Term, fn: (data: Store, term: Term) => T): T[] {\n  return data.getObjects(subject, predicate, null)\n    .map((term): T => fn(data, term));\n}\n\n/**\n * Returns the string values of all objects found using the given subject and predicate.\n */\nfunction getObjectValues(data: Store, subject: Term, predicate: NamedNode): string[] {\n  return mapObjects(data, subject, predicate, (unused, term): string => term.value);\n}\n\n/**\n * Finds the {@link IMatcher} with the given identifier in the given dataset.\n * @param data - Dataset to look in.\n * @param matcher - Identifier of the matcher.\n */\nexport function getMatcher(data: Store, matcher: Term): IMatcher {\n  return {\n    iri: matcher.value,\n    agent: getObjectValues(data, matcher, ACP.terms.agent),\n    client: getObjectValues(data, matcher, ACP.terms.client),\n    issuer: getObjectValues(data, matcher, ACP.terms.issuer),\n    vc: getObjectValues(data, matcher, ACP.terms.vc),\n  };\n}\n\n/**\n * Finds the {@link IPolicy} with the given identifier in the given dataset.\n * @param data - Dataset to look in.\n * @param policy - Identifier of the policy.\n */\nexport function getPolicy(data: Store, policy: Term): IPolicy {\n  return {\n    iri: policy.value,\n    allow: new Set(getObjectValues(data, policy, ACP.terms.allow) as IAccessMode[]),\n    deny: new Set(getObjectValues(data, policy, ACP.terms.deny) as IAccessMode[]),\n    allOf: mapObjects(data, policy, ACP.terms.allOf, getMatcher),\n    anyOf: mapObjects(data, policy, ACP.terms.anyOf, getMatcher),\n    noneOf: mapObjects(data, policy, ACP.terms.noneOf, getMatcher),\n  };\n}\n\n/**\n * Finds the {@link IAccessControl} with the given identifier in the given dataset.\n * @param data - Dataset to look in.\n * @param accessControl - Identifier of the access control.\n */\nexport function getAccessControl(data: Store, accessControl: Term): IAccessControl {\n  const policy = mapObjects(data, accessControl, ACP.terms.apply, getPolicy);\n  return {\n    iri: accessControl.value,\n    policy,\n  };\n}\n\n/**\n * Finds the {@link IAccessControlResource} with the given identifier in the given dataset.\n * @param data - Dataset to look in.\n * @param acr - Identifier of the access control resource.\n */\nexport function getAccessControlResource(data: Store, acr: Term): IAccessControlResource {\n  const accessControl = data.getObjects(acr, ACP.terms.accessControl, null)\n    .map((term): IAccessControl => getAccessControl(data, term));\n  const memberAccessControl = data.getObjects(acr, ACP.terms.memberAccessControl, null)\n    .map((term): IAccessControl => getAccessControl(data, term));\n  return {\n    iri: acr.value,\n    accessControl,\n    memberAccessControl,\n  };\n}\n\n/**\n * Finds all {@link IAccessControlledResource} in the given dataset.\n * @param data - Dataset to look in.\n */\nexport function* getAccessControlledResources(data: Store): Iterable<IAccessControlledResource> {\n  const acrQuads = data.getQuads(null, ACP.terms.resource, null, null);\n\n  for (const quad of acrQuads) {\n    const accessControlResource = getAccessControlResource(data, quad.subject);\n    yield {\n      iri: quad.object.value,\n      accessControlResource,\n    };\n  }\n}\n"]}