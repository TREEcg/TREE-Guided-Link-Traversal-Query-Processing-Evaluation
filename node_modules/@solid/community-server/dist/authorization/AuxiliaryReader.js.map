{"version":3,"file":"AuxiliaryReader.js","sourceRoot":"","sources":["../../src/authorization/AuxiliaryReader.ts"],"names":[],"mappings":";;;AAEA,gDAAkD;AAClD,6DAAiF;AAEjF,iDAA6C;AAE7C,yDAAsD;AAGtD;;GAEG;AACH,MAAa,eAAgB,SAAQ,mCAAgB;IAMnD,YAAmB,MAAwB,EAAE,iBAAoC;QAC/E,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,WAAW,EAAyB;QACxE,gDAAgD;QAChD,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAEzD,yFAAyF;QACzF,MAAM,UAAU,GAAG,IAAA,gBAAM,EAAC,IAAI,qCAAqB,CAAC,cAAc,CAAC,EACjE,EAAE,GAAG,EAAE,WAAW,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC;QAEzF,sEAAsE;QACtE,KAAK,MAAM,CAAE,UAAU,EAAE,CAAE,OAAO,CAAE,CAAC,IAAI,WAAW,EAAE;YACpD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,OAAO,CAAC,IAAI,mBAAmB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAC/E,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;SACnD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,cAAyB;QAC/C,MAAM,WAAW,GAAG,IAAI,6BAAa,EAAiD,CAAC;QACvF,KAAK,MAAM,CAAE,UAAU,EAAE,KAAK,CAAE,IAAI,cAAc,CAAC,SAAS,EAAE,EAAE;YAC9D,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;gBACzC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,CAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE,KAAK,CAAE,CAAC,CAAC;aACjG;SACF;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,UAA8B;QACzD,OAAO,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC;YAC7D,CAAC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;CACF;AAjDD,0CAiDC","sourcesContent":["import type { AuxiliaryStrategy } from '../http/auxiliary/AuxiliaryStrategy';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { IdentifierMap, IdentifierSetMultiMap } from '../util/map/IdentifierMap';\nimport type { MapEntry } from '../util/map/MapUtil';\nimport { modify } from '../util/map/MapUtil';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { AccessMap, AccessMode, PermissionMap } from './permissions/Permissions';\n\n/**\n * Determines the permissions of auxiliary resources by finding those of the corresponding subject resources.\n */\nexport class AuxiliaryReader extends PermissionReader {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly reader: PermissionReader;\n  private readonly auxiliaryStrategy: AuxiliaryStrategy;\n\n  public constructor(reader: PermissionReader, auxiliaryStrategy: AuxiliaryStrategy) {\n    super();\n    this.reader = reader;\n    this.auxiliaryStrategy = auxiliaryStrategy;\n  }\n\n  public async handle({ requestedModes, credentials }: PermissionReaderInput): Promise<PermissionMap> {\n    // Finds all the dependent auxiliary identifiers\n    const auxiliaries = this.findAuxiliaries(requestedModes);\n\n    // Replaces the dependent auxiliary identifies with the corresponding subject identifiers\n    const updatedMap = modify(new IdentifierSetMultiMap(requestedModes),\n      { add: auxiliaries.values(), remove: auxiliaries.keys() });\n    const result = await this.reader.handleSafe({ requestedModes: updatedMap, credentials });\n\n    // Extracts the auxiliary permissions based on the subject permissions\n    for (const [ identifier, [ subject ]] of auxiliaries) {\n      this.logger.debug(`Mapping ${subject.path} permissions to ${identifier.path}`);\n      result.set(identifier, result.get(subject) ?? {});\n    }\n    return result;\n  }\n\n  /**\n   * Maps auxiliary resources that do not have their own authorization checks to their subject resource.\n   */\n  private findAuxiliaries(requestedModes: AccessMap): IdentifierMap<MapEntry<AccessMap>> {\n    const auxiliaries = new IdentifierMap<[ResourceIdentifier, ReadonlySet<AccessMode>]>();\n    for (const [ identifier, modes ] of requestedModes.entrySets()) {\n      if (this.isDependentAuxiliary(identifier)) {\n        auxiliaries.set(identifier, [ this.auxiliaryStrategy.getSubjectIdentifier(identifier), modes ]);\n      }\n    }\n    return auxiliaries;\n  }\n\n  /**\n   * Checks if the identifier is an auxiliary resource that uses subject permissions.\n   */\n  private isDependentAuxiliary(identifier: ResourceIdentifier): boolean {\n    return this.auxiliaryStrategy.isAuxiliaryIdentifier(identifier) &&\n      !this.auxiliaryStrategy.usesOwnAuthorization(identifier);\n  }\n}\n"]}