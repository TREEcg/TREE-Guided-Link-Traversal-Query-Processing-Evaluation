{"version":3,"file":"AllStaticReader.js","sourceRoot":"","sources":["../../src/authorization/AllStaticReader.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAE1D,yDAAsD;AAGtD;;;GAGG;AACH,MAAa,eAAgB,SAAQ,mCAAgB;IAGnD,YAAmB,KAAc;QAC/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;YAC/B,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,cAAc,EAAyB;QACxE,MAAM,oBAAoB,GAAG,IAAI,6BAAa,EAAiB,CAAC;QAChE,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACxD,KAAK,MAAM,CAAE,UAAU,CAAE,IAAI,cAAc,EAAE;YAC3C,oBAAoB,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;SACnD;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAEO,iBAAiB,CAAC,WAA0B;QAClD,MAAM,MAAM,GAAkB,EAAE,CAAC;QACjC,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAsB,EAAE;YACjE,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;SAClC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA9BD,0CA8BC","sourcesContent":["import type { CredentialGroup, CredentialSet } from '../authentication/Credentials';\nimport { IdentifierMap } from '../util/map/IdentifierMap';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { Permission, PermissionMap, PermissionSet } from './permissions/Permissions';\n\n/**\n * PermissionReader which sets all permissions to true or false\n * independently of the identifier and requested permissions.\n */\nexport class AllStaticReader extends PermissionReader {\n  private readonly permissions: Permission;\n\n  public constructor(allow: boolean) {\n    super();\n    this.permissions = Object.freeze({\n      read: allow,\n      write: allow,\n      append: allow,\n      create: allow,\n      delete: allow,\n    });\n  }\n\n  public async handle({ credentials, requestedModes }: PermissionReaderInput): Promise<PermissionMap> {\n    const availablePermissions = new IdentifierMap<PermissionSet>();\n    const permissions = this.createPermissions(credentials);\n    for (const [ identifier ] of requestedModes) {\n      availablePermissions.set(identifier, permissions);\n    }\n    return availablePermissions;\n  }\n\n  private createPermissions(credentials: CredentialSet): PermissionSet {\n    const result: PermissionSet = {};\n    for (const group of Object.keys(credentials) as CredentialGroup[]) {\n      result[group] = this.permissions;\n    }\n    return result;\n  }\n}\n"]}