{"version":3,"file":"DeleteParentExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/DeleteParentExtractor.ts"],"names":[],"mappings":";;;AAGA,qDAAkD;AAElD,+CAA2C;AAE3C;;;;;;;;GAQG;AACH,MAAa,qBAAsB,SAAQ,+BAAc;IAKvD,YAAmB,MAAsB,EAAE,WAAwB,EAAE,kBAAsC;QACzG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,SAAoB;QACzC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,SAAoB;QACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtD,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC;QAC7B,IAAI,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,wBAAU,CAAC,MAAM,CAAC;YAC/C,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC;YAChD,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;YAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAClE,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,CAAE,wBAAU,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;SACrD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA3BD,sDA2BC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport type { IdentifierStrategy } from '../../util/identifiers/IdentifierStrategy';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\n/**\n * In case a resource is being deleted but does not exist,\n * the server response code depends on the access modes the agent has on the parent container.\n * In case the agent has read access on the parent container, a 404 should be returned,\n * otherwise it should be 401/403.\n *\n * This class adds support for this by requiring read access on the parent container\n * in case the target resource does not exist.\n */\nexport class DeleteParentExtractor extends ModesExtractor {\n  private readonly source: ModesExtractor;\n  private readonly resourceSet: ResourceSet;\n  private readonly identifierStrategy: IdentifierStrategy;\n\n  public constructor(source: ModesExtractor, resourceSet: ResourceSet, identifierStrategy: IdentifierStrategy) {\n    super();\n    this.source = source;\n    this.resourceSet = resourceSet;\n    this.identifierStrategy = identifierStrategy;\n  }\n\n  public async canHandle(operation: Operation): Promise<void> {\n    await this.source.canHandle(operation);\n  }\n\n  public async handle(operation: Operation): Promise<AccessMap> {\n    const accessMap = await this.source.handle(operation);\n    const { target } = operation;\n    if (accessMap.get(target)?.has(AccessMode.delete) &&\n      !this.identifierStrategy.isRootContainer(target) &&\n      !await this.resourceSet.hasResource(target)) {\n      const parent = this.identifierStrategy.getParentContainer(target);\n      accessMap.add(parent, new Set([ AccessMode.read ]));\n    }\n    return accessMap;\n  }\n}\n"]}