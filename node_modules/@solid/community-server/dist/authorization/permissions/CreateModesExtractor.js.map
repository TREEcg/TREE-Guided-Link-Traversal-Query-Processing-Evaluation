{"version":3,"file":"CreateModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/CreateModesExtractor.ts"],"names":[],"mappings":";;;AAEA,qDAAkD;AAElD,+CAA2C;AAE3C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,+BAAc;IAItD,YAAmB,MAAsB,EAAE,WAAwB;QACjE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,SAAoB;QACzC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,SAAoB;QACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEtD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC;YAC1D,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACvD,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;SACpD;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAxBD,oDAwBC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\n/**\n * Adds the `create` access mode to the result of the source in case the target resource does not exist.\n */\nexport class CreateModesExtractor extends ModesExtractor {\n  private readonly source: ModesExtractor;\n  private readonly resourceSet: ResourceSet;\n\n  public constructor(source: ModesExtractor, resourceSet: ResourceSet) {\n    super();\n    this.source = source;\n    this.resourceSet = resourceSet;\n  }\n\n  public async canHandle(operation: Operation): Promise<void> {\n    await this.source.canHandle(operation);\n  }\n\n  public async handle(operation: Operation): Promise<AccessMap> {\n    const accessMap = await this.source.handle(operation);\n\n    if (!accessMap.hasEntry(operation.target, AccessMode.create) &&\n      !await this.resourceSet.hasResource(operation.target)) {\n      accessMap.add(operation.target, AccessMode.create);\n    }\n\n    return accessMap;\n  }\n}\n"]}