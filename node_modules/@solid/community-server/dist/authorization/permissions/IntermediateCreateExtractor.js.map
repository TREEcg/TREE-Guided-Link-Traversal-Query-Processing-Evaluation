{"version":3,"file":"IntermediateCreateExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/IntermediateCreateExtractor.ts"],"names":[],"mappings":";;;AAGA,qDAAkD;AAElD,+CAA2C;AAE3C;;;;;GAKG;AACH,MAAa,2BAA4B,SAAQ,+BAAc;IAK7D;;;;;;OAMG;IACH,YAAmB,WAAwB,EAAE,QAA4B,EAAE,MAAsB;QAC/F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAgB;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAgB;QAClC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEvD,KAAK,MAAM,GAAG,IAAI,cAAc,CAAC,YAAY,EAAE,EAAE;YAC/C,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,wBAAU,CAAC,MAAM,CAAC,EAAE;gBACnD,yDAAyD;gBACzD,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACrD,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;oBAC/C,kFAAkF;oBAClF,6CAA6C;oBAC7C,qCAAqC;oBACrC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;iBAC/C;aACF;SACF;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;CACF;AAzCD,kEAyCC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport type { IdentifierStrategy } from '../../util/identifiers/IdentifierStrategy';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\n/**\n * Returns the required access modes from the source {@link ModesExtractor}.\n * In case create permissions are required,\n * verifies if any of the containers permissions also need to be created\n * and adds the corresponding identifier/mode combinations.\n */\nexport class IntermediateCreateExtractor extends ModesExtractor {\n  private readonly resourceSet: ResourceSet;\n  private readonly strategy: IdentifierStrategy;\n  private readonly source: ModesExtractor;\n\n  /**\n   * Certain permissions depend on the existence of the target resource.\n   * The provided {@link ResourceSet} will be used for that.\n   * @param resourceSet - {@link ResourceSet} that can verify the target resource existence.\n   * @param strategy - {@link IdentifierStrategy} that will be used to determine parent containers.\n   * @param source - The source {@link ModesExtractor}.\n   */\n  public constructor(resourceSet: ResourceSet, strategy: IdentifierStrategy, source: ModesExtractor) {\n    super();\n    this.resourceSet = resourceSet;\n    this.strategy = strategy;\n    this.source = source;\n  }\n\n  public async canHandle(input: Operation): Promise<void> {\n    return this.source.canHandle(input);\n  }\n\n  public async handle(input: Operation): Promise<AccessMap> {\n    const requestedModes = await this.source.handle(input);\n\n    for (const key of requestedModes.distinctKeys()) {\n      if (requestedModes.hasEntry(key, AccessMode.create)) {\n        // Add the `create` mode if the parent does not exist yet\n        const parent = this.strategy.getParentContainer(key);\n        if (!await this.resourceSet.hasResource(parent)) {\n          // It is not completely clear at this point which permissions need to be available\n          // on intermediate containers to create them,\n          // so we stick with `create` for now.\n          requestedModes.add(parent, AccessMode.create);\n        }\n      }\n    }\n\n    return requestedModes;\n  }\n}\n"]}