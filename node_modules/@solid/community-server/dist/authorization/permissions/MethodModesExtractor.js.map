{"version":3,"file":"MethodModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/MethodModesExtractor.ts"],"names":[],"mappings":";;;AAEA,uFAAoF;AACpF,gEAAqE;AACrE,kDAA4D;AAC5D,qDAAkD;AAElD,+CAA2C;AAE3C,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAE,SAAS,EAAE,KAAK,EAAE,MAAM,CAAE,CAAC,CAAC;AAC3D,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAAC,CAAE,GAAG,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAE,CAAC,CAAC;AAEhF;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,+BAAc;IAGtD;;;;OAIG;IACH,YAAmB,WAAwB;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,MAAM,EAAa;QAC1C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAClC,MAAM,IAAI,iDAAuB,CAAC,mCAAmC,MAAM,EAAE,CAAC,CAAC;SAChF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAa;QAC/C,MAAM,aAAa,GAAc,IAAI,qCAAqB,EAAE,CAAC;QAC7D,oDAAoD;QACpD,IAAI,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC5B,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;SAC5C;QACD,iEAAiE;QACjE,IAAI,MAAM,KAAK,KAAK,EAAE;YACpB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,KAAK,CAAC,CAAC;YAC5C,oFAAoF;YACpF,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC/C,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;aAC9C;SACF;QACD,kFAAkF;QAClF,IAAI,MAAM,KAAK,MAAM,EAAE;YACrB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;SAC9C;QACD,6CAA6C;QAC7C,IAAI,MAAM,KAAK,QAAQ,EAAE;YACvB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;YAC7C,4EAA4E;YAC5E,iDAAiD;YACjD,IAAI,IAAA,gCAAqB,EAAC,MAAM,CAAC,EAAE;gBACjC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;aAC5C;SACF;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;CACF;AAhDD,oDAgDC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { IdentifierSetMultiMap } from '../../util/map/IdentifierMap';\nimport { isContainerIdentifier } from '../../util/PathUtil';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\nconst READ_METHODS = new Set([ 'OPTIONS', 'GET', 'HEAD' ]);\nconst SUPPORTED_METHODS = new Set([ ...READ_METHODS, 'PUT', 'POST', 'DELETE' ]);\n\n/**\n * Generates permissions for the base set of methods that always require the same permissions.\n * Specifically: GET, HEAD, POST, PUT and DELETE.\n */\nexport class MethodModesExtractor extends ModesExtractor {\n  private readonly resourceSet: ResourceSet;\n\n  /**\n   * Certain permissions depend on the existence of the target resource.\n   * The provided {@link ResourceSet} will be used for that.\n   * @param resourceSet - {@link ResourceSet} that can verify the target resource existence.\n   */\n  public constructor(resourceSet: ResourceSet) {\n    super();\n    this.resourceSet = resourceSet;\n  }\n\n  public async canHandle({ method }: Operation): Promise<void> {\n    if (!SUPPORTED_METHODS.has(method)) {\n      throw new NotImplementedHttpError(`Cannot determine permissions of ${method}`);\n    }\n  }\n\n  public async handle({ method, target }: Operation): Promise<AccessMap> {\n    const requiredModes: AccessMap = new IdentifierSetMultiMap();\n    // Reading requires Read permissions on the resource\n    if (READ_METHODS.has(method)) {\n      requiredModes.add(target, AccessMode.read);\n    }\n    // Setting a resource's representation requires Write permissions\n    if (method === 'PUT') {\n      requiredModes.add(target, AccessMode.write);\n      // …and, if the resource does not exist yet, Create permissions are required as well\n      if (!await this.resourceSet.hasResource(target)) {\n        requiredModes.add(target, AccessMode.create);\n      }\n    }\n    // Creating a new resource in a container requires Append access to that container\n    if (method === 'POST') {\n      requiredModes.add(target, AccessMode.append);\n    }\n    // Deleting a resource requires Delete access\n    if (method === 'DELETE') {\n      requiredModes.add(target, AccessMode.delete);\n      // …and, if the target is a container, Read permissions are required as well\n      // as this exposes if a container is empty or not\n      if (isContainerIdentifier(target)) {\n        requiredModes.add(target, AccessMode.read);\n      }\n    }\n    return requiredModes;\n  }\n}\n"]}