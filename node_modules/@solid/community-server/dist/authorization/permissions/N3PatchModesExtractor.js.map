{"version":3,"file":"N3PatchModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/N3PatchModesExtractor.ts"],"names":[],"mappings":";;;AAEA,+DAA8D;AAE9D,uFAAoF;AACpF,gEAAqE;AACrE,qDAAkD;AAElD,+CAA2C;AAE3C;;;;;;;GAOG;AACH,MAAa,qBAAsB,SAAQ,+BAAc;IAGvD;;;;OAIG;IACH,YAAmB,WAAwB;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAa;QACxC,IAAI,CAAC,IAAA,mBAAS,EAAC,IAAI,CAAC,EAAE;YACpB,MAAM,IAAI,iDAAuB,CAAC,uDAAuD,CAAC,CAAC;SAC5F;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAa;QAC7C,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,IAAe,CAAC;QAEzD,MAAM,aAAa,GAAc,IAAI,qCAAqB,EAAE,CAAC;QAE7D,qFAAqF;QACrF,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;SAC5C;QACD,+FAA+F;QAC/F,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC/C,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;aAC9C;SACF;QACD,8FAA8F;QAC9F,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;YAC3C,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;CACF;AA3CD,sDA2CC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { N3Patch } from '../../http/representation/N3Patch';\nimport { isN3Patch } from '../../http/representation/N3Patch';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { IdentifierSetMultiMap } from '../../util/map/IdentifierMap';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\n/**\n * Extracts the required access modes from an N3 Patch.\n *\n * Solid, ยง5.3.1: \"When ?conditions is non-empty, servers MUST treat the request as a Read operation.\n * When ?insertions is non-empty, servers MUST (also) treat the request as an Append operation.\n * When ?deletions is non-empty, servers MUST treat the request as a Read and Write operation.\"\n * https://solid.github.io/specification/protocol#n3-patch\n */\nexport class N3PatchModesExtractor extends ModesExtractor {\n  private readonly resourceSet: ResourceSet;\n\n  /**\n   * Certain permissions depend on the existence of the target resource.\n   * The provided {@link ResourceSet} will be used for that.\n   * @param resourceSet - {@link ResourceSet} that can verify the target resource existence.\n   */\n  public constructor(resourceSet: ResourceSet) {\n    super();\n    this.resourceSet = resourceSet;\n  }\n\n  public async canHandle({ body }: Operation): Promise<void> {\n    if (!isN3Patch(body)) {\n      throw new NotImplementedHttpError('Can only determine permissions of N3 Patch documents.');\n    }\n  }\n\n  public async handle({ body, target }: Operation): Promise<AccessMap> {\n    const { deletes, inserts, conditions } = body as N3Patch;\n\n    const requiredModes: AccessMap = new IdentifierSetMultiMap();\n\n    // When ?conditions is non-empty, servers MUST treat the request as a Read operation.\n    if (conditions.length > 0) {\n      requiredModes.add(target, AccessMode.read);\n    }\n    // When ?insertions is non-empty, servers MUST (also) treat the request as an Append operation.\n    if (inserts.length > 0) {\n      requiredModes.add(target, AccessMode.append);\n      if (!await this.resourceSet.hasResource(target)) {\n        requiredModes.add(target, AccessMode.create);\n      }\n    }\n    // When ?deletions is non-empty, servers MUST treat the request as a Read and Write operation.\n    if (deletes.length > 0) {\n      requiredModes.add(target, AccessMode.read);\n      requiredModes.add(target, AccessMode.write);\n    }\n\n    return requiredModes;\n  }\n}\n"]}