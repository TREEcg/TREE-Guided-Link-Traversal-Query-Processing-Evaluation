{"version":3,"file":"SparqlUpdateModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/SparqlUpdateModesExtractor.ts"],"names":[],"mappings":";;;AAAA,qDAA0C;AAK1C,uFAAoF;AACpF,gEAAqE;AACrE,qDAAkD;AAElD,+CAA2C;AAE3C;;;;GAIG;AACH,MAAa,0BAA2B,SAAQ,+BAAc;IAG5D;;;;OAIG;IACH,YAAmB,WAAwB;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAa;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,IAAI,iDAAuB,CAAC,qDAAqD,CAAC,CAAC;SAC1F;QACD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,iDAAuB,CAAC,0EAA0E,CAAC,CAAC;SAC/G;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAa;QAC7C,+BAA+B;QAC/B,MAAM,MAAM,GAAI,IAA0B,CAAC,OAA+B,CAAC;QAC3E,MAAM,aAAa,GAAc,IAAI,qCAAqB,EAAE,CAAC;QAE7D,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACtB,OAAO,aAAa,CAAC;SACtB;QAED,iEAAiE;QACjE,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YAC9B,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC3B,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC/C,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,MAAM,CAAC,CAAC;aAC9C;SACF;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC3B,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,IAAI,CAAC,CAAC;YAC3C,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAU,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,QAAQ,CAAC,IAAoB;QACnC,OAAO,OAAO,CAAE,IAA0B,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAEO,WAAW,CAAC,EAAkB;QACpC,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC7C,OAAO,IAAI,CAAC;SACb;QACD,IAAI,EAAE,CAAC,IAAI,KAAK,yBAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE;YAC9C,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAW,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;SACxE;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,cAAc,CAAC,EAAqB;QAC1C,OAAO,EAAE,CAAC,IAAI,KAAK,yBAAO,CAAC,KAAK,CAAC,aAAa,CAAC;IACjD,CAAC;IAEO,KAAK,CAAC,EAAqB;QACjC,OAAO,EAAE,CAAC,IAAI,KAAK,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC;IACvC,CAAC;IAEO,aAAa,CAAC,MAAsB;QAC1C,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SAC3D;QACD,OAAQ,MAAkC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAW,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACnG,CAAC;IAEO,UAAU,CAAC,MAAsB;QACvC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC3D;QACD,OAAQ,MAAkC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAW,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAChG,CAAC;IAEO,UAAU,CAAC,MAAsB;QACvC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC3D;QACD,OAAQ,MAAkC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAW,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAChG,CAAC;CACF;AA3FD,gEA2FC","sourcesContent":["import { Algebra } from 'sparqlalgebrajs';\nimport type { Operation } from '../../http/Operation';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { SparqlUpdatePatch } from '../../http/representation/SparqlUpdatePatch';\nimport type { ResourceSet } from '../../storage/ResourceSet';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { IdentifierSetMultiMap } from '../../util/map/IdentifierMap';\nimport { ModesExtractor } from './ModesExtractor';\nimport type { AccessMap } from './Permissions';\nimport { AccessMode } from './Permissions';\n\n/**\n * Generates permissions for a SPARQL DELETE/INSERT body.\n * Updates with only an INSERT can be done with just append permissions,\n * while DELETEs require write permissions as well.\n */\nexport class SparqlUpdateModesExtractor extends ModesExtractor {\n  private readonly resourceSet: ResourceSet;\n\n  /**\n   * Certain permissions depend on the existence of the target resource.\n   * The provided {@link ResourceSet} will be used for that.\n   * @param resourceSet - {@link ResourceSet} that can verify the target resource existence.\n   */\n  public constructor(resourceSet: ResourceSet) {\n    super();\n    this.resourceSet = resourceSet;\n  }\n\n  public async canHandle({ body }: Operation): Promise<void> {\n    if (!this.isSparql(body)) {\n      throw new NotImplementedHttpError('Cannot determine permissions of non-SPARQL patches.');\n    }\n    if (!this.isSupported(body.algebra)) {\n      throw new NotImplementedHttpError('Can only determine permissions of a PATCH with DELETE/INSERT operations.');\n    }\n  }\n\n  public async handle({ body, target }: Operation): Promise<AccessMap> {\n    // Verified in `canHandle` call\n    const update = (body as SparqlUpdatePatch).algebra as Algebra.DeleteInsert;\n    const requiredModes: AccessMap = new IdentifierSetMultiMap();\n\n    if (this.isNop(update)) {\n      return requiredModes;\n    }\n\n    // Access modes inspired by the requirements on N3 Patch requests\n    if (this.hasConditions(update)) {\n      requiredModes.add(target, AccessMode.read);\n    }\n    if (this.hasInserts(update)) {\n      requiredModes.add(target, AccessMode.append);\n      if (!await this.resourceSet.hasResource(target)) {\n        requiredModes.add(target, AccessMode.create);\n      }\n    }\n    if (this.hasDeletes(update)) {\n      requiredModes.add(target, AccessMode.read);\n      requiredModes.add(target, AccessMode.write);\n    }\n\n    return requiredModes;\n  }\n\n  private isSparql(data: Representation): data is SparqlUpdatePatch {\n    return Boolean((data as SparqlUpdatePatch).algebra);\n  }\n\n  private isSupported(op: Algebra.Update): boolean {\n    if (this.isDeleteInsert(op) || this.isNop(op)) {\n      return true;\n    }\n    if (op.type === Algebra.types.COMPOSITE_UPDATE) {\n      return op.updates.every((update): boolean => this.isSupported(update));\n    }\n    return false;\n  }\n\n  private isDeleteInsert(op: Algebra.Operation): op is Algebra.DeleteInsert {\n    return op.type === Algebra.types.DELETE_INSERT;\n  }\n\n  private isNop(op: Algebra.Operation): op is Algebra.Nop {\n    return op.type === Algebra.types.NOP;\n  }\n\n  private hasConditions(update: Algebra.Update): boolean {\n    if (this.isDeleteInsert(update)) {\n      return Boolean(update.where && !this.isNop(update.where));\n    }\n    return (update as Algebra.CompositeUpdate).updates.some((op): boolean => this.hasConditions(op));\n  }\n\n  private hasInserts(update: Algebra.Update): boolean {\n    if (this.isDeleteInsert(update)) {\n      return Boolean(update.insert && update.insert.length > 0);\n    }\n    return (update as Algebra.CompositeUpdate).updates.some((op): boolean => this.hasInserts(op));\n  }\n\n  private hasDeletes(update: Algebra.Update): boolean {\n    if (this.isDeleteInsert(update)) {\n      return Boolean(update.delete && update.delete.length > 0);\n    }\n    return (update as Algebra.CompositeUpdate).updates.some((op): boolean => this.hasDeletes(op));\n  }\n}\n"]}