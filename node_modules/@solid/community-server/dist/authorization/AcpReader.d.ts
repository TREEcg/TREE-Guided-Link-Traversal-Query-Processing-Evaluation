import type { AuxiliaryStrategy } from '../http/auxiliary/AuxiliaryStrategy';
import type { ResourceStore } from '../storage/ResourceStore';
import type { IdentifierStrategy } from '../util/identifiers/IdentifierStrategy';
import type { PermissionReaderInput } from './PermissionReader';
import { PermissionReader } from './PermissionReader';
import type { PermissionMap } from './permissions/Permissions';
/**
 * Finds the permissions of a resource as defined in the corresponding ACRs.
 * Implementation based on https://solid.github.io/authorization-panel/acp-specification/.
 *
 * Caches data so no duplicate calls are made to the {@link ResourceStore} for a single request.
 */
export declare class AcpReader extends PermissionReader {
    protected readonly logger: import("..").Logger;
    private readonly acrStrategy;
    private readonly acrStore;
    private readonly identifierStrategy;
    constructor(acrStrategy: AuxiliaryStrategy, acrStore: ResourceStore, identifierStrategy: IdentifierStrategy);
    handle({ credentials, requestedModes }: PermissionReaderInput): Promise<PermissionMap>;
    /**
     * Generates the allowed permissions.
     * @param target - Target to generate permissions for.
     * @param credentials - Credentials that are trying to access the resource.
     * @param resourceCache - Cache used to store ACR data.
     */
    private extractPermissions;
    /**
     * Creates an ACP context targeting the given identifier with the provided credentials.
     */
    private createContext;
    /**
     * Returns all {@link IPolicy} found in `resources` that apply to the target identifier.
     * https://solidproject.org/TR/2022/acp-20220518#effective-policies
     */
    private getEffectivePolicies;
    /**
     * Returns the given identifier and all its ancestors.
     * These are all the identifiers that are relevant for determining the effective policies.
     */
    private getAncestorIdentifiers;
    /**
     * Returns the data found in the ACR corresponding to the given identifier.
     */
    private readAcrData;
}
