"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessControlledResources = exports.getAccessControlResource = exports.getAccessControl = exports.getPolicy = exports.getMatcher = void 0;
const Vocabularies_1 = require("../util/Vocabularies");
/**
 * Returns all objects found using the given subject and predicate, mapped with the given function.
 */
function mapObjects(data, subject, predicate, fn) {
    return data.getObjects(subject, predicate, null)
        .map((term) => fn(data, term));
}
/**
 * Returns the string values of all objects found using the given subject and predicate.
 */
function getObjectValues(data, subject, predicate) {
    return mapObjects(data, subject, predicate, (unused, term) => term.value);
}
/**
 * Finds the {@link IMatcher} with the given identifier in the given dataset.
 * @param data - Dataset to look in.
 * @param matcher - Identifier of the matcher.
 */
function getMatcher(data, matcher) {
    return {
        iri: matcher.value,
        agent: getObjectValues(data, matcher, Vocabularies_1.ACP.terms.agent),
        client: getObjectValues(data, matcher, Vocabularies_1.ACP.terms.client),
        issuer: getObjectValues(data, matcher, Vocabularies_1.ACP.terms.issuer),
        vc: getObjectValues(data, matcher, Vocabularies_1.ACP.terms.vc),
    };
}
exports.getMatcher = getMatcher;
/**
 * Finds the {@link IPolicy} with the given identifier in the given dataset.
 * @param data - Dataset to look in.
 * @param policy - Identifier of the policy.
 */
function getPolicy(data, policy) {
    return {
        iri: policy.value,
        allow: new Set(getObjectValues(data, policy, Vocabularies_1.ACP.terms.allow)),
        deny: new Set(getObjectValues(data, policy, Vocabularies_1.ACP.terms.deny)),
        allOf: mapObjects(data, policy, Vocabularies_1.ACP.terms.allOf, getMatcher),
        anyOf: mapObjects(data, policy, Vocabularies_1.ACP.terms.anyOf, getMatcher),
        noneOf: mapObjects(data, policy, Vocabularies_1.ACP.terms.noneOf, getMatcher),
    };
}
exports.getPolicy = getPolicy;
/**
 * Finds the {@link IAccessControl} with the given identifier in the given dataset.
 * @param data - Dataset to look in.
 * @param accessControl - Identifier of the access control.
 */
function getAccessControl(data, accessControl) {
    const policy = mapObjects(data, accessControl, Vocabularies_1.ACP.terms.apply, getPolicy);
    return {
        iri: accessControl.value,
        policy,
    };
}
exports.getAccessControl = getAccessControl;
/**
 * Finds the {@link IAccessControlResource} with the given identifier in the given dataset.
 * @param data - Dataset to look in.
 * @param acr - Identifier of the access control resource.
 */
function getAccessControlResource(data, acr) {
    const accessControl = data.getObjects(acr, Vocabularies_1.ACP.terms.accessControl, null)
        .map((term) => getAccessControl(data, term));
    const memberAccessControl = data.getObjects(acr, Vocabularies_1.ACP.terms.memberAccessControl, null)
        .map((term) => getAccessControl(data, term));
    return {
        iri: acr.value,
        accessControl,
        memberAccessControl,
    };
}
exports.getAccessControlResource = getAccessControlResource;
/**
 * Finds all {@link IAccessControlledResource} in the given dataset.
 * @param data - Dataset to look in.
 */
function* getAccessControlledResources(data) {
    const acrQuads = data.getQuads(null, Vocabularies_1.ACP.terms.resource, null, null);
    for (const quad of acrQuads) {
        const accessControlResource = getAccessControlResource(data, quad.subject);
        yield {
            iri: quad.object.value,
            accessControlResource,
        };
    }
}
exports.getAccessControlledResources = getAccessControlledResources;
//# sourceMappingURL=AcpUtil.js.map