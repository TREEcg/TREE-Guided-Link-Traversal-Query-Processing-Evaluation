import type { IdentifierStrategy } from '../util/identifiers/IdentifierStrategy';
import type { PermissionReaderInput } from './PermissionReader';
import { PermissionReader } from './PermissionReader';
import type { PermissionMap } from './permissions/Permissions';
/**
 * Determines `delete` and `create` permissions for those resources that need it
 * by making sure the parent container has the required permissions.
 *
 * Create requires `append` permissions on the parent container.
 * Delete requires `write` permissions on both the parent container and the resource itself.
 */
export declare class ParentContainerReader extends PermissionReader {
    protected readonly logger: import("..").Logger;
    private readonly reader;
    private readonly identifierStrategy;
    constructor(reader: PermissionReader, identifierStrategy: IdentifierStrategy);
    handle({ requestedModes, credentials }: PermissionReaderInput): Promise<PermissionMap>;
    /**
     * Finds the identifiers for which we need parent permissions.
     * Values are the parent identifier and the permissions they need.
     */
    private findParents;
    /**
     * Determines which permissions are required on the parent container.
     */
    private getParentModes;
    /**
     * Merges the container permission set into the resource permission set
     * based on the parent container rules for create/delete permissions.
     */
    private addContainerPermissions;
    /**
     * Determines the create and delete permissions for the given resource permissions
     * based on those of its parent container.
     */
    private interpretContainerPermission;
}
