{"version":3,"file":"LinkRelParser.js","sourceRoot":"","sources":["../../../../src/http/input/metadata/LinkRelParser.ts"],"names":[],"mappings":";;;AACA,2BAAiC;AAEjC,sDAAwD;AAExD,yDAA2D;AAC3D,6DAAwD;AAExD,qDAAkD;AAClD,IAAO,SAAS,GAAG,gBAAW,CAAC,SAAS,CAAC;AAEzC;;GAEG;AACH,MAAa,aAAc,SAAQ,+BAAc;IAK/C,YAAmB,UAAyC;QAC1D,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAiE;QACnF,KAAK,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,IAAA,4BAAe,EAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAChF,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACrF;IACH,CAAC;CACF;AAfD,sCAeC;AAED;;GAEG;AACH,MAAa,aAAa;IAKxB;;;;OAIG;IACH,YAAmB,KAAa,EAAE,SAAmB,EAAE,SAAoB;QACzE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,KAAK,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,aAAa,CAAC,MAAc;QAClC,OAAO,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,MAAc,EAAE,QAAgC,EAAE,MAAc;QACnF,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YAC9B,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,EAAE,yBAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAC/E,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,UAAU,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,MAAM,MAAM,MAAM;oBAC3F,iDAAiD,CAAC,CAAC;aAC5C;iBAAM;gBACL,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;aAC7C;SACF;aAAM;YACL,MAAM,CAAC,KAAK,CACV,KAAK,QAAQ,CAAC,UAAU,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,MAAM,MAAM,uCAAuC,CACxG,CAAC;SACH;IACH,CAAC;CACF;AA9CD,sCA8CC","sourcesContent":["import type { NamedNode } from '@rdfjs/types';\nimport { DataFactory } from 'n3';\nimport type { Logger } from '../../../logging/Logger';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport { parseLinkHeader } from '../../../util/HeaderUtil';\nimport { SOLID_META } from '../../../util/Vocabularies';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataParser } from './MetadataParser';\nimport namedNode = DataFactory.namedNode;\n\n/**\n * Parses Link headers with a specific `rel` value and adds them as metadata with the given predicate.\n */\nexport class LinkRelParser extends MetadataParser {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly linkRelMap: Record<string, LinkRelObject>;\n\n  public constructor(linkRelMap: Record<string, LinkRelObject>) {\n    super();\n    this.linkRelMap = linkRelMap;\n  }\n\n  public async handle(input: { request: HttpRequest; metadata: RepresentationMetadata }): Promise<void> {\n    for (const { target, parameters } of parseLinkHeader(input.request.headers.link)) {\n      this.linkRelMap[parameters.rel]?.addToMetadata(target, input.metadata, this.logger);\n    }\n  }\n}\n\n/**\n * Represents the values that are parsed as metadata\n */\nexport class LinkRelObject {\n  public readonly value: NamedNode;\n  public readonly ephemeral: boolean;\n  public readonly allowList: string[] | undefined;\n\n  /**\n   * @param value - The value corresponding to the `rel` value that will be used as predicate in the metadata.\n   * @param ephemeral - (Optional) Indicates whether it will be stored by the server.\n   * @param allowList - (Optional) Contains the objects that are allowed to be used with the given predicate.\n   */\n  public constructor(value: string, ephemeral?: boolean, allowList?: string[]) {\n    this.value = namedNode(value);\n    this.ephemeral = ephemeral ?? false;\n    this.allowList = allowList;\n  }\n\n  /**\n   * Checks whether the object can be added to the metadata\n   * @param object - The link target.\n   * @returns a boolean to indicate whether it can be added to the metadata or not\n   */\n  private objectAllowed(object: string): boolean {\n    return this.allowList?.includes(object) ?? true;\n  }\n\n  /**\n   * Adds the object to the metadata when it is allowed\n   * @param object - The link target.\n   * @param metadata - Metadata of the resource.\n   * @param logger - Logger\n   */\n  public addToMetadata(object: string, metadata: RepresentationMetadata, logger: Logger): void {\n    if (this.objectAllowed(object)) {\n      if (this.ephemeral) {\n        metadata.add(this.value, namedNode(object), SOLID_META.terms.ResponseMetadata);\n        logger.debug(`\"<${metadata.identifier.value}> <${this.value.value}> <${object}>.\" ` +\n`will not be stored permanently in the metadata.`);\n      } else {\n        metadata.add(this.value, namedNode(object));\n      }\n    } else {\n      logger.debug(\n        `\"<${metadata.identifier.value}> <${this.value.value}> <${object}>.\" will not be added to the metadata`,\n      );\n    }\n  }\n}\n\n"]}