{"version":3,"file":"ContentLengthParser.js","sourceRoot":"","sources":["../../../../src/http/input/metadata/ContentLengthParser.ts"],"names":[],"mappings":";;;AAAA,sDAAwD;AAGxD,qDAAkD;AAElD;;GAEG;AACH,MAAa,mBAAoB,SAAQ,+BAAc;IAAvD;;QACqB,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;IAajD,CAAC;IAXQ,KAAK,CAAC,MAAM,CAAC,KAAiE;QACnF,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC9D,IAAI,aAAa,EAAE;YACjB,MAAM,MAAM,GAAG,wBAAwB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,MAAM,EAAE;gBACV,KAAK,CAAC,QAAQ,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;aAC/C;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,aAAa,GAAG,CAAC,CAAC;aAC5E;SACF;IACH,CAAC;CACF;AAdD,kDAcC","sourcesContent":["import { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataParser } from './MetadataParser';\n\n/**\n * Parser for the `content-length` header.\n */\nexport class ContentLengthParser extends MetadataParser {\n  protected readonly logger = getLoggerFor(this);\n\n  public async handle(input: { request: HttpRequest; metadata: RepresentationMetadata }): Promise<void> {\n    const contentLength = input.request.headers['content-length'];\n    if (contentLength) {\n      const length = /^\\s*(\\d+)\\s*(?:;.*)?$/u.exec(contentLength)?.[1];\n      if (length) {\n        input.metadata.contentLength = Number(length);\n      } else {\n        this.logger.warn(`Invalid content-length header found: ${contentLength}.`);\n      }\n    }\n  }\n}\n"]}