{"version":3,"file":"PlainJsonLdFilter.js","sourceRoot":"","sources":["../../../../src/http/input/metadata/PlainJsonLdFilter.ts"],"names":[],"mappings":";;;AAAA,sDAAwD;AAExD,0FAAuF;AACvF,yDAA6E;AAC7E,6DAAqD;AAErD,qDAAkD;AAElD;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,+BAAc;IAGnD;QACE,KAAK,EAAE,CAAC;QAHS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;IAI/C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAGnB;QACC,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAChE,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QACD,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAA,6BAAgB,EAAC,iBAAiB,CAAC,CAAC;QACnE,mGAAmG;QACnG,IACE,WAAW,KAAK,kBAAkB;YAClC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EACvD;YACA,MAAM,IAAI,iDAAuB,CAC/B,sEAAsE,CACvE,CAAC;SACH;IACH,CAAC;IAEO,sBAAsB,CAAC,OAA0B,EAAE;QACzD,OAAO,IAAA,4BAAe,EAAC,IAAI,CAAC,CAAC,IAAI,CAC/B,CAAC,EAAE,UAAU,EAAE,EAAW,EAAE,CAAC,UAAU,CAAC,GAAG,KAAK,sBAAO,CAAC,OAAO,CAChE,CAAC;IACJ,CAAC;CACF;AAhCD,8CAgCC","sourcesContent":["import { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport { NotImplementedHttpError } from '../../../util/errors/NotImplementedHttpError';\nimport { parseContentType, parseLinkHeader } from '../../../util/HeaderUtil';\nimport { JSON_LD } from '../../../util/Vocabularies';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataParser } from './MetadataParser';\n\n/**\n * Filter that errors on JSON-LD with a plain application/json content-type.\n * This will not store metadata, only throw errors if necessary.\n */\nexport class PlainJsonLdFilter extends MetadataParser {\n  protected readonly logger = getLoggerFor(this);\n\n  public constructor() {\n    super();\n  }\n\n  public async handle(input: {\n    request: HttpRequest;\n    metadata: RepresentationMetadata;\n  }): Promise<void> {\n    const contentTypeHeader = input.request.headers['content-type'];\n    if (!contentTypeHeader) {\n      return;\n    }\n    const { value: contentType } = parseContentType(contentTypeHeader);\n    // Throw error on content-type application/json AND a link header that refers to a JSON-LD context.\n    if (\n      contentType === 'application/json' &&\n      this.linkHasContextRelation(input.request.headers.link)\n    ) {\n      throw new NotImplementedHttpError(\n        'JSON-LD is only supported with the application/ld+json content type.',\n      );\n    }\n  }\n\n  private linkHasContextRelation(link: string | string[] = []): boolean {\n    return parseLinkHeader(link).some(\n      ({ parameters }): boolean => parameters.rel === JSON_LD.context,\n    );\n  }\n}\n"]}