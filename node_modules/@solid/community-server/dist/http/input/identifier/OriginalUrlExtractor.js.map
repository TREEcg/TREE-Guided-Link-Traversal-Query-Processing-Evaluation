{"version":3,"file":"OriginalUrlExtractor.js","sourceRoot":"","sources":["../../../../src/http/input/identifier/OriginalUrlExtractor.ts"],"names":[],"mappings":";;;AAEA,kFAA+E;AAC/E,kFAA+E;AAC/E,yDAA0D;AAE1D,qDAA4D;AAE5D,uDAAoD;AAcpD;;GAEG;AACH,MAAa,oBAAqB,SAAQ,iCAAe;IAIvD,YAAmB,IAA8B;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAClD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,EAA2B;QACpF,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,yCAAmB,CAAC,aAAa,CAAC,CAAC;SAC9C;QAED,wFAAwF;QACxF,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QACvB,IAAI,QAAQ,GAAI,UAAwB,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QAEvE,wCAAwC;QACxC,MAAM,SAAS,GAAG,IAAA,2BAAc,EAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,SAAS,CAAC,IAAI,EAAE;YAClB,CAAC,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC;SACxB;QACD,IAAI,SAAS,CAAC,KAAK,EAAE;YACnB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,CAAC;SACnC;QAED,qCAAqC;QACrC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,yCAAmB,CAAC,qBAAqB,CAAC,CAAC;SACtD;QACD,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,IAAI,yCAAmB,CAAC,2CAA2C,IAAI,EAAE,CAAC,CAAC;SAClF;QAED,iDAAiD;QACjD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,GAAG,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;QACrD,MAAM,CAAE,AAAD,EAAG,QAAQ,EAAE,MAAM,CAAE,GAAG,eAAe,CAAC,IAAI,CAAC,IAAA,6BAAkB,EAAC,GAAG,CAAC,CAAE,CAAC;QAC9E,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAChC,IAAI,IAAI,CAAC,kBAAkB,IAAI,MAAM,EAAE;YACrC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;SAC7B;QAED,qCAAqC;QACrC,MAAM,UAAU,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,CAAC;QAE9C,qEAAqE;QACrE,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YAC3D,MAAM,IAAI,yCAAmB,CAAC,kBAAkB,UAAU,CAAC,IAAI,8CAA8C,EAC3G,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC;SAC9D;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAvDD,oDAuDC","sourcesContent":["import type { TLSSocket } from 'tls';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport { BadRequestHttpError } from '../../../util/errors/BadRequestHttpError';\nimport { InternalServerError } from '../../../util/errors/InternalServerError';\nimport { parseForwarded } from '../../../util/HeaderUtil';\nimport type { IdentifierStrategy } from '../../../util/identifiers/IdentifierStrategy';\nimport { toCanonicalUriPath } from '../../../util/PathUtil';\nimport type { ResourceIdentifier } from '../../representation/ResourceIdentifier';\nimport { TargetExtractor } from './TargetExtractor';\n\nexport interface OriginalUrlExtractorArgs {\n  /**\n   * The IdentifierStrategy to use for checking the scope of the request\n   */\n  identifierStrategy: IdentifierStrategy;\n\n  /**\n   * Specify wether the OriginalUrlExtractor should include the request query string.\n   */\n  includeQueryString?: boolean;\n}\n\n/**\n * Reconstructs the original URL of an incoming {@link HttpRequest}.\n */\nexport class OriginalUrlExtractor extends TargetExtractor {\n  private readonly identifierStrategy: IdentifierStrategy;\n  private readonly includeQueryString: boolean;\n\n  public constructor(args: OriginalUrlExtractorArgs) {\n    super();\n    this.identifierStrategy = args.identifierStrategy;\n    this.includeQueryString = args.includeQueryString ?? true;\n  }\n\n  public async handle({ request: { url, connection, headers }}: { request: HttpRequest }): Promise<ResourceIdentifier> {\n    if (!url) {\n      throw new InternalServerError('Missing URL');\n    }\n\n    // Extract host and protocol (possibly overridden by the Forwarded/X-Forwarded-* header)\n    let { host } = headers;\n    let protocol = (connection as TLSSocket)?.encrypted ? 'https' : 'http';\n\n    // Check Forwarded/X-Forwarded-* headers\n    const forwarded = parseForwarded(headers);\n    if (forwarded.host) {\n      ({ host } = forwarded);\n    }\n    if (forwarded.proto) {\n      ({ proto: protocol } = forwarded);\n    }\n\n    // Perform a sanity check on the host\n    if (!host) {\n      throw new BadRequestHttpError('Missing Host header');\n    }\n    if (/[/\\\\*]/u.test(host)) {\n      throw new BadRequestHttpError(`The request has an invalid Host header: ${host}`);\n    }\n\n    // URL object applies punycode encoding to domain\n    const originalUrl = new URL(`${protocol}://${host}`);\n    const [ , pathname, search ] = /^([^?]*)(.*)/u.exec(toCanonicalUriPath(url))!;\n    originalUrl.pathname = pathname;\n    if (this.includeQueryString && search) {\n      originalUrl.search = search;\n    }\n\n    // Create ResourceIdentifier instance\n    const identifier = { path: originalUrl.href };\n\n    // Check if the configured IdentifierStrategy supports the identifier\n    if (!this.identifierStrategy.supportsIdentifier(identifier)) {\n      throw new InternalServerError(`The identifier ${identifier.path} is outside the configured identifier space.`,\n        { errorCode: 'E0001', details: { path: identifier.path }});\n    }\n\n    return identifier;\n  }\n}\n"]}