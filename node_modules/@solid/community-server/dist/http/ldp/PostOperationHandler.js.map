{"version":3,"file":"PostOperationHandler.js","sourceRoot":"","sources":["../../../src/http/ldp/PostOperationHandler.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AAErD,+EAA4E;AAC5E,+EAA4E;AAC5E,uFAAoF;AACpF,0DAA+C;AAC/C,0DAAiE;AACjE,8FAA2F;AAG3F,yDAAsD;AAEtD;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,mCAAgB;IAKxD,YAAmB,KAAoB;QACrC,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAAyB;QACzD,IAAI,SAAS,CAAC,MAAM,KAAK,MAAM,EAAE;YAC/B,MAAM,IAAI,iDAAuB,CAAC,4CAA4C,CAAC,CAAC;SACjF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAyB;QACtD,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAU,EAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7G,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,kBAAG,CAAC,cAAc,CAAC,CAAC;QAChF,wEAAwE;QACxE,8DAA8D;QAC9D,6DAA6D;QAC7D,8GAA8G;QAC9G,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,eAAe,EAAE;YAC5D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;YAC5E,MAAM,IAAI,yCAAmB,CAAC,yDAAyD,CAAC,CAAC;SAC1F;QACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QACrG,MAAM,iBAAiB,GAAG,IAAA,mBAAI,EAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,EAAW,EAAE,CACrE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,uBAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,EAAE;YACtB,MAAM,IAAI,yCAAmB,CAAC,kEAAkE,CAAC,CAAC;SACnG;QACD,OAAO,IAAI,uDAA0B,CAAC,iBAAiB,CAAC,CAAC;IAC3D,CAAC;CACF;AAnCD,oDAmCC","sourcesContent":["import type { Term } from 'rdf-js';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { find } from '../../util/IterableUtil';\nimport { AS, LDP, RDF, SOLID_AS } from '../../util/Vocabularies';\nimport { CreatedResponseDescription } from '../output/response/CreatedResponseDescription';\nimport type { ResponseDescription } from '../output/response/ResponseDescription';\nimport type { OperationHandlerInput } from './OperationHandler';\nimport { OperationHandler } from './OperationHandler';\n\n/**\n * Handles POST {@link Operation}s.\n * Calls the addResource function from a {@link ResourceStore}.\n */\nexport class PostOperationHandler extends OperationHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly store: ResourceStore;\n\n  public constructor(store: ResourceStore) {\n    super();\n    this.store = store;\n  }\n\n  public async canHandle({ operation }: OperationHandlerInput): Promise<void> {\n    if (operation.method !== 'POST') {\n      throw new NotImplementedHttpError('This handler only supports POST operations');\n    }\n  }\n\n  public async handle({ operation }: OperationHandlerInput): Promise<ResponseDescription> {\n    const type = new Set(operation.body.metadata.getAll(RDF.terms.type).map((term: Term): string => term.value));\n    const isContainerType = type.has(LDP.Container) || type.has(LDP.BasicContainer);\n    // Solid, ยง2.1: \"A Solid server MUST reject PUT, POST and PATCH requests\n    // without the Content-Type header with a status code of 400.\"\n    // https://solid.github.io/specification/protocol#http-server\n    // An exception is made for LDP Containers as nothing is done with the body, so a Content-type is not required\n    if (!operation.body.metadata.contentType && !isContainerType) {\n      this.logger.warn('POST requests require the Content-Type header to be set');\n      throw new BadRequestHttpError('POST requests require the Content-Type header to be set');\n    }\n    const changes = await this.store.addResource(operation.target, operation.body, operation.conditions);\n    const createdIdentifier = find(changes.keys(), (identifier): boolean =>\n      Boolean(changes.get(identifier)?.has(SOLID_AS.terms.Activity, AS.terms.Create)));\n    if (!createdIdentifier) {\n      throw new InternalServerError('Operation was successful but no created identifier was returned.');\n    }\n    return new CreatedResponseDescription(createdIdentifier);\n  }\n}\n"]}