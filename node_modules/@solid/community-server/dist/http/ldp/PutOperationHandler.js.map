{"version":3,"file":"PutOperationHandler.js","sourceRoot":"","sources":["../../../src/http/ldp/PutOperationHandler.ts"],"names":[],"mappings":";;;AAAA,mDAAqD;AAErD,+EAA4E;AAC5E,2FAAwF;AACxF,uFAAoF;AACpF,kDAAsD;AAEtD,8FAA2F;AAC3F,0FAAuF;AAGvF,yDAAsD;AAEtD;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,mCAAgB;IAMvD,YAAmB,KAAoB,EAAE,gBAAmC;QAC1E,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAAyB;QACzD,IAAI,SAAS,CAAC,MAAM,KAAK,KAAK,EAAE;YAC9B,MAAM,IAAI,iDAAuB,CAAC,2CAA2C,CAAC,CAAC;SAChF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAyB;QACtD,MAAM,iBAAiB,GAAG,IAAA,0BAAe,EAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjE,wEAAwE;QACxE,8DAA8D;QAC9D,6DAA6D;QAC7D,8GAA8G;QAC9G,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,iBAAiB,EAAE;YAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;YAC3E,MAAM,IAAI,yCAAmB,CAAC,wDAAwD,CAAC,CAAC;SACzF;QAED,kGAAkG;QAClG,4DAA4D;QAC5D,+FAA+F;QAC/F,sFAAsF;QACtF,8CAA8C;QAC9C,IAAI,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACjE,MAAM,IAAI,qDAAyB,CACjC,CAAE,KAAK,CAAE,EAAE,gFAAgF,CAC5F,CAAC;SACH;QAED,yGAAyG;QACzG,8EAA8E;QAC9E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3F,IAAI,MAAM,EAAE;YACV,OAAO,IAAI,mDAAwB,EAAE,CAAC;SACvC;QACD,OAAO,IAAI,uDAA0B,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;CACF;AAlDD,kDAkDC","sourcesContent":["import { getLoggerFor } from '../../logging/LogUtil';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { isContainerPath } from '../../util/PathUtil';\nimport type { AuxiliaryStrategy } from '../auxiliary/AuxiliaryStrategy';\nimport { CreatedResponseDescription } from '../output/response/CreatedResponseDescription';\nimport { ResetResponseDescription } from '../output/response/ResetResponseDescription';\nimport type { ResponseDescription } from '../output/response/ResponseDescription';\nimport type { OperationHandlerInput } from './OperationHandler';\nimport { OperationHandler } from './OperationHandler';\n\n/**\n * Handles PUT {@link Operation}s.\n * Calls the setRepresentation function from a {@link ResourceStore}.\n */\nexport class PutOperationHandler extends OperationHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly store: ResourceStore;\n  private readonly metadataStrategy: AuxiliaryStrategy;\n\n  public constructor(store: ResourceStore, metadataStrategy: AuxiliaryStrategy) {\n    super();\n    this.store = store;\n    this.metadataStrategy = metadataStrategy;\n  }\n\n  public async canHandle({ operation }: OperationHandlerInput): Promise<void> {\n    if (operation.method !== 'PUT') {\n      throw new NotImplementedHttpError('This handler only supports PUT operations');\n    }\n  }\n\n  public async handle({ operation }: OperationHandlerInput): Promise<ResponseDescription> {\n    const targetIsContainer = isContainerPath(operation.target.path);\n\n    // Solid, ยง2.1: \"A Solid server MUST reject PUT, POST and PATCH requests\n    // without the Content-Type header with a status code of 400.\"\n    // https://solid.github.io/specification/protocol#http-server\n    // An exception is made for LDP Containers as nothing is done with the body, so a Content-type is not required\n    if (!operation.body.metadata.contentType && !targetIsContainer) {\n      this.logger.warn('PUT requests require the Content-Type header to be set');\n      throw new BadRequestHttpError('PUT requests require the Content-Type header to be set');\n    }\n\n    // https://github.com/CommunitySolidServer/CommunitySolidServer/issues/1027#issuecomment-988664970\n    // We do not allow PUT on metadata resources for simplicity.\n    // Otherwise, all generated metadata triples would have to be identical, such as date modified.\n    // We already reject the request here instead of `setRepresentation` so PATCH requests\n    // can still use that function to update data.\n    if (this.metadataStrategy.isAuxiliaryIdentifier(operation.target)) {\n      throw new MethodNotAllowedHttpError(\n        [ 'PUT' ], 'Not allowed to create or edit metadata resources using PUT; use PATCH instead.',\n      );\n    }\n\n    // A more efficient approach would be to have the server return metadata indicating if a resource was new\n    // See https://github.com/CommunitySolidServer/CommunitySolidServer/issues/632\n    const exists = await this.store.hasResource(operation.target);\n    await this.store.setRepresentation(operation.target, operation.body, operation.conditions);\n    if (exists) {\n      return new ResetResponseDescription();\n    }\n    return new CreatedResponseDescription(operation.target);\n  }\n}\n"]}