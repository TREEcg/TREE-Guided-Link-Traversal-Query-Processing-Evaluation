{"version":3,"file":"RedirectingErrorHandler.js","sourceRoot":"","sources":["../../../../src/http/output/error/RedirectingErrorHandler.ts"],"names":[],"mappings":";;;AAAA,0FAAuF;AACvF,8EAA2E;AAC3E,yFAAsF;AAGtF,iDAA8C;AAE9C;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,2BAAY;IAChD,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAoB;QAChD,IAAI,CAAC,qCAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACxC,MAAM,IAAI,iDAAuB,CAAC,qCAAqC,CAAC,CAAC;SAC1E;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,EAAoB;QAC7C,6BAA6B;QAC7B,OAAO,IAAI,yDAA2B,CAAC,KAA0B,CAAC,CAAC;IACrE,CAAC;CACF;AAXD,0DAWC","sourcesContent":["import { NotImplementedHttpError } from '../../../util/errors/NotImplementedHttpError';\nimport { RedirectHttpError } from '../../../util/errors/RedirectHttpError';\nimport { RedirectResponseDescription } from '../response/RedirectResponseDescription';\nimport type { ResponseDescription } from '../response/ResponseDescription';\nimport type { ErrorHandlerArgs } from './ErrorHandler';\nimport { ErrorHandler } from './ErrorHandler';\n\n/**\n * Internally we create redirects by throwing specific {@link RedirectHttpError}s.\n * This Error handler converts those to {@link RedirectResponseDescription}s that are used for output.\n */\nexport class RedirectingErrorHandler extends ErrorHandler {\n  public async canHandle({ error }: ErrorHandlerArgs): Promise<void> {\n    if (!RedirectHttpError.isInstance(error)) {\n      throw new NotImplementedHttpError('Only redirect errors are supported.');\n    }\n  }\n\n  public async handle({ error }: ErrorHandlerArgs): Promise<ResponseDescription> {\n    // Cast verified by canHandle\n    return new RedirectResponseDescription(error as RedirectHttpError);\n  }\n}\n"]}