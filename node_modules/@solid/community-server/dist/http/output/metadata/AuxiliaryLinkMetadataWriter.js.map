{"version":3,"file":"AuxiliaryLinkMetadataWriter.js","sourceRoot":"","sources":["../../../../src/http/output/metadata/AuxiliaryLinkMetadataWriter.ts"],"names":[],"mappings":";;;AAAA,2BAA0B;AAC1B,sDAAwD;AAExD,yDAAqD;AAGrD,qDAAkD;AAElD;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,+BAAc;IAO7D;;;;OAIG;IACH,YAAmB,iBAAoC,EAAE,gBAAmC,EAAE,YAAoB;QAChH,KAAK,EAAE,CAAC;QAZS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAa7C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAmE;QACrF,MAAM,UAAU,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAC7D,4EAA4E;QAC5E,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,SAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC7G,MAAM,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;YACrF,IAAA,sBAAS,EAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,mBAAmB,CAAC,IAAI,WAAW,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SAChG;IACH,CAAC;CACF;AA3BD,kEA2BC","sourcesContent":["import { Util } from 'n3';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpResponse } from '../../../server/HttpResponse';\nimport { addHeader } from '../../../util/HeaderUtil';\nimport type { AuxiliaryStrategy } from '../../auxiliary/AuxiliaryStrategy';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataWriter } from './MetadataWriter';\n\n/**\n * A {@link MetadataWriter} that takes a specific auxiliaryStrategy and relation type as input and\n * creates a Link header with the strategy identifier and the relation type as \"rel\" value.\n */\nexport class AuxiliaryLinkMetadataWriter extends MetadataWriter {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly auxiliaryStrategy: AuxiliaryStrategy;\n  private readonly specificStrategy: AuxiliaryStrategy;\n  private readonly relationType: string;\n\n  /**\n   * @param auxiliaryStrategy - The strategy used to check if an identifier is any kind of auxiliary identifier.\n   * @param specificStrategy - The strategy used to create a specific kind of auxiliary identifier.\n   * @param relationType - The value used to create the \"rel\" value of the Link header.\n   */\n  public constructor(auxiliaryStrategy: AuxiliaryStrategy, specificStrategy: AuxiliaryStrategy, relationType: string) {\n    super();\n    this.auxiliaryStrategy = auxiliaryStrategy;\n    this.specificStrategy = specificStrategy;\n    this.relationType = relationType;\n  }\n\n  public async handle(input: { response: HttpResponse; metadata: RepresentationMetadata }): Promise<void> {\n    const identifier = { path: input.metadata.identifier.value };\n    // The metadata identifier will be a blank node in case an error was thrown.\n    if (!this.auxiliaryStrategy.isAuxiliaryIdentifier(identifier) && !Util.isBlankNode(input.metadata.identifier)) {\n      const auxiliaryIdentifier = this.specificStrategy.getAuxiliaryIdentifier(identifier);\n      addHeader(input.response, 'Link', `<${auxiliaryIdentifier.path}>; rel=\"${this.relationType}\"`);\n    }\n  }\n}\n"]}