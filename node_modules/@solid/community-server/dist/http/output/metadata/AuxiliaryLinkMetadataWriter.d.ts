import type { HttpResponse } from '../../../server/HttpResponse';
import type { AuxiliaryStrategy } from '../../auxiliary/AuxiliaryStrategy';
import type { RepresentationMetadata } from '../../representation/RepresentationMetadata';
import { MetadataWriter } from './MetadataWriter';
/**
 * A {@link MetadataWriter} that takes a specific auxiliaryStrategy and relation type as input and
 * creates a Link header with the strategy identifier and the relation type as "rel" value.
 */
export declare class AuxiliaryLinkMetadataWriter extends MetadataWriter {
    protected readonly logger: import("../../..").Logger;
    private readonly auxiliaryStrategy;
    private readonly specificStrategy;
    private readonly relationType;
    /**
     * @param auxiliaryStrategy - The strategy used to check if an identifier is any kind of auxiliary identifier.
     * @param specificStrategy - The strategy used to create a specific kind of auxiliary identifier.
     * @param relationType - The value used to create the "rel" value of the Link header.
     */
    constructor(auxiliaryStrategy: AuxiliaryStrategy, specificStrategy: AuxiliaryStrategy, relationType: string);
    handle(input: {
        response: HttpResponse;
        metadata: RepresentationMetadata;
    }): Promise<void>;
}
