{"version":3,"file":"LinkRelMetadataWriter.js","sourceRoot":"","sources":["../../../../src/http/output/metadata/LinkRelMetadataWriter.ts"],"names":[],"mappings":";;;AACA,2BAAiC;AACjC,sDAAwD;AAExD,yDAAqD;AAErD,qDAAkD;AAElD;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,+BAAc;IAIvD,YAAmB,UAAkC;QACnD,KAAK,EAAE,CAAC;QAHS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAK7C,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAqB,CAAC;QAC/C,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACvD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAW,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAmE;QACrF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACvE,KAAK,MAAM,CAAE,SAAS,EAAE,QAAQ,CAAE,IAAI,IAAI,CAAC,UAAU,EAAE;YACrD,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;iBAC5C,GAAG,CAAC,CAAC,IAAI,EAAU,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,WAAW,QAAQ,GAAG,CAAC,CAAC;YAC/D,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,MAAM,EAAE,CAAC,CAAC;gBAClD,IAAA,sBAAS,EAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;aAC3C;SACF;IACH,CAAC;CACF;AAxBD,sDAwBC","sourcesContent":["import type { NamedNode } from 'n3';\nimport { DataFactory } from 'n3';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpResponse } from '../../../server/HttpResponse';\nimport { addHeader } from '../../../util/HeaderUtil';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataWriter } from './MetadataWriter';\n\n/**\n * A {@link MetadataWriter} that takes a linking metadata predicates to Link header \"rel\" values.\n * The values of the objects will be put in a Link header with the corresponding \"rel\" value.\n */\nexport class LinkRelMetadataWriter extends MetadataWriter {\n  private readonly linkRelMap: Map<NamedNode, string>;\n  protected readonly logger = getLoggerFor(this);\n\n  public constructor(linkRelMap: Record<string, string>) {\n    super();\n\n    this.linkRelMap = new Map<NamedNode, string>();\n    for (const [ key, value ] of Object.entries(linkRelMap)) {\n      this.linkRelMap.set(DataFactory.namedNode(key), value);\n    }\n  }\n\n  public async handle(input: { response: HttpResponse; metadata: RepresentationMetadata }): Promise<void> {\n    this.logger.debug(`Available link relations: ${this.linkRelMap.size}`);\n    for (const [ predicate, relValue ] of this.linkRelMap) {\n      const values = input.metadata.getAll(predicate)\n        .map((term): string => `<${term.value}>; rel=\"${relValue}\"`);\n      if (values.length > 0) {\n        this.logger.debug(`Adding Link header ${values}`);\n        addHeader(input.response, 'Link', values);\n      }\n    }\n  }\n}\n"]}