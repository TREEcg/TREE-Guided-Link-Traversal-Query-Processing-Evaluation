{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/logging/Logger.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAC9B,sDAA8B;AAoF9B;;;GAGG;AACH,MAAsB,UAAU;IAAhC;QAGmB,YAAO,GAAG,GAAgB,EAAE,CAAC,CAAC;YAC7C,GAAG,EAAE,iBAAO,CAAC,GAAG;YAChB,SAAS,EAAE,iBAAO,CAAC,QAAQ;SAC5B,CAAC,CAAC;IAyBL,CAAC;IAvBQ,KAAK,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;IAEM,IAAI,CAAC,OAAe;QACzB,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;IAEM,IAAI,CAAC,OAAe;QACzB,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;IAEM,OAAO,CAAC,OAAe;QAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACtD,CAAC;IAEM,KAAK,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;CACF;AA/BD,gCA+BC;AAED;;;GAGG;AACH,MAAa,cAAe,SAAQ,UAAU;IAG5C,YAAmB,MAAoB;QACrC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,GAAG,CAAC,KAAe,EAAE,OAAe,EAAE,IAAkB;QAC7D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAZD,wCAYC","sourcesContent":["import cluster from 'cluster';\nimport process from 'process';\nimport type { LogLevel } from './LogLevel';\n\nexport interface LogMetadata {\n  /** Is the current process the Primary process */\n  isPrimary: boolean;\n  /** The process id of the current process */\n  pid: number;\n}\n\n/**\n * Logs messages on a specific level.\n *\n * @see getLoggerFor on how to instantiate loggers.\n */\nexport interface SimpleLogger {\n  /**\n   * Log the given message at the given level.\n   * If the internal level is higher than the given level, the message may be voided.\n   * @param level - The level to log at.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  log: (level: LogLevel, message: string, meta?: LogMetadata) => SimpleLogger;\n}\n\n/**\n * Logs messages, with convenience methods to log on a specific level.\n *\n * @see getLoggerFor on how to instantiate loggers.\n */\nexport interface Logger extends SimpleLogger {\n  /**\n   * Log the given message at the given level.\n   * If the internal level is higher than the given level, the message may be voided.\n   * @param level - The level to log at.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  log: (level: LogLevel, message: string, meta?: LogMetadata) => Logger;\n\n  /**\n   * Log a message at the 'error' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  error: (message: string) => Logger;\n\n  /**\n   * Log a message at the 'warn' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  warn: (message: string) => Logger;\n\n  /**\n   * Log a message at the 'info' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  info: (message: string) => Logger;\n\n  /**\n   * Log a message at the 'verbose' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  verbose: (message: string) => Logger;\n\n  /**\n   * Log a message at the 'debug' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  debug: (message: string) => Logger;\n\n  /**\n   * Log a message at the 'silly' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  silly: (message: string) => Logger;\n}\n\n/**\n * Base class that implements all additional {@link BaseLogger} methods,\n * leaving only the implementation of {@link SimpleLogger}.\n */\nexport abstract class BaseLogger implements Logger {\n  public abstract log(level: LogLevel, message: string, meta?: LogMetadata): Logger;\n\n  private readonly getMeta = (): LogMetadata => ({\n    pid: process.pid,\n    isPrimary: cluster.isMaster,\n  });\n\n  public error(message: string): Logger {\n    return this.log('error', message, this.getMeta());\n  }\n\n  public warn(message: string): Logger {\n    return this.log('warn', message, this.getMeta());\n  }\n\n  public info(message: string): Logger {\n    return this.log('info', message, this.getMeta());\n  }\n\n  public verbose(message: string): Logger {\n    return this.log('verbose', message, this.getMeta());\n  }\n\n  public debug(message: string): Logger {\n    return this.log('debug', message, this.getMeta());\n  }\n\n  public silly(message: string): Logger {\n    return this.log('silly', message, this.getMeta());\n  }\n}\n\n/**\n * Implements {@link BaseLogger} around a {@link SimpleLogger},\n * which can be swapped out a runtime.\n */\nexport class WrappingLogger extends BaseLogger {\n  public logger: SimpleLogger;\n\n  public constructor(logger: SimpleLogger) {\n    super();\n    this.logger = logger;\n  }\n\n  public log(level: LogLevel, message: string, meta?: LogMetadata): this {\n    this.logger.log(level, message, meta);\n    return this;\n  }\n}\n"]}