"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetInternalLoggerFactory = exports.setGlobalLoggerFactory = exports.getLoggerFor = void 0;
const LazyLoggerFactory_1 = require("./LazyLoggerFactory");
let loggerFactoryWrapper = new LazyLoggerFactory_1.LazyLoggerFactory();
let classLoggers = new WeakMap();
/**
 * Gets a logger instance for the given class instance.
 *
 * The following shows a typical pattern on how to create loggers:
 * ```
 * class MyClass {
 *   protected readonly logger = getLoggerFor(this);
 * }
 * ```
 * If no class is applicable, a logger can also be created as follows:
 * ```
 * const logger = getLoggerFor('MyFunction');
 * ```
 *
 * @param loggable - A class instance or a class string name.
 */
function getLoggerFor(loggable) {
    let logger;
    // Create a logger with a text label
    if (typeof loggable === 'string') {
        logger = loggerFactoryWrapper.createLogger(loggable);
        // Create or reuse a logger for a specific class
    }
    else {
        const { constructor } = loggable;
        if (classLoggers.has(constructor)) {
            logger = classLoggers.get(constructor);
        }
        else {
            logger = loggerFactoryWrapper.createLogger(constructor.name);
            classLoggers.set(constructor, logger);
        }
    }
    return logger;
}
exports.getLoggerFor = getLoggerFor;
/**
 * Sets the global logger factory.
 * This causes loggers created by {@link getLoggerFor} to delegate to a logger from the given factory.
 * @param loggerFactory - A logger factory.
 */
function setGlobalLoggerFactory(loggerFactory) {
    loggerFactoryWrapper.loggerFactory = loggerFactory;
}
exports.setGlobalLoggerFactory = setGlobalLoggerFactory;
/**
 * Resets the internal logger factory, which holds the global logger factory.
 * For testing purposes only.
 */
function resetInternalLoggerFactory(factory = new LazyLoggerFactory_1.LazyLoggerFactory()) {
    loggerFactoryWrapper = factory;
    classLoggers = new WeakMap();
}
exports.resetInternalLoggerFactory = resetInternalLoggerFactory;
//# sourceMappingURL=LogUtil.js.map