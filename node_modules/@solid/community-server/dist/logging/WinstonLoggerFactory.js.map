{"version":3,"file":"WinstonLoggerFactory.js","sourceRoot":"","sources":["../../src/logging/WinstonLoggerFactory.ts"],"names":[],"mappings":";;;AAAA,qCAA2D;AAI3D,mDAAgD;AAEhD;;;;;GAKG;AACH,MAAa,oBAAoB;IAG/B,YAAmB,KAAa;QAIf,gBAAW,GAAG,CAAC,IAAiB,EAAU,EAAE;YAC3D,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,SAAS,CAAC;aAClB;YACD,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;QAClC,CAAC,CAAC;QARA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IASM,YAAY,CAAC,KAAa;QAC/B,OAAO,IAAI,6BAAa,CAAC,IAAA,sBAAY,EAAC;YACpC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,gBAAM,CAAC,OAAO,CACpB,gBAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,EACvB,gBAAM,CAAC,QAAQ,EAAE,EACjB,gBAAM,CAAC,SAAS,EAAE,EAClB,gBAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,CAAE,EAAC,CAAC,EAC5E,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EACtE,EAAU,EAAE,CAC7B,GAAG,SAAS,KAAK,UAAU,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,UAAU,KAAK,OAAO,EAAE,CAAC,CACxF;YACD,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAE;SACpC,CAAC,CAAC,CAAC;IACN,CAAC;IAES,gBAAgB;QACxB,OAAO,CAAE,IAAI,oBAAU,CAAC,OAAO,EAAE,CAAE,CAAC;IACtC,CAAC;CACF;AAjCD,oDAiCC","sourcesContent":["import { createLogger, format, transports } from 'winston';\nimport type * as Transport from 'winston-transport';\nimport type { Logger, LogMetadata } from './Logger';\nimport type { LoggerFactory } from './LoggerFactory';\nimport { WinstonLogger } from './WinstonLogger';\n\n/**\n * Uses the winston library to create loggers for the given logging level.\n * By default, it will print to the console with colorized logging levels.\n *\n * This creates instances of {@link WinstonLogger}.\n */\nexport class WinstonLoggerFactory implements LoggerFactory {\n  private readonly level: string;\n\n  public constructor(level: string) {\n    this.level = level;\n  }\n\n  private readonly clusterInfo = (meta: LogMetadata): string => {\n    if (meta.isPrimary) {\n      return 'Primary';\n    }\n    return `W-${meta.pid ?? '???'}`;\n  };\n\n  public createLogger(label: string): Logger {\n    return new WinstonLogger(createLogger({\n      level: this.level,\n      format: format.combine(\n        format.label({ label }),\n        format.colorize(),\n        format.timestamp(),\n        format.metadata({ fillExcept: [ 'level', 'timestamp', 'label', 'message' ]}),\n        format.printf(({ level: levelInner, message, label: labelInner, timestamp, metadata: meta }:\n        Record<string, any>): string =>\n          `${timestamp} [${labelInner}] {${this.clusterInfo(meta)}} ${levelInner}: ${message}`),\n      ),\n      transports: this.createTransports(),\n    }));\n  }\n\n  protected createTransports(): Transport[] {\n    return [ new transports.Console() ];\n  }\n}\n"]}