{"version":3,"file":"SeededPodInitializer.js","sourceRoot":"","sources":["../../src/init/SeededPodInitializer.ts"],"names":[],"mappings":";;;AAAA,uCAAoC;AAEpC,gDAAkD;AAClD,+CAA4C;AAE5C;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,yBAAW;IAMnD,YAAmB,mBAAwC,EAAE,cAA6B;QACxF,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAQ,EAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAElE,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,aAAa,EAAE;YACvC,MAAM,MAAM,GAAG;gBACb,eAAe,EAAE,KAAK,CAAC,QAAQ;gBAC/B,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,IAAI;gBACd,GAAG,KAAK;aACT,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAEtD,0BAA0B;YAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACvE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YAEnE,iGAAiG;YACjG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC;YAC/E,KAAK,IAAI,CAAC,CAAC;SACZ;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,eAAe,CAAC,CAAC;IACxD,CAAC;CACF;AAzCD,oDAyCC","sourcesContent":["import { readJson } from 'fs-extra';\nimport type { RegistrationManager } from '../identity/interaction/email-password/util/RegistrationManager';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { Initializer } from './Initializer';\n\n/**\n * Uses a {@link RegistrationManager} to initialize accounts and pods\n * for all seeded pods. Reads the pod settings from seededPodConfigJson.\n */\nexport class SeededPodInitializer extends Initializer {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly registrationManager: RegistrationManager;\n  private readonly configFilePath: string | null;\n\n  public constructor(registrationManager: RegistrationManager, configFilePath: string | null) {\n    super();\n    this.registrationManager = registrationManager;\n    this.configFilePath = configFilePath;\n  }\n\n  public async handle(): Promise<void> {\n    if (!this.configFilePath) {\n      return;\n    }\n    const configuration = await readJson(this.configFilePath, 'utf8');\n\n    let count = 0;\n    for await (const input of configuration) {\n      const config = {\n        confirmPassword: input.password,\n        createPod: true,\n        createWebId: true,\n        register: true,\n        ...input,\n      };\n\n      this.logger.info(`Initializing pod ${input.podName}`);\n\n      // Validate the input JSON\n      const validated = this.registrationManager.validateInput(config, true);\n      this.logger.debug(`Validated input: ${JSON.stringify(validated)}`);\n\n      // Register and/or create a pod as requested. Potentially does nothing if all booleans are false.\n      await this.registrationManager.register(validated, true);\n      this.logger.info(`Initialized seeded pod and account for \"${input.podName}\".`);\n      count += 1;\n    }\n    this.logger.info(`Initialized ${count} seeded pods.`);\n  }\n}\n"]}