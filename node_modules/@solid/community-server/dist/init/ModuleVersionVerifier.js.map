{"version":3,"file":"ModuleVersionVerifier.js","sourceRoot":"","sources":["../../src/init/ModuleVersionVerifier.ts"],"names":[],"mappings":";;;AACA,+CAAmD;AACnD,+CAA4C;AAE5C;;;;;GAKG;AACH,MAAa,qBAAsB,SAAQ,yBAAW;IAIpD,YAAmB,UAAkB,EAAE,OAAwC;QAC7E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,MAAM,GAAG,GAAG,MAAM,IAAA,0BAAe,GAAE,CAAC;QACpC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;CACF;AAdD,sDAcC","sourcesContent":["import type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport { readPackageJson } from '../util/PathUtil';\nimport { Initializer } from './Initializer';\n\n/**\n * This initializer simply writes the version number of the server to the storage.\n * This will be relevant in the future when we look into migration initializers.\n *\n * It automatically parses the version number from the `package.json`.\n */\nexport class ModuleVersionVerifier extends Initializer {\n  private readonly storageKey: string;\n  private readonly storage: KeyValueStorage<string, string>;\n\n  public constructor(storageKey: string, storage: KeyValueStorage<string, string>) {\n    super();\n    this.storageKey = storageKey;\n    this.storage = storage;\n  }\n\n  public async handle(): Promise<void> {\n    const pkg = await readPackageJson();\n    await this.storage.set(this.storageKey, pkg.version);\n  }\n}\n"]}