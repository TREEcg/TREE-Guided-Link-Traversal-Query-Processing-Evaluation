{"version":3,"file":"KeyExtractor.js","sourceRoot":"","sources":["../../../../src/init/variables/extractors/KeyExtractor.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,YAAa,SAAQ,uCAAkB;IAIlD,YAAmB,GAAW,EAAE,YAAsB;QACpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAe;QACjC,OAAO,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpF,CAAC;CACF;AAbD,oCAaC","sourcesContent":["import type { Shorthand } from '../Types';\nimport { ShorthandExtractor } from './ShorthandExtractor';\n\n/**\n * A simple {@link ShorthandExtractor} that extracts a single value from the input map.\n * Returns the default value if it was defined in case no value was found in the map.\n */\nexport class KeyExtractor extends ShorthandExtractor {\n  private readonly key: string;\n  private readonly defaultValue: unknown;\n\n  public constructor(key: string, defaultValue?: unknown) {\n    super();\n    this.key = key;\n    this.defaultValue = defaultValue;\n  }\n\n  public async handle(args: Shorthand): Promise<unknown> {\n    return typeof args[this.key] === 'undefined' ? this.defaultValue : args[this.key];\n  }\n}\n"]}