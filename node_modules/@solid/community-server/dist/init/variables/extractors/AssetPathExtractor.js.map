{"version":3,"file":"AssetPathExtractor.js","sourceRoot":"","sources":["../../../../src/init/variables/extractors/AssetPathExtractor.ts"],"names":[],"mappings":";;;AAAA,qDAA0D;AAE1D,6DAA0D;AAE1D;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,uCAAkB;IAIxD,YAAmB,GAAW,EAAE,WAAoB;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAe;QACjC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC;QAChD,IAAI,IAAI,EAAE;YACR,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,WAAW,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;aACjD;YAED,OAAO,IAAA,2BAAgB,EAAC,IAAI,CAAC,CAAC;SAC/B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAtBD,gDAsBC","sourcesContent":["import { resolveAssetPath } from '../../../util/PathUtil';\nimport type { Shorthand } from '../Types';\nimport { ShorthandExtractor } from './ShorthandExtractor';\n\n/**\n * A {@link ShorthandExtractor} that converts a path value to an absolute asset path\n * by making use of `resolveAssetPath`.\n * Returns the default path in case it is defined and no path was found in the map.\n */\nexport class AssetPathExtractor extends ShorthandExtractor {\n  private readonly key: string;\n  private readonly defaultPath?: string;\n\n  public constructor(key: string, defaultPath?: string) {\n    super();\n    this.key = key;\n    this.defaultPath = defaultPath;\n  }\n\n  public async handle(args: Shorthand): Promise<unknown> {\n    const path = args[this.key] ?? this.defaultPath;\n    if (path) {\n      if (typeof path !== 'string') {\n        throw new Error(`Invalid ${this.key} argument`);\n      }\n\n      return resolveAssetPath(path);\n    }\n\n    return null;\n  }\n}\n"]}