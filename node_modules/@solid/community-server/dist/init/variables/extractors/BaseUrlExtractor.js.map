{"version":3,"file":"BaseUrlExtractor.js","sourceRoot":"","sources":["../../../../src/init/variables/extractors/BaseUrlExtractor.ts"],"names":[],"mappings":";;;AAAA,qDAA6D;AAE7D,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,gBAAiB,SAAQ,uCAAkB;IAGtD,YAAmB,WAAW,GAAG,IAAI;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAe;QACjC,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;YACpC,OAAO,IAAA,8BAAmB,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1C;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC;QAC3C,OAAO,oBAAoB,IAAI,GAAG,CAAC;IACrC,CAAC;CACF;AAfD,4CAeC","sourcesContent":["import { ensureTrailingSlash } from '../../../util/PathUtil';\nimport type { Shorthand } from '../Types';\nimport { ShorthandExtractor } from './ShorthandExtractor';\n\n/**\n * A {@link ShorthandExtractor} that that generates the base URL based on the input `baseUrl` value,\n * or by using the port if the first isn't provided.\n */\nexport class BaseUrlExtractor extends ShorthandExtractor {\n  private readonly defaultPort: number;\n\n  public constructor(defaultPort = 3000) {\n    super();\n    this.defaultPort = defaultPort;\n  }\n\n  public async handle(args: Shorthand): Promise<unknown> {\n    if (typeof args.baseUrl === 'string') {\n      return ensureTrailingSlash(args.baseUrl);\n    }\n    const port = args.port ?? this.defaultPort;\n    return `http://localhost:${port}/`;\n  }\n}\n"]}