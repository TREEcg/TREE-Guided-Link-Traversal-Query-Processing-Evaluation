{"version":3,"file":"CombinedShorthandResolver.js","sourceRoot":"","sources":["../../../src/init/variables/CombinedShorthandResolver.ts"],"names":[],"mappings":";;;AAAA,2DAAiE;AAEjE,2DAAwD;AAExD;;GAEG;AACH,MAAa,yBAA0B,SAAQ,qCAAiB;IAG9D,YAAmB,SAA6C;QAC9D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA8B;QAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;QACrC,KAAK,MAAM,CAAE,IAAI,EAAE,QAAQ,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC/D,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAY,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,yCAAyC,IAAI,KAAK,IAAA,8BAAkB,EAAC,GAAG,CAAC,EAAE,CAAC,CAAC;aAC9F;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAnBD,8DAmBC","sourcesContent":["import { createErrorMessage } from '../../util/errors/ErrorUtil';\nimport type { ShorthandExtractor } from './extractors/ShorthandExtractor';\nimport { ShorthandResolver } from './ShorthandResolver';\n\n/**\n * Generates variable values by running a set of {@link ShorthandExtractor}s on the input.\n */\nexport class CombinedShorthandResolver extends ShorthandResolver {\n  public readonly resolvers: Record<string, ShorthandExtractor>;\n\n  public constructor(resolvers: Record<string, ShorthandExtractor>) {\n    super();\n    this.resolvers = resolvers;\n  }\n\n  public async handle(input: Record<string, unknown>): Promise<Record<string, unknown>> {\n    const vars: Record<string, any> = {};\n    for (const [ name, computer ] of Object.entries(this.resolvers)) {\n      try {\n        vars[name] = await computer.handleSafe(input);\n      } catch (err: unknown) {\n        throw new Error(`Error in computing value for variable ${name}: ${createErrorMessage(err)}`);\n      }\n    }\n    return vars;\n  }\n}\n"]}