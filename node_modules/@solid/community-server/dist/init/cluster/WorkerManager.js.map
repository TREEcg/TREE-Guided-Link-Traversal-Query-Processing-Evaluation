{"version":3,"file":"WorkerManager.js","sourceRoot":"","sources":["../../../src/init/cluster/WorkerManager.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAG7C;;GAEG;AACH,MAAa,aAAc,SAAQ,yBAAW;IAG5C,YAAmB,cAA8B;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,EAAE;YAC3C,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;SACpC;IACH,CAAC;CACF;AAbD,sCAaC","sourcesContent":["import { Initializer } from '../Initializer';\nimport type { ClusterManager } from './ClusterManager';\n\n/**\n * Spawns the necessary workers when starting in multithreaded mode.\n */\nexport class WorkerManager extends Initializer {\n  private readonly clusterManager: ClusterManager;\n\n  public constructor(clusterManager: ClusterManager) {\n    super();\n    this.clusterManager = clusterManager;\n  }\n\n  public async handle(): Promise<void> {\n    if (!this.clusterManager.isSingleThreaded()) {\n      this.clusterManager.spawnWorkers();\n    }\n  }\n}\n"]}