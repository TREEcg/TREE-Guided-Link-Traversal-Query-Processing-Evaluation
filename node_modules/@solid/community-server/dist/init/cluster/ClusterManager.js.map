{"version":3,"file":"ClusterManager.js","sourceRoot":"","sources":["../../../src/init/cluster/ClusterManager.ts"],"names":[],"mappings":";;;;;;AACA,sDAA8B;AAC9B,2BAA0B;AAC1B,mDAAqD;AACrD,+EAA4E;AAE5E;;GAEG;AACH,IAAK,WAOJ;AAPD,WAAK,WAAW;IACd,0CAA0C;IAC1C,uDAAS,CAAA;IACT,0CAA0C;IAC1C,iEAAc,CAAA;IACd,oEAAoE;IACpE,+CAAK,CAAA;AACP,CAAC,EAPI,WAAW,KAAX,WAAW,QAOf;AAED;;;;GAIG;AACH,SAAS,aAAa,CAAC,OAAe;IACpC,IAAI,OAAO,IAAI,CAAC,EAAE;QAChB,OAAO,WAAW,CAAC,SAAS,CAAC;KAC9B;IACD,IAAI,OAAO,KAAK,CAAC,EAAE;QACjB,OAAO,WAAW,CAAC,cAAc,CAAC;KACnC;IACD,OAAO,WAAW,CAAC,KAAK,CAAC;AAC3B,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAa,cAAc;IAKzB,YAAmB,OAAe;QAJjB,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAK3C,MAAM,KAAK,GAAG,IAAA,SAAI,GAAE,CAAC,MAAM,CAAC;QAE5B,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE;YACrB,MAAM,IAAI,yCAAmB,CAAC,oEAAoE,CAAC,CAAC;SACrG;QAED,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;QAC5F,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,OAAO,UAAU,CAAC,CAAC;QAEvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACrC,iBAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAW,EAAQ,EAAE;gBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;SACJ;QAED,iBAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAc,EAAQ,EAAE;YAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,GAAG,eAAe,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,CAAC;YACb,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,uCAAuC,CAAC,CAAC;aAC9E;QACH,CAAC,CAAC,CAAC;QAEH,iBAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,IAAY,EAAE,MAAc,EAAQ,EAAE;YACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,GAAG,mBAAmB,IAAI,eAAe,MAAM,EAAE,CAAC,CAAC;YAC7F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC1C,iBAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAW,EAAQ,EAAE;gBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,cAAc,CAAC;IACzD,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,iBAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,iBAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;CACF;AArED,wCAqEC","sourcesContent":["import type { Worker } from 'cluster';\nimport cluster from 'cluster';\nimport { cpus } from 'os';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\n\n/**\n * Different cluster modes.\n */\nenum ClusterMode {\n  /** Scales in relation to `core_count`. */\n  autoScale,\n  /** Single threaded mode, no clustering */\n  singleThreaded,\n  /** Fixed amount of workers being forked. (limited to core_count) */\n  fixed\n}\n\n/**\n * Convert workers amount to {@link ClusterMode}\n * @param workers - Amount of workers\n * @returns ClusterMode enum value\n */\nfunction toClusterMode(workers: number): ClusterMode {\n  if (workers <= 0) {\n    return ClusterMode.autoScale;\n  }\n  if (workers === 1) {\n    return ClusterMode.singleThreaded;\n  }\n  return ClusterMode.fixed;\n}\n\n/**\n * This class is responsible for deciding how many affective workers are needed.\n * It also contains the logic for respawning workers when they are killed by the os.\n *\n * The workers values are interpreted as follows:\n * value | actual workers |\n * ------|--------------|\n * `-m` | `num_cores - m` workers _(autoscale)_ (`m < num_cores`) |\n * `-1` | `num_cores - 1` workers _(autoscale)_ |\n * `0` | `num_cores` workers _(autoscale)_ |\n * `1` | `single threaded mode` _(default)_ |\n * `n` | `n` workers |\n */\nexport class ClusterManager {\n  private readonly logger = getLoggerFor(this);\n  private readonly workers: number;\n  private readonly clusterMode: ClusterMode;\n\n  public constructor(workers: number) {\n    const cores = cpus().length;\n\n    if (workers <= -cores) {\n      throw new InternalServerError('Invalid workers value (should be in the interval ]-num_cores, +âˆž).');\n    }\n\n    this.workers = toClusterMode(workers) === ClusterMode.autoScale ? cores + workers : workers;\n    this.clusterMode = toClusterMode(this.workers);\n  }\n\n  /**\n   * Spawn all required workers.\n   */\n  public spawnWorkers(): void {\n    let counter = 0;\n    this.logger.info(`Setting up ${this.workers} workers`);\n\n    for (let i = 0; i < this.workers; i++) {\n      cluster.fork().on('message', (msg: string): void => {\n        this.logger.info(msg);\n      });\n    }\n\n    cluster.on('online', (worker: Worker): void => {\n      this.logger.info(`Worker ${worker.process.pid} is listening`);\n      counter += 1;\n      if (counter === this.workers) {\n        this.logger.info(`All ${this.workers} requested workers have been started.`);\n      }\n    });\n\n    cluster.on('exit', (worker: Worker, code: number, signal: string): void => {\n      this.logger.warn(`Worker ${worker.process.pid} died with code ${code} and signal ${signal}`);\n      this.logger.warn('Starting a new worker');\n      cluster.fork().on('message', (msg: string): void => {\n        this.logger.info(msg);\n      });\n    });\n  }\n\n  /**\n   * Check whether the CSS server was booted in single threaded mode.\n   * @returns True is single threaded.\n   */\n  public isSingleThreaded(): boolean {\n    return this.clusterMode === ClusterMode.singleThreaded;\n  }\n\n  /**\n   * Whether the calling process is the primary process.\n   * @returns True if primary\n   */\n  public isPrimary(): boolean {\n    return cluster.isMaster;\n  }\n\n  /**\n   * Whether the calling process is a worker process.\n   * @returns True if worker\n   */\n  public isWorker(): boolean {\n    return cluster.isWorker;\n  }\n}\n"]}