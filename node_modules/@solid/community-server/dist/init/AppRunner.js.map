{"version":3,"file":"AppRunner.js","sourceRoot":"","sources":["../../src/init/AppRunner.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable unicorn/no-process-exit */\nimport type { WriteStream } from 'tty';\nimport type { IComponentsManagerBuilderOptions } from 'componentsjs';\nimport { ComponentsManager } from 'componentsjs';\nimport yargs from 'yargs';\nimport { LOG_LEVELS } from '../logging/LogLevel';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { createErrorMessage, isError } from '../util/errors/ErrorUtil';\nimport { InternalServerError } from '../util/errors/InternalServerError';\nimport { resolveModulePath, resolveAssetPath } from '../util/PathUtil';\nimport type { App } from './App';\nimport type { CliExtractor } from './cli/CliExtractor';\nimport type { CliResolver } from './CliResolver';\nimport { listSingleThreadedComponents } from './cluster/SingleThreaded';\nimport type { ShorthandResolver } from './variables/ShorthandResolver';\nimport type { CliArgv, Shorthand, VariableBindings } from './variables/Types';\n\nconst DEFAULT_CONFIG = resolveModulePath('config/default.json');\n\nconst DEFAULT_CLI_RESOLVER = 'urn:solid-server-app-setup:default:CliResolver';\nconst DEFAULT_APP = 'urn:solid-server:default:App';\n\nconst CORE_CLI_PARAMETERS = {\n  config: { type: 'array', alias: 'c', default: [ DEFAULT_CONFIG ], requiresArg: true },\n  loggingLevel: { type: 'string', alias: 'l', default: 'info', requiresArg: true, choices: LOG_LEVELS },\n  mainModulePath: { type: 'string', alias: 'm', requiresArg: true },\n} as const;\n\nconst ENV_VAR_PREFIX = 'CSS';\n\n/**\n * A class that can be used to instantiate and start a server based on a Component.js configuration.\n */\nexport class AppRunner {\n  private readonly logger = getLoggerFor(this);\n\n  /**\n   * Starts the server with a given config.\n   * This method can be used to start the server from within another JavaScript application.\n   *\n   * Keys of the `variableBindings` object should be Components.js variables.\n   * E.g.: `{ 'urn:solid-server:default:variable:rootFilePath': '.data' }`.\n   *\n   * `shorthand` are CLI argument names and their corresponding values.\n   * E.g.: `{ rootFilePath: '.data' }`.\n   * Abbreviated parameter names can not be used, so `{ f: '.data' }` would not work.\n   *\n   * The values in `variableBindings` take priority over those in `shorthand`.\n   *\n   * @param loaderProperties - Components.js loader properties.\n   * @param configFile - Path to the server config file(s).\n   * @param variableBindings - Bindings of Components.js variables.\n   * @param shorthand - Shorthand values that need to be resolved.\n   */\n  public async run(\n    loaderProperties: IComponentsManagerBuilderOptions<App>,\n    configFile: string | string[],\n    variableBindings?: VariableBindings,\n    shorthand?: Shorthand,\n  ): Promise<void> {\n    const app = await this.create(loaderProperties, configFile, variableBindings, shorthand);\n    await app.start();\n  }\n\n  /**\n   * Returns an App object, created with the given config, that can start and stop the Solid server.\n   *\n   * Keys of the `variableBindings` object should be Components.js variables.\n   * E.g.: `{ 'urn:solid-server:default:variable:rootFilePath': '.data' }`.\n   *\n   * `shorthand` are CLI argument names and their corresponding values.\n   * E.g.: `{ rootFilePath: '.data' }`.\n   * Abbreviated parameter names can not be used, so `{ f: '.data' }` would not work.\n   *\n   * The values in `variableBindings` take priority over those in `shorthand`.\n   *\n   * @param loaderProperties - Components.js loader properties.\n   * @param configFile - Path to the server config file(s).\n   * @param variableBindings - Bindings of Components.js variables.\n   * @param shorthand - Shorthand values that need to be resolved.\n   */\n  public async create(\n    loaderProperties: IComponentsManagerBuilderOptions<App>,\n    configFile: string | string[],\n    variableBindings?: VariableBindings,\n    shorthand?: Shorthand,\n  ): Promise<App> {\n    const componentsManager = await this.createComponentsManager<any>(loaderProperties, configFile);\n\n    const cliResolver = await this.createCliResolver(componentsManager);\n    const parsedVariables = await this.resolveShorthand(cliResolver.shorthandResolver, { ...shorthand });\n\n    // Create the application using the translated variable values.\n    // `variableBindings` override those resolved from the `shorthand` input.\n    return this.createApp(componentsManager, { ...parsedVariables, ...variableBindings });\n  }\n\n  /**\n   * Starts the server as a command-line application.\n   * Will exit the process on failure.\n   *\n   * Made non-async to lower the risk of unhandled promise rejections.\n   * This is only relevant when this is used to start as a Node.js application on its own,\n   * if you use this as part of your code you probably want to use the async version.\n   *\n   * @param argv - Command line arguments.\n   * @param stderr - Stream that should be used to output errors before the logger is enabled.\n   */\n  public runCliSync({ argv, stderr = process.stderr }: { argv?: CliArgv; stderr?: WriteStream }): void {\n    this.runCli(argv).catch((error): never => {\n      stderr.write(createErrorMessage(error));\n      process.exit(1);\n    });\n  }\n\n  /**\n   * Starts the server as a command-line application.\n   * @param argv - Command line arguments.\n   */\n  public async runCli(argv?: CliArgv): Promise<void> {\n    const app = await this.createCli(argv);\n    try {\n      await app.start();\n    } catch (error: unknown) {\n      this.logger.error(`Could not start the server: ${createErrorMessage(error)}`);\n      this.resolveError('Could not start the server', error);\n    }\n  }\n\n  /**\n   * Returns an App object, created by parsing the Command line arguments, that can start and stop the Solid server.\n   * Will exit the process on failure.\n   *\n   * @param argv - Command line arguments.\n   */\n  public async createCli(argv: CliArgv = process.argv): Promise<App> {\n    // Parse only the core CLI arguments needed to load the configuration\n    const yargv = yargs(argv.slice(2))\n      .usage('node ./bin/server.js [args]')\n      .options(CORE_CLI_PARAMETERS)\n      // We disable help here as it would only show the core parameters\n      .help(false)\n      // We also read from environment variables\n      .env(ENV_VAR_PREFIX);\n\n    const params = await yargv.parse();\n\n    const loaderProperties = {\n      mainModulePath: resolveAssetPath(params.mainModulePath),\n      dumpErrorState: true,\n      logLevel: params.loggingLevel,\n      typeChecking: false,\n    };\n\n    const configs = params.config.map(resolveAssetPath);\n\n    // Create the Components.js manager used to build components from the provided config\n    let componentsManager: ComponentsManager<any>;\n    try {\n      componentsManager = await this.createComponentsManager(loaderProperties, configs);\n    } catch (error: unknown) {\n      // Print help of the expected core CLI parameters\n      const help = await yargv.getHelp();\n      this.resolveError(`${help}\\n\\nCould not build the config files from ${configs}`, error);\n    }\n\n    // Build the CLI components and use them to generate values for the Components.js variables\n    const variables = await this.cliToVariables(componentsManager, argv);\n\n    // Build and start the actual server application using the generated variable values\n    return await this.createApp(componentsManager, variables);\n  }\n\n  /**\n   * Creates the Components Manager that will be used for instantiating.\n   */\n  public async createComponentsManager<T>(\n    loaderProperties: IComponentsManagerBuilderOptions<T>,\n    configFile: string | string[],\n  ): Promise<ComponentsManager<T>> {\n    const componentsManager = await ComponentsManager.build(loaderProperties);\n    for (const config of Array.isArray(configFile) ? configFile : [ configFile ]) {\n      await componentsManager.configRegistry.register(config);\n    }\n    return componentsManager;\n  }\n\n  /**\n   * Handles the first Components.js instantiation.\n   * Uses it to extract the CLI shorthand values and use those to create variable bindings.\n   */\n  private async cliToVariables(componentsManager: ComponentsManager<CliResolver>, argv: CliArgv):\n  Promise<VariableBindings> {\n    const cliResolver = await this.createCliResolver(componentsManager);\n    const shorthand = await this.extractShorthand(cliResolver.cliExtractor, argv);\n    return await this.resolveShorthand(cliResolver.shorthandResolver, shorthand);\n  }\n\n  /**\n   * Instantiates the {@link CliResolver}.\n   */\n  private async createCliResolver(componentsManager: ComponentsManager<CliResolver>): Promise<CliResolver> {\n    try {\n      // Create a CliResolver, which combines a CliExtractor and a VariableResolver\n      return await componentsManager.instantiate(DEFAULT_CLI_RESOLVER, {});\n    } catch (error: unknown) {\n      this.resolveError(`Could not create the CLI resolver`, error);\n    }\n  }\n\n  /**\n   * Uses the {@link CliExtractor} to convert the CLI args to a {@link Shorthand} object.\n   */\n  private async extractShorthand(cliExtractor: CliExtractor, argv: CliArgv): Promise<Shorthand> {\n    try {\n      // Convert CLI args to CLI bindings\n      return await cliExtractor.handleSafe(argv);\n    } catch (error: unknown) {\n      this.resolveError(`Could not parse the CLI parameters`, error);\n    }\n  }\n\n  /**\n   * Uses the {@link ShorthandResolver} to convert {@link Shorthand} to {@link VariableBindings} .\n   */\n  private async resolveShorthand(shorthandResolver: ShorthandResolver, shorthand: Shorthand):\n  Promise<VariableBindings> {\n    try {\n      // Convert CLI bindings into variable bindings\n      return await shorthandResolver.handleSafe(shorthand);\n    } catch (error: unknown) {\n      this.resolveError(`Could not resolve the shorthand values`, error);\n    }\n  }\n\n  /**\n   * The second Components.js instantiation,\n   * where the App is created and started using the variable mappings.\n   */\n  private async createApp(componentsManager: ComponentsManager<App>, variables: Record<string, unknown>): Promise<App> {\n    let app: App;\n    // Create the app\n    try {\n      app = await componentsManager.instantiate(DEFAULT_APP, { variables });\n    } catch (error: unknown) {\n      this.resolveError(`Could not create the server`, error);\n    }\n\n    // Ensure thread safety\n    if (!app.clusterManager.isSingleThreaded()) {\n      const violatingClasses = await listSingleThreadedComponents(componentsManager);\n      if (violatingClasses.length > 0) {\n        const verb = violatingClasses.length > 1 ? 'are' : 'is';\n        const detailedError = new InternalServerError(\n          `[${violatingClasses.join(', ')}] ${verb} not threadsafe and should not be run in multithreaded setups!`,\n        );\n        this.resolveError('Cannot run a singlethreaded-only component in a multithreaded setup!', detailedError);\n      }\n    }\n    return app;\n  }\n\n  /**\n   * Throws a new error that provides additional information through the extra message.\n   * Also appends the stack trace to the message.\n   * This is needed for errors that are thrown before the logger is created as we can't log those the standard way.\n   */\n  private resolveError(message: string, error: unknown): never {\n    let errorMessage = `${message}\\nCause: ${createErrorMessage(error)}\\n`;\n    if (isError(error)) {\n      errorMessage += `${error.stack}\\n`;\n    }\n    throw new Error(errorMessage);\n  }\n}\n"]}