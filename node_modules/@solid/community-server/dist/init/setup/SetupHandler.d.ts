import type { Representation } from '../../http/representation/Representation';
import { BaseInteractionHandler } from '../../identity/interaction/BaseInteractionHandler';
import type { RegistrationManager } from '../../identity/interaction/email-password/util/RegistrationManager';
import type { InteractionHandlerInput } from '../../identity/interaction/InteractionHandler';
import type { Initializer } from '../Initializer';
export interface SetupHandlerArgs {
    /**
     * Used for registering a pod during setup.
     */
    registrationManager?: RegistrationManager;
    /**
     * Initializer to call in case no registration procedure needs to happen.
     * This Initializer should make sure the necessary resources are there so the server can work correctly.
     */
    initializer?: Initializer;
}
/**
 * On POST requests, runs an initializer and/or performs a registration step, both optional.
 */
export declare class SetupHandler extends BaseInteractionHandler {
    protected readonly logger: import("../..").Logger;
    private readonly registrationManager?;
    private readonly initializer?;
    constructor(args: SetupHandlerArgs);
    protected handlePost({ operation }: InteractionHandlerInput): Promise<Representation>;
    /**
     * Call the initializer.
     * Errors if no initializer was defined.
     */
    private initialize;
    /**
     * Register a user based on the given input.
     * Errors if no registration manager is defined.
     */
    private register;
}
