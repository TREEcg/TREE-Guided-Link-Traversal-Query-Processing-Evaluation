"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupHandler = void 0;
const BasicRepresentation_1 = require("../../http/representation/BasicRepresentation");
const BaseInteractionHandler_1 = require("../../identity/interaction/BaseInteractionHandler");
const LogUtil_1 = require("../../logging/LogUtil");
const ContentTypes_1 = require("../../util/ContentTypes");
const NotImplementedHttpError_1 = require("../../util/errors/NotImplementedHttpError");
const StreamUtil_1 = require("../../util/StreamUtil");
/**
 * On POST requests, runs an initializer and/or performs a registration step, both optional.
 */
class SetupHandler extends BaseInteractionHandler_1.BaseInteractionHandler {
    constructor(args) {
        super({});
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.registrationManager = args.registrationManager;
        this.initializer = args.initializer;
    }
    async handlePost({ operation }) {
        const json = operation.body.isEmpty ? {} : await (0, StreamUtil_1.readJsonStream)(operation.body.data);
        const output = { initialize: false, registration: false };
        if (json.registration) {
            Object.assign(output, await this.register(json));
            output.registration = true;
        }
        else if (json.initialize) {
            // We only want to initialize if no registration happened
            await this.initialize();
            output.initialize = true;
        }
        this.logger.debug(`Output: ${JSON.stringify(output)}`);
        return new BasicRepresentation_1.BasicRepresentation(JSON.stringify(output), ContentTypes_1.APPLICATION_JSON);
    }
    /**
     * Call the initializer.
     * Errors if no initializer was defined.
     */
    async initialize() {
        if (!this.initializer) {
            throw new NotImplementedHttpError_1.NotImplementedHttpError('This server is not configured with a setup initializer.');
        }
        await this.initializer.handleSafe();
    }
    /**
     * Register a user based on the given input.
     * Errors if no registration manager is defined.
     */
    async register(json) {
        if (!this.registrationManager) {
            throw new NotImplementedHttpError_1.NotImplementedHttpError('This server is not configured to support registration during setup.');
        }
        // Validate the input JSON
        const validated = this.registrationManager.validateInput(json, true);
        this.logger.debug(`Validated input: ${JSON.stringify(validated)}`);
        // Register and/or create a pod as requested. Potentially does nothing if all booleans are false.
        return this.registrationManager.register(validated, true);
    }
}
exports.SetupHandler = SetupHandler;
//# sourceMappingURL=SetupHandler.js.map