{"version":3,"file":"SetupHandler.js","sourceRoot":"","sources":["../../../src/init/setup/SetupHandler.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,8FAA2F;AAG3F,mDAAqD;AACrD,0DAA2D;AAC3D,uFAAoF;AACpF,sDAAuD;AAevD;;GAEG;AACH,MAAa,YAAa,SAAQ,+CAAsB;IAMtD,YAAmB,IAAsB;QACvC,KAAK,CAAC,EAAE,CAAC,CAAC;QANO,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAA2B;QAC/D,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAA,2BAAc,EAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErF,MAAM,MAAM,GAAwB,EAAE,UAAU,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QAC/E,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;aAAM,IAAI,IAAI,CAAC,UAAU,EAAE;YAC1B,yDAAyD;YACzD,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAEvD,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,+BAAgB,CAAC,CAAC;IAC3E,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,UAAU;QACtB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,MAAM,IAAI,iDAAuB,CAAC,yDAAyD,CAAC,CAAC;SAC9F;QACD,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;IACtC,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,QAAQ,CAAC,IAAsB;QAC3C,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,MAAM,IAAI,iDAAuB,CAAC,qEAAqE,CAAC,CAAC;SAC1G;QACD,0BAA0B;QAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAEnE,iGAAiG;QACjG,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;CACF;AAxDD,oCAwDC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { BaseInteractionHandler } from '../../identity/interaction/BaseInteractionHandler';\nimport type { RegistrationManager } from '../../identity/interaction/email-password/util/RegistrationManager';\nimport type { InteractionHandlerInput } from '../../identity/interaction/InteractionHandler';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { APPLICATION_JSON } from '../../util/ContentTypes';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { readJsonStream } from '../../util/StreamUtil';\nimport type { Initializer } from '../Initializer';\n\nexport interface SetupHandlerArgs {\n  /**\n   * Used for registering a pod during setup.\n   */\n  registrationManager?: RegistrationManager;\n  /**\n   * Initializer to call in case no registration procedure needs to happen.\n   * This Initializer should make sure the necessary resources are there so the server can work correctly.\n   */\n  initializer?: Initializer;\n}\n\n/**\n * On POST requests, runs an initializer and/or performs a registration step, both optional.\n */\nexport class SetupHandler extends BaseInteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly registrationManager?: RegistrationManager;\n  private readonly initializer?: Initializer;\n\n  public constructor(args: SetupHandlerArgs) {\n    super({});\n    this.registrationManager = args.registrationManager;\n    this.initializer = args.initializer;\n  }\n\n  protected async handlePost({ operation }: InteractionHandlerInput): Promise<Representation> {\n    const json = operation.body.isEmpty ? {} : await readJsonStream(operation.body.data);\n\n    const output: Record<string, any> = { initialize: false, registration: false };\n    if (json.registration) {\n      Object.assign(output, await this.register(json));\n      output.registration = true;\n    } else if (json.initialize) {\n      // We only want to initialize if no registration happened\n      await this.initialize();\n      output.initialize = true;\n    }\n\n    this.logger.debug(`Output: ${JSON.stringify(output)}`);\n\n    return new BasicRepresentation(JSON.stringify(output), APPLICATION_JSON);\n  }\n\n  /**\n   * Call the initializer.\n   * Errors if no initializer was defined.\n   */\n  private async initialize(): Promise<void> {\n    if (!this.initializer) {\n      throw new NotImplementedHttpError('This server is not configured with a setup initializer.');\n    }\n    await this.initializer.handleSafe();\n  }\n\n  /**\n   * Register a user based on the given input.\n   * Errors if no registration manager is defined.\n   */\n  private async register(json: NodeJS.Dict<any>): Promise<Record<string, any>> {\n    if (!this.registrationManager) {\n      throw new NotImplementedHttpError('This server is not configured to support registration during setup.');\n    }\n    // Validate the input JSON\n    const validated = this.registrationManager.validateInput(json, true);\n    this.logger.debug(`Validated input: ${JSON.stringify(validated)}`);\n\n    // Register and/or create a pod as requested. Potentially does nothing if all booleans are false.\n    return this.registrationManager.register(validated, true);\n  }\n}\n"]}