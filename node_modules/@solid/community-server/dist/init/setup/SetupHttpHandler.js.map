{"version":3,"file":"SetupHttpHandler.js","sourceRoot":"","sources":["../../../src/init/setup/SetupHttpHandler.ts"],"names":[],"mappings":";;;AACA,4FAAyF;AAEzF,uFAAoF;AAEpF,mDAAqD;AAErD,4EAAyE;AAGzE,0DAAsE;AACtE,2FAAwF;AA0BxF;;;;;;;;;GASG;AACH,MAAa,gBAAiB,SAAQ,2CAAoB;IASxD,YAAmB,IAA0B;QAC3C,KAAK,EAAE,CAAC;QATS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAW7C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA6B;QAC1D,QAAQ,SAAS,CAAC,MAAM,EAAE;YACxB,KAAK,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7C,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC/C,OAAO,CAAC,CAAC,MAAM,IAAI,qDAAyB,CAAC,CAAE,SAAS,CAAC,MAAM,CAAE,CAAC,CAAC;SACpE;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,SAAS,CAAC,SAAoB;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,IAAI,yCAAmB,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,wBAAS,CAAC,CAAC;QACpF,OAAO,IAAI,6CAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,UAAU,CAAC,SAAoB;QAC3C,6BAA6B;QAC7B,uCAAuC;QACvC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;YACvC,MAAM,IAAI,GAAG;gBACX,cAAc,EAAE,SAAS,CAAC,IAAI;gBAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,+BAAgB,CAAC,EAAE,CAAC,EAAE,EAAC;gBAC/C,UAAU,EAAE,SAAS,CAAC,MAAM;aAC7B,CAAC;YACF,SAAS,GAAG;gBACV,GAAG,SAAS;gBACZ,IAAI,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC;aAC5C,CAAC;SACH;QAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE9C,OAAO,IAAI,6CAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC;CACF;AA5DD,4CA4DC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport { OkResponseDescription } from '../../http/output/response/OkResponseDescription';\nimport type { ResponseDescription } from '../../http/output/response/ResponseDescription';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { InteractionHandler } from '../../identity/interaction/InteractionHandler';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { OperationHttpHandlerInput } from '../../server/OperationHttpHandler';\nimport { OperationHttpHandler } from '../../server/OperationHttpHandler';\nimport type { RepresentationConverter } from '../../storage/conversion/RepresentationConverter';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { APPLICATION_JSON, TEXT_HTML } from '../../util/ContentTypes';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport type { TemplateEngine } from '../../util/templates/TemplateEngine';\n\nexport interface SetupHttpHandlerArgs {\n  /**\n   * Used for converting the input data.\n   */\n  converter: RepresentationConverter;\n  /**\n   * Handles the requests.\n   */\n  handler: InteractionHandler;\n  /**\n   * Key that is used to store the boolean in the storage indicating setup is finished.\n   */\n  storageKey: string;\n  /**\n   * Used to store setup status.\n   */\n  storage: KeyValueStorage<string, boolean>;\n  /**\n   * Renders the main view.\n   */\n  templateEngine: TemplateEngine;\n}\n\n/**\n * Handles the initial setup of a server.\n * Will capture all requests until setup is finished,\n * this to prevent accidentally running unsafe servers.\n *\n * GET requests will return the view template which should contain the setup information for the user.\n * POST requests will be sent to the InteractionHandler.\n * After successfully completing a POST request this handler will disable itself and become unreachable.\n * All other methods will be rejected.\n */\nexport class SetupHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly handler: InteractionHandler;\n  private readonly converter: RepresentationConverter;\n  private readonly storageKey: string;\n  private readonly storage: KeyValueStorage<string, boolean>;\n  private readonly templateEngine: TemplateEngine;\n\n  public constructor(args: SetupHttpHandlerArgs) {\n    super();\n\n    this.handler = args.handler;\n    this.converter = args.converter;\n    this.storageKey = args.storageKey;\n    this.storage = args.storage;\n    this.templateEngine = args.templateEngine;\n  }\n\n  public async handle({ operation }: OperationHttpHandlerInput): Promise<ResponseDescription> {\n    switch (operation.method) {\n      case 'GET': return this.handleGet(operation);\n      case 'POST': return this.handlePost(operation);\n      default: throw new MethodNotAllowedHttpError([ operation.method ]);\n    }\n  }\n\n  /**\n   * Returns the HTML representation of the setup page.\n   */\n  private async handleGet(operation: Operation): Promise<ResponseDescription> {\n    const result = await this.templateEngine.render({});\n    const representation = new BasicRepresentation(result, operation.target, TEXT_HTML);\n    return new OkResponseDescription(representation.metadata, representation.data);\n  }\n\n  /**\n   * Converts the input data to JSON and calls the setup handler.\n   * On success `true` will be written to the storage key.\n   */\n  private async handlePost(operation: Operation): Promise<ResponseDescription> {\n    // Convert input data to JSON\n    // Allows us to still support form data\n    if (operation.body.metadata.contentType) {\n      const args = {\n        representation: operation.body,\n        preferences: { type: { [APPLICATION_JSON]: 1 }},\n        identifier: operation.target,\n      };\n      operation = {\n        ...operation,\n        body: await this.converter.handleSafe(args),\n      };\n    }\n\n    const representation = await this.handler.handleSafe({ operation });\n    await this.storage.set(this.storageKey, true);\n\n    return new OkResponseDescription(representation.metadata, representation.data);\n  }\n}\n"]}