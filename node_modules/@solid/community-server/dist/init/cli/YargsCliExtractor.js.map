{"version":3,"file":"YargsCliExtractor.js","sourceRoot":"","sources":["../../../src/init/cli/YargsCliExtractor.ts"],"names":[],"mappings":";;;;;;AAEA,kDAA0B;AAC1B,iDAA8C;AAK9C;;;;;GAKG;AACH,MAAa,cAAc;IAIzB;;;OAGG;IACH,YAAmB,IAAY,EAAE,OAA4B;QAC3D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;CACF;AAZD,wCAYC;AAgBD;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,2BAAY;IAIjD;;;;;OAKG;IACH,YAAmB,UAA4B,EAAE,OAAmB;QAClE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,WAAW,CACvC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAA0B,EAAE,CAAC,CAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAE,CAAC,CACjF,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAuB;QACzC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,IAAuB;QACzC,IAAI,KAAK,GAAG,IAAA,eAAK,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,SAAS,EAAE;YACzC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC9C;QACD,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;YAChC,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;SACxB;QACD,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;YACjC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;SACzD;QACD,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC7C,CAAC;CACF;AAtCD,8CAsCC","sourcesContent":["/* eslint-disable tsdoc/syntax */\nimport type { Arguments, Argv, Options } from 'yargs';\nimport yargs from 'yargs';\nimport { CliExtractor } from './CliExtractor';\n\n// This type exists to prevent Components.js from erroring on an unknown type\nexport type YargsOptions = Options;\n\n/**\n * This class exists as wrapper around a yargs Options object,\n * thereby allowing us to create these in a Components.js configuration.\n *\n * Format details can be found at https://yargs.js.org/docs/#api-reference-optionskey-opt\n */\nexport class YargsParameter {\n  public readonly name: string;\n  public readonly options: YargsOptions;\n\n  /**\n   * @param name - Name of the parameter. Corresponds to the first parameter passed to the `yargs.options` function.\n   * @param options - Options for a single parameter that should be parsed. @range {json}\n   */\n  public constructor(name: string, options: Record<string, any>) {\n    this.name = name;\n    this.options = options;\n  }\n}\n\nexport interface CliOptions {\n  // Usage string printed in case of CLI errors\n  usage?: string;\n  // Errors on unknown CLI parameters when enabled.\n  // @see https://yargs.js.org/docs/#api-reference-strictenabledtrue\n  strictMode?: boolean;\n  // Loads CLI args from environment variables when enabled.\n  // @see http://yargs.js.org/docs/#api-reference-envprefix\n  loadFromEnv?: boolean;\n  // Prefix to be used when `loadFromEnv` is enabled.\n  // @see http://yargs.js.org/docs/#api-reference-envprefix\n  envVarPrefix?: string;\n}\n\n/**\n * Parses CLI args using the yargs library.\n * Specific settings can be enabled through the provided options.\n */\nexport class YargsCliExtractor extends CliExtractor {\n  protected readonly yargsArgOptions: Record<string, YargsOptions>;\n  protected readonly yargvOptions: CliOptions;\n\n  /**\n   * @param parameters - Parameters that should be parsed from the CLI.\n   * @param options - Additional options to configure yargs. @range {json}\n   *\n   * JSON parameters cannot be optional due to https://github.com/LinkedSoftwareDependencies/Components-Generator.js/issues/87\n   */\n  public constructor(parameters: YargsParameter[], options: CliOptions) {\n    super();\n    this.yargsArgOptions = Object.fromEntries(\n      parameters.map((entry): [string, YargsOptions] => [ entry.name, entry.options ]),\n    );\n    this.yargvOptions = { ...options };\n  }\n\n  public async handle(argv: readonly string[]): Promise<Arguments> {\n    return this.createYArgv(argv).parse();\n  }\n\n  /**\n   * Creates the yargs Argv object based on the input CLI argv.\n   */\n  private createYArgv(argv: readonly string[]): Argv {\n    let yArgv = yargs(argv.slice(2));\n    if (this.yargvOptions.usage !== undefined) {\n      yArgv = yArgv.usage(this.yargvOptions.usage);\n    }\n    if (this.yargvOptions.strictMode) {\n      yArgv = yArgv.strict();\n    }\n    if (this.yargvOptions.loadFromEnv) {\n      yArgv = yArgv.env(this.yargvOptions.envVarPrefix ?? '');\n    }\n    return yArgv.options(this.yargsArgOptions);\n  }\n}\n"]}