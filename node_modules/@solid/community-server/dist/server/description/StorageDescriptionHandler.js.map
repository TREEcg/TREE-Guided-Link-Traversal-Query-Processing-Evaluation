{"version":3,"file":"StorageDescriptionHandler.js","sourceRoot":"","sources":["../../../src/server/description/StorageDescriptionHandler.ts"],"names":[],"mappings":";;;AAAA,4FAAyF;AAEzF,uFAAoF;AAGpF,0DAAyD;AACzD,2FAAwF;AACxF,uFAAoF;AACpF,kDAA0D;AAC1D,0DAAmD;AAEnD,kEAA+D;AAG/D;;;;GAIG;AACH,MAAa,yBAA0B,SAAQ,2CAAoB;IAMjE,YAAmB,KAAoB,EAAE,MAAc,EAAE,SAAkC,EACzF,SAA2B;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAA4B;QAChF,IAAI,MAAM,KAAK,KAAK,EAAE;YACpB,MAAM,IAAI,qDAAyB,CAAC,CAAE,MAAM,CAAE,EAAE,uDAAuD,CAAC,CAAC;SAC1G;QACD,MAAM,SAAS,GAAG,EAAE,IAAI,EAAE,IAAA,8BAAmB,EAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;QAC3F,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACzE,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACnE,MAAM,IAAI,iDAAuB,CAAC,mDAAmD,CAAC,CAAC;SACxF;QAED,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAA4B;QAClF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAElD,MAAM,cAAc,GAAG,IAAI,yCAAmB,CAAC,KAAK,EAAE,6BAAc,CAAC,CAAC;QAEtE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC;QAEvG,OAAO,IAAI,6CAAqB,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;IACvE,CAAC;CACF;AAtCD,8DAsCC","sourcesContent":["import { OkResponseDescription } from '../../http/output/response/OkResponseDescription';\nimport type { ResponseDescription } from '../../http/output/response/ResponseDescription';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { RepresentationConverter } from '../../storage/conversion/RepresentationConverter';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { ensureTrailingSlash } from '../../util/PathUtil';\nimport { PIM, RDF } from '../../util/Vocabularies';\nimport type { OperationHttpHandlerInput } from '../OperationHttpHandler';\nimport { OperationHttpHandler } from '../OperationHttpHandler';\nimport type { StorageDescriber } from './StorageDescriber';\n\n/**\n * Generates the response for GET requests targeting a storage description resource.\n * The suffix needs to match the suffix used to generate storage description resources\n * and will be used to verify the container it is linked to is an actual storage.\n */\nexport class StorageDescriptionHandler extends OperationHttpHandler {\n  private readonly store: ResourceStore;\n  private readonly suffix: string;\n  private readonly converter: RepresentationConverter;\n  private readonly describer: StorageDescriber;\n\n  public constructor(store: ResourceStore, suffix: string, converter: RepresentationConverter,\n    describer: StorageDescriber) {\n    super();\n    this.store = store;\n    this.suffix = suffix;\n    this.converter = converter;\n    this.describer = describer;\n  }\n\n  public async canHandle({ operation: { target, method }}: OperationHttpHandlerInput): Promise<void> {\n    if (method !== 'GET') {\n      throw new MethodNotAllowedHttpError([ method ], `Only GET requests can target the storage description.`);\n    }\n    const container = { path: ensureTrailingSlash(target.path.slice(0, -this.suffix.length)) };\n    const representation = await this.store.getRepresentation(container, {});\n    representation.data.destroy();\n    if (!representation.metadata.has(RDF.terms.type, PIM.terms.Storage)) {\n      throw new NotImplementedHttpError(`Only supports descriptions of storage containers.`);\n    }\n\n    await this.describer.canHandle(target);\n  }\n\n  public async handle({ operation: { target, preferences }}: OperationHttpHandlerInput): Promise<ResponseDescription> {\n    const quads = await this.describer.handle(target);\n\n    const representation = new BasicRepresentation(quads, INTERNAL_QUADS);\n\n    const converted = await this.converter.handleSafe({ identifier: target, representation, preferences });\n\n    return new OkResponseDescription(converted.metadata, converted.data);\n  }\n}\n"]}