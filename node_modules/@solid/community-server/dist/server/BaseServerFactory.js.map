{"version":3,"file":"BaseServerFactory.js","sourceRoot":"","sources":["../../src/server/BaseServerFactory.ts"],"names":[],"mappings":";;;AAAA,2BAAkC;AAElC,+BAAwD;AACxD,iCAA0D;AAC1D,6BAA0B;AAC1B,gDAAkD;AAsBlD;;;;GAIG;AACH,MAAa,iBAAiB;IAK5B,YAAmB,UAAoC,EAAE,KAAK,EAAE,KAAK,EAAE;QAJpD,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAK7C,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,IAAY;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QACvD,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,GAAG,QAAQ,gBAAgB,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,GAAG,EAAE,CAAC,CAAC;QAElD,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAiB,CAAC,CAAC,CAAC,mBAAgB,CAAC;QAC/E,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3C,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;QAErC,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,mBAAmB;QACzB,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,KAAK,MAAM,EAAE,IAAI,CAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAW,EAAE;YAClD,MAAM,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;YACxB,IAAI,GAAG,EAAE;gBACP,OAAO,CAAC,EAAE,CAAC,GAAG,IAAA,iBAAY,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aACzC;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AApCD,8CAoCC","sourcesContent":["import { readFileSync } from 'fs';\nimport type { Server } from 'http';\nimport { createServer as createHttpServer } from 'http';\nimport { createServer as createHttpsServer } from 'https';\nimport { URL } from 'url';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpServerFactory } from './HttpServerFactory';\n\n/**\n * Options to be used when creating the server.\n * Due to Components.js not supporting external types, this has been simplified (for now?).\n * The common https keys here (key/cert/pfx) will be interpreted as file paths that need to be read\n * before passing the options to the `createServer` function.\n */\nexport interface BaseServerFactoryOptions {\n  /**\n   * If the server should start as an HTTP or HTTPS server.\n   */\n  https?: boolean;\n\n  key?: string;\n  cert?: string;\n\n  pfx?: string;\n  passphrase?: string;\n}\n\n/**\n * Creates an HTTP(S) server listening to the requested port using the native Node.js `http` module.\n *\n * The server does not do anything, listeners should be attached to add behavior.\n */\nexport class BaseServerFactory implements HttpServerFactory {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly options: BaseServerFactoryOptions;\n\n  public constructor(options: BaseServerFactoryOptions = { https: false }) {\n    this.options = { ...options };\n  }\n\n  /**\n   * Creates and starts an HTTP(S) server\n   * @param port - Port on which the server listens\n   */\n  public startServer(port: number): Server {\n    const protocol = this.options.https ? 'https' : 'http';\n    const url = new URL(`${protocol}://localhost:${port}/`).href;\n    this.logger.info(`Listening to server at ${url}`);\n\n    const createServer = this.options.https ? createHttpsServer : createHttpServer;\n    const options = this.createServerOptions();\n\n    const server = createServer(options);\n\n    return server.listen(port);\n  }\n\n  private createServerOptions(): BaseServerFactoryOptions {\n    const options = { ...this.options };\n    for (const id of [ 'key', 'cert', 'pfx' ] as const) {\n      const val = options[id];\n      if (val) {\n        options[id] = readFileSync(val, 'utf8');\n      }\n    }\n    return options;\n  }\n}\n"]}