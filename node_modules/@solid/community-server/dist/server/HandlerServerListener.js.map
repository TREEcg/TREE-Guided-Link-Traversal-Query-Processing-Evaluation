{"version":3,"file":"HandlerServerListener.js","sourceRoot":"","sources":["../../src/server/HandlerServerListener.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAClD,wDAAmD;AACnD,yDAAoD;AAEpD,qDAAkD;AAElD;;;;;;GAMG;AACH,MAAa,qBAAsB,SAAQ,+BAAc;IAOvD,YAAmB,OAAoB,EAAE,cAAc,GAAG,KAAK;QAC7D,KAAK,EAAE,CAAC;QAPS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAQ7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAc;QAChC,MAAM,CAAC,EAAE,CAAC,SAAS,EACjB,KAAK,EAAC,OAAwB,EAAE,QAAwB,EAAiB,EAAE;YACzE,IAAI;gBACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,CAAC,MAAM,gBAAgB,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC1E,MAAM,cAAc,GAAG,IAAA,2BAAW,EAAC,OAAO,CAAC,CAAC;gBAC5C,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAQ,EAAE;oBACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;gBACH,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,CAAC;aACtE;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,MAAc,CAAC;gBACnB,IAAI,CAAC,IAAA,mBAAO,EAAC,KAAK,CAAC,EAAE;oBACnB,MAAM,GAAG,kBAAkB,KAAK,KAAK,CAAC;iBACvC;qBAAM,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,CAAC,KAAK,EAAE;oBAC7C,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC;iBAC7B;qBAAM;oBACL,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,OAAO,IAAI,CAAC;iBAC9C;gBACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC1B,IAAI,QAAQ,CAAC,WAAW,EAAE;oBACxB,QAAQ,CAAC,GAAG,EAAE,CAAC;iBAChB;qBAAM;oBACL,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,2BAA2B,CAAC,CAAC;oBAChE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBACrC;aACF;oBAAS;gBACR,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;oBACzB,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;iBAC/B;aACF;QACH,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AA9CD,sDA8CC","sourcesContent":["import type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { isError } from '../util/errors/ErrorUtil';\nimport { guardStream } from '../util/GuardedStream';\nimport type { HttpHandler } from './HttpHandler';\nimport { ServerListener } from './ServerListener';\n\n/**\n * A {@link ServerListener} that attaches an {@link HttpHandler} to the `request` event of a {@link Server}.\n * All incoming requests will be sent to the provided handler.\n * Failsafes are added to make sure a valid response is sent in case something goes wrong.\n *\n * The `showStackTrace` parameter can be used to add stack traces to error outputs.\n */\nexport class HandlerServerListener extends ServerListener {\n  protected readonly logger = getLoggerFor(this);\n\n  /** The main HttpHandler */\n  private readonly handler: HttpHandler;\n  private readonly showStackTrace: boolean;\n\n  public constructor(handler: HttpHandler, showStackTrace = false) {\n    super();\n    this.handler = handler;\n    this.showStackTrace = showStackTrace;\n  }\n\n  public async handle(server: Server): Promise<void> {\n    server.on('request',\n      async(request: IncomingMessage, response: ServerResponse): Promise<void> => {\n        try {\n          this.logger.info(`Received ${request.method} request for ${request.url}`);\n          const guardedRequest = guardStream(request);\n          guardedRequest.on('error', (error): void => {\n            this.logger.error(`Request error: ${error.message}`);\n          });\n          await this.handler.handleSafe({ request: guardedRequest, response });\n        } catch (error: unknown) {\n          let errMsg: string;\n          if (!isError(error)) {\n            errMsg = `Unknown error: ${error}.\\n`;\n          } else if (this.showStackTrace && error.stack) {\n            errMsg = `${error.stack}\\n`;\n          } else {\n            errMsg = `${error.name}: ${error.message}\\n`;\n          }\n          this.logger.error(errMsg);\n          if (response.headersSent) {\n            response.end();\n          } else {\n            response.setHeader('Content-Type', 'text/plain; charset=utf-8');\n            response.writeHead(500).end(errMsg);\n          }\n        } finally {\n          if (!response.headersSent) {\n            response.writeHead(404).end();\n          }\n        }\n      });\n  }\n}\n"]}