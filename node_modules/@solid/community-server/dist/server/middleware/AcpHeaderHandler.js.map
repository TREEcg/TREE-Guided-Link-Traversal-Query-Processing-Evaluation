{"version":3,"file":"AcpHeaderHandler.js","sourceRoot":"","sources":["../../../src/server/middleware/AcpHeaderHandler.ts"],"names":[],"mappings":";;;AAEA,sDAAkD;AAClD,0DAA8C;AAE9C,gDAA6C;AAE7C;;;GAGG;AACH,MAAa,gBAAiB,SAAQ,yBAAW;IAM/C,YAAmB,eAAgC,EAAE,QAAqC,EACxF,KAAe,EAAE,UAAoB;QACrC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAoB;QACzD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE;YACpD,OAAO;SACR;QACD,MAAM,UAAU,GAAG;YACjB,IAAI,kBAAG,CAAC,qBAAqB,eAAe;YAC5C,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAU,EAAE,CAAC,IAAI,IAAI,WAAW,kBAAG,CAAC,KAAK,GAAG,CAAC;YACpE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAU,EAAE,CAAC,IAAI,SAAS,WAAW,kBAAG,CAAC,SAAS,GAAG,CAAC;SACxF,CAAC;QACF,IAAA,sBAAS,EAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;CACF;AA3BD,4CA2BC","sourcesContent":["import type { AuxiliaryIdentifierStrategy } from '../../http/auxiliary/AuxiliaryIdentifierStrategy';\nimport type { TargetExtractor } from '../../http/input/identifier/TargetExtractor';\nimport { addHeader } from '../../util/HeaderUtil';\nimport { ACP } from '../../util/Vocabularies';\nimport type { HttpHandlerInput } from '../HttpHandler';\nimport { HttpHandler } from '../HttpHandler';\n\n/**\n * Handles all the required ACP headers as defined at\n * https://solid.github.io/authorization-panel/acp-specification/#conforming-acp-server\n */\nexport class AcpHeaderHandler extends HttpHandler {\n  private readonly targetExtractor: TargetExtractor;\n  private readonly strategy: AuxiliaryIdentifierStrategy;\n  private readonly modes: string[];\n  private readonly attributes: string[];\n\n  public constructor(targetExtractor: TargetExtractor, strategy: AuxiliaryIdentifierStrategy,\n    modes: string[], attributes: string[]) {\n    super();\n    this.targetExtractor = targetExtractor;\n    this.strategy = strategy;\n    this.modes = modes;\n    this.attributes = attributes;\n  }\n\n  public async handle({ request, response }: HttpHandlerInput): Promise<void> {\n    const identifier = await this.targetExtractor.handleSafe({ request });\n    if (!this.strategy.isAuxiliaryIdentifier(identifier)) {\n      return;\n    }\n    const linkValues = [\n      `<${ACP.AccessControlResource}>; rel=\"type\"`,\n      ...this.modes.map((mode): string => `<${mode}>; rel=\"${ACP.grant}\"`),\n      ...this.attributes.map((attribute): string => `<${attribute}>; rel=\"${ACP.attribute}\"`),\n    ];\n    addHeader(response, 'Link', linkValues);\n  }\n}\n"]}