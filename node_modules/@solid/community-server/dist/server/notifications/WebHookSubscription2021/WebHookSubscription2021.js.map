{"version":3,"file":"WebHookSubscription2021.js","sourceRoot":"","sources":["../../../../src/server/notifications/WebHookSubscription2021/WebHookSubscription2021.ts"],"names":[],"mappings":";;;AACA,6BAA6B;AAG7B,gFAA4E;AAC5E,0FAAuF;AAEvF,sDAAwD;AACxD,6DAAiE;AACjE,kFAA+E;AAC/E,8DAAoE;AACpE,mEAAwE;AACxE,yDAAuD;AACvD,kDAAuD;AAEvD,kDAAmD;AAInD,MAAM,IAAI,GAAG,yBAAyB,CAAC;AACvC,MAAM,MAAM,GAAG,+BAAgB,CAAC,KAAK,CAAC;IACpC,IAAI,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAE,IAAI,CAAE,CAAC;IACzC,wEAAwE;IACxE,MAAM,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE;CAC5B,CAAC,CAAC;AAIH;;;;;;;GAOG;AACH,MAAa,uBAAuB;IAUlC,YAAmB,OAA6C,EAAE,gBAAkC,EAClG,YAA0B;QAVT,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAM/B,SAAI,GAAG,IAAI,CAAC;QACZ,WAAM,GAAG,MAAM,CAAC;QAI9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,YAAsC;QAC9D,OAAO,IAAI,qCAAqB,CAAa,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,EAAE,wBAAU,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;IACnG,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,YAAsC,EAAE,WAAwB;QAErF,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC;QAEvC,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,yCAAmB,CAC3B,wFAAwF,CACzF,CAAC;SACH;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACvF,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAG;YACb,UAAU,EAAE,CAAE,mCAAoB,CAAE;YACpC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,YAAY,CAAC,MAAM;YAC3B,gEAAgE;YAChE,oBAAoB,EAAE,GAAG,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;SACtE,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,kCAAmB,CAAC,CAAC;QAEtF,2DAA2D;QAC3D,oDAAoD;QACpD,uDAAuD;QACvD,IAAA,wBAAW,EAAC,QAAQ,CAAC,IAAI,CAAC;aACvB,IAAI,CAAC,GAAkB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;aACjE,KAAK,CAAC,CAAC,KAAK,EAAQ,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEL,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5B,CAAC;CACF;AAtDD,0DAsDC","sourcesContent":["import type { InferType } from 'yup';\nimport { string } from 'yup';\nimport type { Credentials } from '../../../authentication/Credentials';\nimport type { AccessMap } from '../../../authorization/permissions/Permissions';\nimport { AccessMode } from '../../../authorization/permissions/Permissions';\nimport { BasicRepresentation } from '../../../http/representation/BasicRepresentation';\nimport type { InteractionRoute } from '../../../identity/interaction/routing/InteractionRoute';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport { APPLICATION_LD_JSON } from '../../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../../util/errors/BadRequestHttpError';\nimport { createErrorMessage } from '../../../util/errors/ErrorUtil';\nimport { IdentifierSetMultiMap } from '../../../util/map/IdentifierMap';\nimport { endOfStream } from '../../../util/StreamUtil';\nimport { CONTEXT_NOTIFICATION } from '../Notification';\nimport type { StateHandler } from '../StateHandler';\nimport { SUBSCRIBE_SCHEMA } from '../Subscription';\nimport type { SubscriptionStorage } from '../SubscriptionStorage';\nimport type { SubscriptionResponse, SubscriptionType } from '../SubscriptionType';\n\nconst type = 'WebHookSubscription2021';\nconst schema = SUBSCRIBE_SCHEMA.shape({\n  type: string().required().oneOf([ type ]),\n  // Not using `.url()` validator since it does not support localhost URLs\n  target: string().required(),\n});\n\nexport type WebHookFeatures = { target: string; webId: string };\n\n/**\n * The notification subscription type WebHookSubscription2021 as described in\n * https://github.com/solid/notifications/blob/main/webhook-subscription-2021.md\n *\n * Requires read permissions on a resource to be able to receive notifications.\n *\n * Also handles the `state` feature if present.\n */\nexport class WebHookSubscription2021 implements SubscriptionType<typeof schema, WebHookFeatures> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly storage: SubscriptionStorage<WebHookFeatures>;\n  private readonly unsubscribePath: string;\n  private readonly stateHandler: StateHandler;\n\n  public readonly type = type;\n  public readonly schema = schema;\n\n  public constructor(storage: SubscriptionStorage<WebHookFeatures>, unsubscribeRoute: InteractionRoute,\n    stateHandler: StateHandler) {\n    this.storage = storage;\n    this.unsubscribePath = unsubscribeRoute.getPath();\n    this.stateHandler = stateHandler;\n  }\n\n  public async extractModes(subscription: InferType<typeof schema>): Promise<AccessMap> {\n    return new IdentifierSetMultiMap<AccessMode>([[{ path: subscription.topic }, AccessMode.read ]]);\n  }\n\n  public async subscribe(subscription: InferType<typeof schema>, credentials: Credentials):\n  Promise<SubscriptionResponse<WebHookFeatures>> {\n    const webId = credentials.agent?.webId;\n\n    if (!webId) {\n      throw new BadRequestHttpError(\n        'A WebHookSubscription2021 subscription request needs to be authenticated with a WebID.',\n      );\n    }\n\n    const info = this.storage.create(subscription, { target: subscription.target, webId });\n    await this.storage.add(info);\n\n    const jsonld = {\n      '@context': [ CONTEXT_NOTIFICATION ],\n      type: this.type,\n      target: subscription.target,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      unsubscribe_endpoint: `${this.unsubscribePath}/${encodeURI(info.id)}`,\n    };\n    const response = new BasicRepresentation(JSON.stringify(jsonld), APPLICATION_LD_JSON);\n\n    // We want to send the state notification, if there is one,\n    // right after we send the response for subscribing.\n    // We do this by waiting for the response to be closed.\n    endOfStream(response.data)\n      .then((): Promise<void> => this.stateHandler.handleSafe({ info }))\n      .catch((error): void => {\n        this.logger.error(`Error emitting state notification: ${createErrorMessage(error)}`);\n      });\n\n    return { response, info };\n  }\n}\n"]}