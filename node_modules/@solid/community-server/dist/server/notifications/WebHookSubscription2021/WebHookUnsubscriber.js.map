{"version":3,"file":"WebHookUnsubscriber.js","sourceRoot":"","sources":["../../../../src/server/notifications/WebHookSubscription2021/WebHookUnsubscriber.ts"],"names":[],"mappings":";;;AACA,qGAAkG;AAElG,sDAAwD;AACxD,gFAA6E;AAC7E,8EAA2E;AAE3E,qEAAkE;AAIlE;;;;GAIG;AACH,MAAa,mBAAoB,SAAQ,2CAAoB;IAM3D,YAAmB,oBAA0C,EAAE,OAA6C;QAC1G,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,OAAO,EAA6B;QACnE,oFAAoF;QACpF,MAAM,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAG,CAAC;QAErD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAExC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,qCAAiB,EAAE,CAAC;SAC/B;QAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAExE,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE;YACpD,MAAM,IAAI,uCAAkB,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;QACzD,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAE9B,OAAO,IAAI,mDAAwB,EAAE,CAAC;IACxC,CAAC;CACF;AAjCD,kDAiCC","sourcesContent":["import type { CredentialsExtractor } from '../../../authentication/CredentialsExtractor';\nimport { ResetResponseDescription } from '../../../http/output/response/ResetResponseDescription';\nimport type { ResponseDescription } from '../../../http/output/response/ResponseDescription';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport { ForbiddenHttpError } from '../../../util/errors/ForbiddenHttpError';\nimport { NotFoundHttpError } from '../../../util/errors/NotFoundHttpError';\nimport type { OperationHttpHandlerInput } from '../../OperationHttpHandler';\nimport { OperationHttpHandler } from '../../OperationHttpHandler';\nimport type { SubscriptionStorage } from '../SubscriptionStorage';\nimport type { WebHookFeatures } from './WebHookSubscription2021';\n\n/**\n * Allows clients to unsubscribe from a WebHookSubscription2021.\n * Assumed the trailing part of the incoming URL is the identifier of the subscription.\n * Should be wrapped in a route handler that only allows `DELETE` operations.\n */\nexport class WebHookUnsubscriber extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly credentialsExtractor: CredentialsExtractor;\n  private readonly storage: SubscriptionStorage<WebHookFeatures>;\n\n  public constructor(credentialsExtractor: CredentialsExtractor, storage: SubscriptionStorage<WebHookFeatures>) {\n    super();\n    this.credentialsExtractor = credentialsExtractor;\n    this.storage = storage;\n  }\n\n  public async handle({ operation, request }: OperationHttpHandlerInput): Promise<ResponseDescription> {\n    // Split always returns an array of at least length 1 so result can not be undefined\n    const id = operation.target.path.split(/\\//u).pop()!;\n\n    const info = await this.storage.get(id);\n\n    if (!info) {\n      throw new NotFoundHttpError();\n    }\n\n    const credentials = await this.credentialsExtractor.handleSafe(request);\n\n    if (info.features.webId !== credentials.agent?.webId) {\n      throw new ForbiddenHttpError();\n    }\n\n    this.logger.debug(`Deleting WebHook subscription ${id}`);\n    await this.storage.delete(id);\n\n    return new ResetResponseDescription();\n  }\n}\n"]}