"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListeningActivityHandler = void 0;
const LogUtil_1 = require("../../logging/LogUtil");
const ErrorUtil_1 = require("../../util/errors/ErrorUtil");
const StaticHandler_1 = require("../../util/handlers/StaticHandler");
/**
 * Listens to an {@link ActivityEmitter} and calls the stored {@link NotificationHandler}s in case of an event
 * for every matching Subscription found.
 *
 * Takes the `rate` feature into account so only subscriptions that want a new notification will receive one.
 *
 * Extends {@link StaticHandler} so it can be more easily injected into a Components.js configuration.
 * No class takes this one as input, so to make sure Components.js instantiates it,
 * it needs to be added somewhere where its presence has no impact, such as the list of initializers.
 */
class ListeningActivityHandler extends StaticHandler_1.StaticHandler {
    constructor(storage, emitter, handler) {
        super();
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.storage = storage;
        this.handler = handler;
        emitter.on('changed', (topic, activity) => {
            this.emit(topic, activity).catch((error) => {
                this.logger.error(`Something went wrong emitting notifications: ${(0, ErrorUtil_1.createErrorMessage)(error)}`);
            });
        });
    }
    async emit(topic, activity) {
        const subscriptionIds = await this.storage.getAll(topic);
        for (const id of subscriptionIds) {
            const info = await this.storage.get(id);
            if (!info) {
                // Subscription has expired
                continue;
            }
            if (info.rate && info.rate > Date.now() - info.lastEmit) {
                continue;
            }
            // No need to wait on this to resolve before going to the next subscription.
            // Prevent failed notification from blocking other notifications.
            this.handler.handleSafe({ info, activity, topic }).catch((error) => {
                this.logger.error(`Error trying to handle notification for ${id}: ${(0, ErrorUtil_1.createErrorMessage)(error)}`);
            });
        }
    }
}
exports.ListeningActivityHandler = ListeningActivityHandler;
//# sourceMappingURL=ListeningActivityHandler.js.map