{"version":3,"file":"TypedNotificationHandler.js","sourceRoot":"","sources":["../../../src/server/notifications/TypedNotificationHandler.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,+DAA4D;AAE5D;;GAEG;AACH,MAAa,wBAAyB,SAAQ,yCAAmB;IAI/D,YAAmB,IAAY,EAAE,MAA2B;QAC1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA+B;QACpD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;YACjC,MAAM,IAAI,iDAAuB,CAAC,QAAQ,IAAI,CAAC,IAAI,+BAA+B,CAAC,CAAC;SACrF;QACD,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA+B;QACjD,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;CACF;AApBD,4DAoBC","sourcesContent":["import { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport type { NotificationHandlerInput } from './NotificationHandler';\nimport { NotificationHandler } from './NotificationHandler';\n\n/**\n * A {@link NotificationHandler} that only accepts input for a specific subscription type.\n */\nexport class TypedNotificationHandler extends NotificationHandler {\n  private readonly type: string;\n  private readonly source: NotificationHandler;\n\n  public constructor(type: string, source: NotificationHandler) {\n    super();\n    this.type = type;\n    this.source = source;\n  }\n\n  public async canHandle(input: NotificationHandlerInput): Promise<void> {\n    if (input.info.type !== this.type) {\n      throw new NotImplementedHttpError(`Only ${this.type} subscriptions are supported.`);\n    }\n    await this.source.canHandle(input);\n  }\n\n  public async handle(input: NotificationHandlerInput): Promise<void> {\n    await this.source.handle(input);\n  }\n}\n"]}