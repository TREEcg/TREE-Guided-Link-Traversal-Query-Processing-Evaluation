{"version":3,"file":"ActivityNotificationGenerator.js","sourceRoot":"","sources":["../../../../src/server/notifications/generate/ActivityNotificationGenerator.ts"],"names":[],"mappings":";;;AAAA,4DAAsD;AAEtD,0FAAuF;AACvF,6DAAqD;AAErD,kDAAgF;AAEhF,mEAAgE;AAEhE;;;GAGG;AACH,MAAa,6BAA8B,SAAQ,6CAAqB;IAGtE,YAAmB,KAAoB;QACrC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAA4B;QAC3D,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,iDAAuB,CAAC,wCAAwC,CAAC,CAAC;SAC7E;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,QAAQ,EAA4B;QAC/D,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACrE,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAE9B,MAAM,KAAK,GAAG,IAAA,oBAAO,EAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAE/C,OAAO;YACL,UAAU,EAAE;gBACV,sCAAuB;gBACvB,mCAAoB;aACrB;YACD,EAAE,EAAE,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE;YACrC,IAAI,EAAE,CAAE,QAAS,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;YACpD,MAAM,EAAE;gBACN,EAAE,EAAE,KAAK,CAAC,IAAI;gBACd,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;aACvF;YACD,KAAK;YACL,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;CACF;AAnCD,sEAmCC","sourcesContent":["import { getETag } from '../../../storage/Conditions';\nimport type { ResourceStore } from '../../../storage/ResourceStore';\nimport { NotImplementedHttpError } from '../../../util/errors/NotImplementedHttpError';\nimport { AS, RDF } from '../../../util/Vocabularies';\nimport type { Notification } from '../Notification';\nimport { CONTEXT_ACTIVITYSTREAMS, CONTEXT_NOTIFICATION } from '../Notification';\nimport type { NotificationHandlerInput } from '../NotificationHandler';\nimport { NotificationGenerator } from './NotificationGenerator';\n\n/**\n * A {@link NotificationGenerator} that creates a {@link Notification} by using the provided activity as type.\n * Requests metadata of the topic from the {@link ResourceStore} to fill in the details.\n */\nexport class ActivityNotificationGenerator extends NotificationGenerator {\n  private readonly store: ResourceStore;\n\n  public constructor(store: ResourceStore) {\n    super();\n    this.store = store;\n  }\n\n  public async canHandle({ activity }: NotificationHandlerInput): Promise<void> {\n    if (!activity) {\n      throw new NotImplementedHttpError(`Only defined activities are supported.`);\n    }\n  }\n\n  public async handle({ topic, activity }: NotificationHandlerInput): Promise<Notification> {\n    const representation = await this.store.getRepresentation(topic, {});\n    representation.data.destroy();\n\n    const state = getETag(representation.metadata);\n\n    return {\n      '@context': [\n        CONTEXT_ACTIVITYSTREAMS,\n        CONTEXT_NOTIFICATION,\n      ],\n      id: `urn:${Date.now()}:${topic.path}`,\n      type: [ activity!.value.slice(AS.namespace.length) ],\n      object: {\n        id: topic.path,\n        type: representation.metadata.getAll(RDF.terms.type).map((term): string => term.value),\n      },\n      state,\n      published: new Date().toISOString(),\n    };\n  }\n}\n"]}