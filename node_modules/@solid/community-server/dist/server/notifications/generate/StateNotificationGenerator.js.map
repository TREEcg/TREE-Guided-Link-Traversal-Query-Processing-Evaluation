{"version":3,"file":"StateNotificationGenerator.js","sourceRoot":"","sources":["../../../../src/server/notifications/generate/StateNotificationGenerator.ts"],"names":[],"mappings":";;;AACA,6DAAgD;AAGhD,mEAAgE;AAEhE;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,6CAAqB;IAInE,YAAmB,MAA6B,EAAE,WAAwB;QACxE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA+B;QACjD,IAAI,KAAK,CAAC,QAAQ,EAAE;YAClB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SACtC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAE,CAAC,KAAK,CAAC,MAAM,CAAC;QACrG,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACxD,CAAC;CACF;AAlBD,gEAkBC","sourcesContent":["import type { ResourceSet } from '../../../storage/ResourceSet';\nimport { AS } from '../../../util/Vocabularies';\nimport type { Notification } from '../Notification';\nimport type { NotificationHandlerInput } from '../NotificationHandler';\nimport { NotificationGenerator } from './NotificationGenerator';\n\n/**\n * Determines the most relevant activity for a {@link Notification} in case none was provided.\n * This is relevant for the `state` feature where a subscription needs to know the current state of a resource.\n */\nexport class StateNotificationGenerator extends NotificationGenerator {\n  private readonly source: NotificationGenerator;\n  private readonly resourceSet: ResourceSet;\n\n  public constructor(source: NotificationGenerator, resourceSet: ResourceSet) {\n    super();\n    this.source = source;\n    this.resourceSet = resourceSet;\n  }\n\n  public async handle(input: NotificationHandlerInput): Promise<Notification> {\n    if (input.activity) {\n      return this.source.handleSafe(input);\n    }\n\n    const activity = await this.resourceSet.hasResource(input.topic) ? AS.terms.Update : AS.terms.Delete;\n    return this.source.handleSafe({ ...input, activity });\n  }\n}\n"]}