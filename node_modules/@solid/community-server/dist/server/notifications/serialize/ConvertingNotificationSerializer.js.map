{"version":3,"file":"ConvertingNotificationSerializer.js","sourceRoot":"","sources":["../../../../src/server/notifications/serialize/ConvertingNotificationSerializer.ts"],"names":[],"mappings":";;;AAIA,qEAAkE;AAElE;;;GAGG;AACH,MAAa,gCAAiC,SAAQ,+CAAsB;IAI1E,YAAmB,MAA8B,EAAE,SAAkC;QACnF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAkC;QACvD,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAkC;QACpD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEvD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;QAE/B,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,cAAc,CAAC;SACvB;QAED,MAAM,WAAW,GAA8B,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAC,CAAC;QACtE,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE,EAAC,CAAC,CAAC;IAChH,CAAC;CACF;AA1BD,4EA0BC","sourcesContent":["import type { Representation } from '../../../http/representation/Representation';\nimport type { RepresentationPreferences } from '../../../http/representation/RepresentationPreferences';\nimport type { RepresentationConverter } from '../../../storage/conversion/RepresentationConverter';\nimport type { NotificationSerializerInput } from './NotificationSerializer';\nimport { NotificationSerializer } from './NotificationSerializer';\n\n/**\n * Converts a serialization based on the provided `accept` feature value.\n * In case none was provided no conversion takes place.\n */\nexport class ConvertingNotificationSerializer extends NotificationSerializer {\n  private readonly source: NotificationSerializer;\n  private readonly converter: RepresentationConverter;\n\n  public constructor(source: NotificationSerializer, converter: RepresentationConverter) {\n    super();\n    this.source = source;\n    this.converter = converter;\n  }\n\n  public async canHandle(input: NotificationSerializerInput): Promise<void> {\n    await this.source.canHandle(input);\n  }\n\n  public async handle(input: NotificationSerializerInput): Promise<Representation> {\n    const representation = await this.source.handle(input);\n\n    const type = input.info.accept;\n\n    if (!type) {\n      return representation;\n    }\n\n    const preferences: RepresentationPreferences = { type: { [type]: 1 }};\n    return this.converter.handleSafe({ representation, preferences, identifier: { path: input.notification.id }});\n  }\n}\n"]}