{"version":3,"file":"NotificationSerializer.js","sourceRoot":"","sources":["../../../../src/server/notifications/serialize/NotificationSerializer.ts"],"names":[],"mappings":";;;AACA,sEAAmE;AASnE;;;;;GAKG;AACH,MAAsB,sBAAuB,SAAQ,2BAAyD;CAAI;AAAlH,wDAAkH","sourcesContent":["import type { Representation } from '../../../http/representation/Representation';\nimport { AsyncHandler } from '../../../util/handlers/AsyncHandler';\nimport type { Notification } from '../Notification';\nimport type { SubscriptionInfo } from '../SubscriptionStorage';\n\nexport interface NotificationSerializerInput {\n  notification: Notification;\n  info: SubscriptionInfo;\n}\n\n/**\n * Converts a {@link Notification} into a {@link Representation} that can be transmitted.\n *\n * The reason this is a separate class in between a generator and emitter,\n * is so a specific subscription type can add extra metadata to the Representation if needed.\n */\nexport abstract class NotificationSerializer extends AsyncHandler<NotificationSerializerInput, Representation> { }\n"]}