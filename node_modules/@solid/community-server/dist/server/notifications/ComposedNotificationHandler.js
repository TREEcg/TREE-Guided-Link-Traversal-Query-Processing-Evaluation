"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposedNotificationHandler = void 0;
const NotificationHandler_1 = require("./NotificationHandler");
/**
 * Generates, serializes and emits a {@link Notification} using a {@link NotificationGenerator},
 * {@link NotificationSerializer} and {@link NotificationEmitter}.
 *
 * Will not emit an event in case it has the same state as the subscription info.
 */
class ComposedNotificationHandler extends NotificationHandler_1.NotificationHandler {
    constructor(args) {
        super();
        this.generator = args.generator;
        this.serializer = args.serializer;
        this.emitter = args.emitter;
    }
    async canHandle(input) {
        await this.generator.canHandle(input);
    }
    async handle(input) {
        const notification = await this.generator.handle(input);
        const { state } = input.info;
        // In case the state matches there is no need to send the notification
        if (typeof state === 'string' && state === notification.state) {
            return;
        }
        const representation = await this.serializer.handleSafe({ info: input.info, notification });
        await this.emitter.handleSafe({ info: input.info, representation });
    }
}
exports.ComposedNotificationHandler = ComposedNotificationHandler;
//# sourceMappingURL=ComposedNotificationHandler.js.map