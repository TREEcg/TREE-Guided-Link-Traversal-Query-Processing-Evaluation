{"version":3,"file":"ListeningActivityHandler.js","sourceRoot":"","sources":["../../../src/server/notifications/ListeningActivityHandler.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AACrD,2DAAiE;AACjE,qEAAkE;AAMlE;;;;;;;;;GASG;AACH,MAAa,wBAAyB,SAAQ,6BAAa;IAMzD,YAAmB,OAA4B,EAAE,OAAwB,EAAE,OAA4B;QACrG,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAQ,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAQ,EAAE;gBAC/C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gDAAgD,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,IAAI,CAAC,KAAyB,EAAE,QAAmC;QAC/E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEzD,KAAK,MAAM,EAAE,IAAI,eAAe,EAAE;YAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,EAAE;gBACT,2BAA2B;gBAC3B,SAAS;aACV;YAED,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE;gBACvD,SAAS;aACV;YAED,4EAA4E;YAC5E,iEAAiE;YACjE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAQ,EAAE;gBACvE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACnG,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF;AAvCD,4DAuCC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { createErrorMessage } from '../../util/errors/ErrorUtil';\nimport { StaticHandler } from '../../util/handlers/StaticHandler';\nimport type { AS, VocabularyTerm } from '../../util/Vocabularies';\nimport type { ActivityEmitter } from './ActivityEmitter';\nimport type { NotificationHandler } from './NotificationHandler';\nimport type { SubscriptionStorage } from './SubscriptionStorage';\n\n/**\n * Listens to an {@link ActivityEmitter} and calls the stored {@link NotificationHandler}s in case of an event\n * for every matching Subscription found.\n *\n * Takes the `rate` feature into account so only subscriptions that want a new notification will receive one.\n *\n * Extends {@link StaticHandler} so it can be more easily injected into a Components.js configuration.\n * No class takes this one as input, so to make sure Components.js instantiates it,\n * it needs to be added somewhere where its presence has no impact, such as the list of initializers.\n */\nexport class ListeningActivityHandler extends StaticHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly storage: SubscriptionStorage;\n  private readonly handler: NotificationHandler;\n\n  public constructor(storage: SubscriptionStorage, emitter: ActivityEmitter, handler: NotificationHandler) {\n    super();\n    this.storage = storage;\n    this.handler = handler;\n\n    emitter.on('changed', (topic, activity): void => {\n      this.emit(topic, activity).catch((error): void => {\n        this.logger.error(`Something went wrong emitting notifications: ${createErrorMessage(error)}`);\n      });\n    });\n  }\n\n  private async emit(topic: ResourceIdentifier, activity: VocabularyTerm<typeof AS>): Promise<void> {\n    const subscriptionIds = await this.storage.getAll(topic);\n\n    for (const id of subscriptionIds) {\n      const info = await this.storage.get(id);\n      if (!info) {\n        // Subscription has expired\n        continue;\n      }\n\n      if (info.rate && info.rate > Date.now() - info.lastEmit) {\n        continue;\n      }\n\n      // No need to wait on this to resolve before going to the next subscription.\n      // Prevent failed notification from blocking other notifications.\n      this.handler.handleSafe({ info, activity, topic }).catch((error): void => {\n        this.logger.error(`Error trying to handle notification for ${id}: ${createErrorMessage(error)}`);\n      });\n    }\n  }\n}\n"]}