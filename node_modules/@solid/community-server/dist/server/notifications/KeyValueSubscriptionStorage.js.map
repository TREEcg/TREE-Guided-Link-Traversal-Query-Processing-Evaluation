{"version":3,"file":"KeyValueSubscriptionStorage.js","sourceRoot":"","sources":["../../../src/server/notifications/KeyValueSubscriptionStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport type { ReadWriteLocker } from '../../util/locking/ReadWriteLocker';\nimport type { Subscription } from './Subscription';\nimport type { SubscriptionInfo, SubscriptionStorage } from './SubscriptionStorage';\n\ntype StorageValue<T> = string | string[] | SubscriptionInfo<T>;\n\n/**\n * Stores all the {@link SubscriptionInfo} in a {@link KeyValueStorage}.\n *\n * Uses a {@link ReadWriteLocker} to prevent internal race conditions.\n */\nexport class KeyValueSubscriptionStorage<T extends Record<string, unknown>> implements SubscriptionStorage<T> {\n  protected logger = getLoggerFor(this);\n\n  private readonly storage: KeyValueStorage<string, StorageValue<T>>;\n  private readonly locker: ReadWriteLocker;\n\n  public constructor(storage: KeyValueStorage<string, StorageValue<T>>, locker: ReadWriteLocker) {\n    this.storage = storage;\n    this.locker = locker;\n  }\n\n  public create(subscription: Subscription, features: T): SubscriptionInfo<T> {\n    return {\n      id: `${subscription.type}:${v4()}:${subscription.topic}`,\n      topic: subscription.topic,\n      type: subscription.type,\n      lastEmit: 0,\n      expiration: subscription.expiration,\n      accept: subscription.accept,\n      rate: subscription.rate,\n      state: subscription.state,\n      features,\n    };\n  }\n\n  public async get(id: string): Promise<SubscriptionInfo<T> | undefined> {\n    const info = await this.storage.get(id);\n    if (info && this.isSubscriptionInfo(info)) {\n      if (typeof info.expiration === 'number' && info.expiration < Date.now()) {\n        this.logger.info(`Subscription ${id} has expired.`);\n        await this.locker.withWriteLock(this.getLockKey(id), async(): Promise<void> => {\n          await this.deleteInfo(info);\n        });\n        return;\n      }\n\n      return info;\n    }\n  }\n\n  public async getAll(topic: ResourceIdentifier): Promise<string[]> {\n    const infos = await this.storage.get(topic.path);\n    if (Array.isArray(infos)) {\n      return infos;\n    }\n    return [];\n  }\n\n  public async add(info: SubscriptionInfo<T>): Promise<void> {\n    const target = { path: info.topic };\n    return this.locker.withWriteLock(this.getLockKey(target), async(): Promise<void> => {\n      const infos = await this.getAll(target);\n      await this.storage.set(info.id, info);\n      infos.push(info.id);\n      await this.storage.set(info.topic, infos);\n    });\n  }\n\n  public async update(info: SubscriptionInfo<T>): Promise<void> {\n    return this.locker.withWriteLock(this.getLockKey(info.id), async(): Promise<void> => {\n      const oldInfo = await this.storage.get(info.id);\n\n      if (oldInfo) {\n        if (!this.isSubscriptionInfo(oldInfo)) {\n          throw new InternalServerError(`Trying to update ${info.id} which is not a SubscriptionInfo.`);\n        }\n        if (info.topic !== oldInfo.topic) {\n          throw new InternalServerError(`Trying to change the topic of subscription ${info.id}`);\n        }\n      }\n\n      await this.storage.set(info.id, info);\n    });\n  }\n\n  public async delete(id: string): Promise<void> {\n    return this.locker.withWriteLock(this.getLockKey(id), async(): Promise<void> => {\n      const info = await this.get(id);\n      if (!info) {\n        return;\n      }\n      await this.deleteInfo(info);\n    });\n  }\n\n  /**\n   * Utility function for deleting a specific {@link SubscriptionInfo} object.\n   * Does not create a lock on the subscription ID so should be wrapped in such a lock.\n   */\n  private async deleteInfo(info: SubscriptionInfo): Promise<void> {\n    await this.locker.withWriteLock(this.getLockKey(info.topic), async(): Promise<void> => {\n      const infos = await this.getAll({ path: info.topic });\n      const idx = infos.indexOf(info.id);\n      // If idx < 0 we have an inconsistency\n      if (idx < 0) {\n        this.logger.error(`Subscription info ${info.id} was not found in the list of info targeting ${info.topic}.`);\n        this.logger.error('This should not happen and indicates a data consistency issue.');\n      } else {\n        infos.splice(idx, 1);\n        if (infos.length > 0) {\n          await this.storage.set(info.topic, infos);\n        } else {\n          await this.storage.delete(info.topic);\n        }\n      }\n      await this.storage.delete(info.id);\n    });\n  }\n\n  private isSubscriptionInfo(value: StorageValue<T>): value is SubscriptionInfo<T> {\n    return Boolean((value as SubscriptionInfo).id);\n  }\n\n  private getLockKey(identifier: ResourceIdentifier | string): ResourceIdentifier {\n    return { path: `${typeof identifier === 'string' ? identifier : identifier.path}.notification-storage` };\n  }\n}\n"]}