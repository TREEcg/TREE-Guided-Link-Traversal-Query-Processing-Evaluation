{"version":3,"file":"BaseStateHandler.js","sourceRoot":"","sources":["../../../src/server/notifications/BaseStateHandler.ts"],"names":[],"mappings":";;;AAAA,mDAAqD;AACrD,2DAAiE;AAEjE,iDAA8C;AAG9C;;;;;GAKG;AACH,MAAa,gBAAiB,SAAQ,2BAAY;IAMhD,YAAmB,OAA4B,EAAE,OAA4B;QAC3E,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAA8B;QACtD,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;YACnC,IAAI;gBACF,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC/C,gEAAgE;gBAChE,OAAO,IAAI,CAAC,KAAK,CAAC;gBAClB,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACjC;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,IAAA,8BAAkB,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aACxF;SACF;IACH,CAAC;CACF;AAzBD,4CAyBC","sourcesContent":["import { getLoggerFor } from '../../logging/LogUtil';\nimport { createErrorMessage } from '../../util/errors/ErrorUtil';\nimport type { NotificationHandler } from './NotificationHandler';\nimport { StateHandler } from './StateHandler';\nimport type { SubscriptionInfo, SubscriptionStorage } from './SubscriptionStorage';\n\n/**\n * Handles the `state` feature by calling a {@link NotificationHandler}\n * in case the {@link SubscriptionInfo} has a `state` value.\n *\n * Deletes the `state` parameter from the info afterwards.\n */\nexport class BaseStateHandler extends StateHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly handler: NotificationHandler;\n  private readonly storage: SubscriptionStorage;\n\n  public constructor(handler: NotificationHandler, storage: SubscriptionStorage) {\n    super();\n    this.handler = handler;\n    this.storage = storage;\n  }\n\n  public async handle({ info }: { info: SubscriptionInfo }): Promise<void> {\n    if (info.state) {\n      const topic = { path: info.topic };\n      try {\n        await this.handler.handleSafe({ info, topic });\n        // Remove the state once the relevant notification has been sent\n        delete info.state;\n        await this.storage.update(info);\n      } catch (error: unknown) {\n        this.logger.error(`Problem emitting state notification: ${createErrorMessage(error)}`);\n      }\n    }\n  }\n}\n"]}