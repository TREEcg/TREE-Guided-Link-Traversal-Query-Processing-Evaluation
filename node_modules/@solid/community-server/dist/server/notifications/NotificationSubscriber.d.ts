import type { CredentialsExtractor } from '../../authentication/CredentialsExtractor';
import type { Authorizer } from '../../authorization/Authorizer';
import type { PermissionReader } from '../../authorization/PermissionReader';
import type { ResponseDescription } from '../../http/output/response/ResponseDescription';
import type { OperationHttpHandlerInput } from '../OperationHttpHandler';
import { OperationHttpHandler } from '../OperationHttpHandler';
import type { SubscriptionType } from './SubscriptionType';
export interface NotificationSubscriberArgs {
    /**
     * The {@link SubscriptionType} with all the necessary information.
     */
    subscriptionType: SubscriptionType;
    /**
     * Used to extract the credentials from the request.
     */
    credentialsExtractor: CredentialsExtractor;
    /**
     * Used to determine which permissions the found credentials have.
     */
    permissionReader: PermissionReader;
    /**
     * Used to determine if the request has the necessary permissions.
     */
    authorizer: Authorizer;
    /**
     * Overrides the expiration feature of subscriptions by making sure they always expire after the `maxDuration` value.
     * In case the expiration of the subscription is shorter than `maxDuration` the original value will be kept.
     * Value is set in minutes. 0 is infinite.
     */
    maxDuration?: number;
}
/**
 * Handles notification subscriptions.
 *
 * Uses the information from the provided {@link SubscriptionType} to validate the input
 * and verify the request has the required permissions available.
 */
export declare class NotificationSubscriber extends OperationHttpHandler {
    protected logger: import("../..").Logger;
    private readonly subscriptionType;
    private readonly credentialsExtractor;
    private readonly permissionReader;
    private readonly authorizer;
    private readonly maxDuration;
    constructor(args: NotificationSubscriberArgs);
    handle({ operation, request }: OperationHttpHandlerInput): Promise<ResponseDescription>;
    private authorize;
}
