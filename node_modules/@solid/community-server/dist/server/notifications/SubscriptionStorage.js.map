{"version":3,"file":"SubscriptionStorage.js","sourceRoot":"","sources":["../../../src/server/notifications/SubscriptionStorage.ts"],"names":[],"mappings":"","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Subscription } from './Subscription';\n\n/**\n * The info provided during a subscription.\n * `features` can contain custom values relevant for a specific subscription type.\n */\nexport type SubscriptionInfo<T = Record<string, unknown>> = {\n  id: string;\n  topic: string;\n  type: string;\n  expiration?: number;\n  accept?: string;\n  rate?: number;\n  state?: string;\n  lastEmit: number;\n  features: T;\n};\n\n/**\n * Stores all the information necessary to keep track of notification subscriptions.\n * Besides the standard subscription info it also stores features specific to a certain subscription type.\n *\n * This storage assumes that a subscription can only have a single identifier as its topic.\n */\nexport interface SubscriptionStorage<T extends Record<string, unknown> = Record<string, unknown>> {\n  /**\n   * Creates info corresponding to the given subscription and features.\n   * This does not store the generated info in the storage.\n   * @param subscription - Subscription to generate info of.\n   * @param features - Features to add to the info\n   */\n  create: (subscription: Subscription, features: T) => SubscriptionInfo<T>;\n\n  /**\n   * Returns the info for the requested subscription.\n   * `undefined` if no match was found or if the subscription expired.\n   * @param id - The identifier of the subscription.\n   */\n  get: (id: string) => Promise<SubscriptionInfo<T> | undefined>;\n\n  /**\n   * Returns the identifiers of all subscription entries that have the given identifier as their topic.\n   * @param topic - The identifier that is the topic.\n   */\n  getAll: (topic: ResourceIdentifier) => Promise<string[]>;\n\n  /**\n   * Adds the given info to the storage.\n   * @param info - Info to add.\n   */\n  add: (info: SubscriptionInfo<T>) => Promise<void>;\n\n  /**\n   * Updates the given subscription info.\n   * The `id` and the `topic` can not be updated.\n   * @param info - The info to update.\n   */\n  update: (info: SubscriptionInfo<T>) => Promise<void>;\n\n  /**\n   * Deletes the given subscription from the storage.\n   * @param id - The identifier of the subscription\n   */\n  delete: (id: string) => Promise<void>;\n}\n"]}