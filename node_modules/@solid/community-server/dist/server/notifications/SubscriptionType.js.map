{"version":3,"file":"SubscriptionType.js","sourceRoot":"","sources":["../../../src/server/notifications/SubscriptionType.ts"],"names":[],"mappings":"","sourcesContent":["import type { InferType } from 'yup';\nimport type { Credentials } from '../../authentication/Credentials';\nimport type { AccessMap } from '../../authorization/permissions/Permissions';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { SUBSCRIBE_SCHEMA } from './Subscription';\nimport type { SubscriptionInfo } from './SubscriptionStorage';\n\nexport interface SubscriptionResponse<TFeat extends Record<string, unknown> = Record<string, unknown>> {\n  response: Representation;\n  info: SubscriptionInfo<TFeat>;\n}\n\n/**\n * A specific subscription type as defined at https://solidproject.org/TR/notifications-protocol#subscription-types.\n */\nexport interface SubscriptionType<TSub extends typeof SUBSCRIBE_SCHEMA = typeof SUBSCRIBE_SCHEMA,\n  TFeat extends Record<string, unknown> = Record<string, unknown>> {\n  /**\n   * The expected type value in the JSON-LD body of requests subscribing for this subscription type.\n   */\n  readonly type: string;\n  /**\n   * An extension of {@link SUBSCRIBE_SCHEMA} that can be used to parse and valide an incoming subscription request.\n   */\n  readonly schema: TSub;\n  /**\n   * Determines which modes are required to allow the given subscription.\n   * @param subscription - The subscription to verify.\n   *\n   * @returns The required modes.\n   */\n  extractModes: (subscription: InferType<TSub>) => Promise<AccessMap>;\n  /**\n   * Registers the given subscription.\n   * @param subscription - The subscription to register.\n   * @param credentials - The credentials of the client trying to subscribe.\n   *\n   * @returns A {@link Representation} to return as a response and the generated {@link SubscriptionInfo}.\n   */\n  subscribe: (subscription: InferType<TSub>, credentials: Credentials) => Promise<SubscriptionResponse<TFeat>>;\n}\n"]}