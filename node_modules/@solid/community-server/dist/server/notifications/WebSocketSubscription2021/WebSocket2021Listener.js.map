{"version":3,"file":"WebSocket2021Listener.js","sourceRoot":"","sources":["../../../../src/server/notifications/WebSocketSubscription2021/WebSocket2021Listener.ts"],"names":[],"mappings":";;;AAGA,sDAAwD;AACxD,2EAAwE;AAIxE;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,iDAAuB;IAOhE,YAAmB,OAA4B,EAAE,OAA6B,EAAE,KAAuB;QACrG,KAAK,EAAE,CAAC;QAPS,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAQ7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC;IAChD,CAAC;IAES,KAAK,CAAC,gBAAgB,CAAC,SAAoB,EAAE,cAA+B;QACpF,sEAAsE;QACtE,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,EAAE,EAAE,oBAAoB,CAAC,CAAC;QAEpE,IAAI,GAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,EAAE;YAC9B,SAAS,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YAC5C,OAAO,SAAS,CAAC,KAAK,EAAE,CAAC;SAC1B;QAED,MAAM,IAAI,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,IAAI,CAAC,IAAI,EAAE;YACT,SAAS,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;YAC7D,OAAO,SAAS,CAAC,KAAK,EAAE,CAAC;SAC1B;QAED,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAExC,IAAI,CAAC,IAAI,EAAE;YACT,8CAA8C;YAC9C,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YAC3C,OAAO,SAAS,CAAC,KAAK,EAAE,CAAC;SAC1B;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yDAAyD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAExF,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IACrD,CAAC;CACF;AA3CD,sDA2CC","sourcesContent":["import type { IncomingMessage } from 'http';\nimport type { WebSocket } from 'ws';\nimport type { InteractionRoute } from '../../../identity/interaction/routing/InteractionRoute';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport { WebSocketServerListener } from '../../WebSocketServerListener';\nimport type { SubscriptionStorage } from '../SubscriptionStorage';\nimport type { WebSocket2021Handler } from './WebSocket2021Handler';\n\n/**\n * Listens for WebSocket connections and verifies if they are valid WebSocketSubscription2021 connections,\n * in which case its {@link WebSocket2021Handler} will be alerted.\n */\nexport class WebSocket2021Listener extends WebSocketServerListener {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly storage: SubscriptionStorage;\n  private readonly handler: WebSocket2021Handler;\n  private readonly path: string;\n\n  public constructor(storage: SubscriptionStorage, handler: WebSocket2021Handler, route: InteractionRoute) {\n    super();\n    this.storage = storage;\n    this.handler = handler;\n    this.path = new URL(route.getPath()).pathname;\n  }\n\n  protected async handleConnection(webSocket: WebSocket, upgradeRequest: IncomingMessage): Promise<void> {\n    // Base doesn't matter since we just want the path and query parameter\n    const url = new URL(upgradeRequest.url ?? '', 'http://example.com');\n\n    if (url.pathname !== this.path) {\n      webSocket.send('Unknown WebSocket target.');\n      return webSocket.close();\n    }\n\n    const auth = url.searchParams.get('auth');\n\n    if (!auth) {\n      webSocket.send('Missing auth parameter from WebSocket URL.');\n      return webSocket.close();\n    }\n\n    const id = decodeURI(auth);\n    const info = await this.storage.get(id);\n\n    if (!info) {\n      // Info not being there implies it has expired\n      webSocket.send(`Subscription has expired`);\n      return webSocket.close();\n    }\n\n    this.logger.info(`Accepted WebSocket connection listening to changes on ${info.topic}`);\n\n    await this.handler.handleSafe({ info, webSocket });\n  }\n}\n"]}