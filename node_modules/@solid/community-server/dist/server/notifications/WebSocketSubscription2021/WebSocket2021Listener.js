"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocket2021Listener = void 0;
const LogUtil_1 = require("../../../logging/LogUtil");
const WebSocketServerListener_1 = require("../../WebSocketServerListener");
/**
 * Listens for WebSocket connections and verifies if they are valid WebSocketSubscription2021 connections,
 * in which case its {@link WebSocket2021Handler} will be alerted.
 */
class WebSocket2021Listener extends WebSocketServerListener_1.WebSocketServerListener {
    constructor(storage, handler, route) {
        super();
        this.logger = (0, LogUtil_1.getLoggerFor)(this);
        this.storage = storage;
        this.handler = handler;
        this.path = new URL(route.getPath()).pathname;
    }
    async handleConnection(webSocket, upgradeRequest) {
        // Base doesn't matter since we just want the path and query parameter
        const url = new URL(upgradeRequest.url ?? '', 'http://example.com');
        if (url.pathname !== this.path) {
            webSocket.send('Unknown WebSocket target.');
            return webSocket.close();
        }
        const auth = url.searchParams.get('auth');
        if (!auth) {
            webSocket.send('Missing auth parameter from WebSocket URL.');
            return webSocket.close();
        }
        const id = decodeURI(auth);
        const info = await this.storage.get(id);
        if (!info) {
            // Info not being there implies it has expired
            webSocket.send(`Subscription has expired`);
            return webSocket.close();
        }
        this.logger.info(`Accepted WebSocket connection listening to changes on ${info.topic}`);
        await this.handler.handleSafe({ info, webSocket });
    }
}
exports.WebSocket2021Listener = WebSocket2021Listener;
//# sourceMappingURL=WebSocket2021Listener.js.map