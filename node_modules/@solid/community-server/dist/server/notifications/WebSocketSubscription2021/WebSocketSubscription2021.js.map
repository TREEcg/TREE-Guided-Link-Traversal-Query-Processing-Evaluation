{"version":3,"file":"WebSocketSubscription2021.js","sourceRoot":"","sources":["../../../../src/server/notifications/WebSocketSubscription2021/WebSocketSubscription2021.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAE7B,gFAA4E;AAC5E,0FAAuF;AAEvF,sDAAwD;AACxD,6DAAiE;AACjE,mEAAwE;AACxE,kDAAuD;AAEvD,kDAAmD;AAInD,MAAM,IAAI,GAAG,2BAA2B,CAAC;AACzC,MAAM,MAAM,GAAG,+BAAgB,CAAC,KAAK,CAAC;IACpC,IAAI,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAE,IAAI,CAAE,CAAC;CAC1C,CAAC,CAAC;AAEH;;;;;GAKG;AACH,MAAa,yBAAyB;IASpC,YAAmB,OAA4B,EAAE,KAAuB;QARrD,WAAM,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;QAK/B,SAAI,GAAG,IAAI,CAAC;QACZ,WAAM,GAAG,MAAM,CAAC;QAG9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,YAA0B;QAClD,OAAO,IAAI,qCAAqB,CAAa,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,EAAE,wBAAU,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;IACnG,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,YAA0B;QAC/C,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAG;YACb,UAAU,EAAE,CAAE,mCAAoB,CAAE;YACpC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;SACzE,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,kCAAmB,CAAC,CAAC;QAEtF,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5B,CAAC;CACF;AA/BD,8DA+BC","sourcesContent":["import { string } from 'yup';\nimport type { AccessMap } from '../../../authorization/permissions/Permissions';\nimport { AccessMode } from '../../../authorization/permissions/Permissions';\nimport { BasicRepresentation } from '../../../http/representation/BasicRepresentation';\nimport type { InteractionRoute } from '../../../identity/interaction/routing/InteractionRoute';\nimport { getLoggerFor } from '../../../logging/LogUtil';\nimport { APPLICATION_LD_JSON } from '../../../util/ContentTypes';\nimport { IdentifierSetMultiMap } from '../../../util/map/IdentifierMap';\nimport { CONTEXT_NOTIFICATION } from '../Notification';\nimport type { Subscription } from '../Subscription';\nimport { SUBSCRIBE_SCHEMA } from '../Subscription';\nimport type { SubscriptionStorage } from '../SubscriptionStorage';\nimport type { SubscriptionResponse, SubscriptionType } from '../SubscriptionType';\n\nconst type = 'WebSocketSubscription2021';\nconst schema = SUBSCRIBE_SCHEMA.shape({\n  type: string().required().oneOf([ type ]),\n});\n\n/**\n * The notification subscription type WebSocketSubscription2021 as described in\n * https://solidproject.org/TR/websocket-subscription-2021\n *\n * Requires read permissions on a resource to be able to receive notifications.\n */\nexport class WebSocketSubscription2021 implements SubscriptionType<typeof schema> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly storage: SubscriptionStorage;\n  private readonly path: string;\n\n  public readonly type = type;\n  public readonly schema = schema;\n\n  public constructor(storage: SubscriptionStorage, route: InteractionRoute) {\n    this.storage = storage;\n    this.path = route.getPath();\n  }\n\n  public async extractModes(subscription: Subscription): Promise<AccessMap> {\n    return new IdentifierSetMultiMap<AccessMode>([[{ path: subscription.topic }, AccessMode.read ]]);\n  }\n\n  public async subscribe(subscription: Subscription): Promise<SubscriptionResponse> {\n    const info = this.storage.create(subscription, {});\n    await this.storage.add(info);\n\n    const jsonld = {\n      '@context': [ CONTEXT_NOTIFICATION ],\n      type: this.type,\n      source: `ws${this.path.slice('http'.length)}?auth=${encodeURI(info.id)}`,\n    };\n    const response = new BasicRepresentation(JSON.stringify(jsonld), APPLICATION_LD_JSON);\n\n    return { response, info };\n  }\n}\n"]}