import type { SingleThreaded } from '../../../init/cluster/SingleThreaded';
import { AsyncHandler } from '../../../util/handlers/AsyncHandler';
import type { NotificationEmitter, NotificationEmitterInput } from '../NotificationEmitter';
import type { SubscriptionStorage } from '../SubscriptionStorage';
import type { WebSocket2021Handler, WebSocket2021HandlerInput } from './WebSocket2021Handler';
/**
 * Keeps track of the WebSockets that were opened for a WebSocketSubscription2021 subscription
 * and uses them to emit events when necessary.
 *
 * SingleThreaded since the opened WebSocket might not be stored in the same thread
 * as the one that emits a relevant event.
 *
 * `cleanupTimer` defines in minutes how often the stored WebSockets are closed
 * if their corresponding subscription has expired.
 * Defaults to 60 minutes.
 * Although the WebSocket connection might still be open,
 * if the subscription has expired no notifications will be sent.
 */
export declare class WebSocket2021Emitter extends AsyncHandler<NotificationEmitterInput | WebSocket2021HandlerInput> implements NotificationEmitter, WebSocket2021Handler, SingleThreaded {
    protected readonly logger: import("../../..").Logger;
    private readonly storage;
    private readonly webSockets;
    constructor(storage: SubscriptionStorage, cleanupTimer?: number);
    handle(input: NotificationEmitterInput): Promise<void>;
    handle(input: WebSocket2021HandlerInput): Promise<void>;
    private isWebSocket2021HandlerInput;
    /**
     * Close all WebSockets that are attached to a subscription that no longer exists.
     */
    private closeExpiredSockets;
}
