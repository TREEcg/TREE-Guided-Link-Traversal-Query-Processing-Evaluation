{"version":3,"file":"Subscription.js","sourceRoot":"","sources":["../../../src/server/notifications/Subscription.ts"],"names":[],"mappings":";;;AAAA,uDAAoD;AAEpD,6BAAoD;AACpD,iDAAsD;AAEtD;;;GAGG;AACU,QAAA,gBAAgB,GAAG,IAAA,YAAM,EAAC;IACrC,UAAU,EAAE,IAAA,WAAK,EAAC,IAAA,YAAM,GAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;QACnD,IAAI,EAAE,4BAA4B;QAClC,OAAO,EAAE,OAAO,mCAAoB,wDAAwD;QAC5F,IAAI,EAAE,CAAC,OAAO,EAAW,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,mCAAoB,CAAC,CAAC;KAC7E,CAAC;IACF,IAAI,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE;IACzB,KAAK,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE;IAC1B,KAAK,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE;IAC1B,UAAU,EAAE,IAAA,YAAM,GAAE,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAsB,EAAE;IACrE,0CAA0C;IAC1C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE;IAClC,IAAI,EAAE,IAAA,YAAM,GAAE,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAsB,EAAE;IAC/D,0CAA0C;IAC1C,IAAA,4BAAS,EAAC,IAAA,wBAAK,EAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC/C,MAAM,EAAE,IAAA,YAAM,GAAE,CAAC,QAAQ,EAAE;CAC5B,CAAC,CAAC","sourcesContent":["import { parse, toSeconds } from 'iso8601-duration';\nimport type { InferType } from 'yup';\nimport { array, number, object, string } from 'yup';\nimport { CONTEXT_NOTIFICATION } from './Notification';\n\n/**\n * A JSON parsing schema that can be used to parse subscription input.\n * Specific subscription types can extend this schema with their own custom keys.\n */\nexport const SUBSCRIBE_SCHEMA = object({\n  '@context': array(string()).ensure().required().test({\n    name: 'RequireNotificationContext',\n    message: `The ${CONTEXT_NOTIFICATION} context is required in the subscription JSON-LD body.`,\n    test: (context): boolean => Boolean(context?.includes(CONTEXT_NOTIFICATION)),\n  }),\n  type: string().required(),\n  topic: string().required(),\n  state: string().optional(),\n  expiration: number().transform((value, original): number | undefined =>\n    // Convert the date string to milliseconds\n    Date.parse(original)).optional(),\n  rate: number().transform((value, original): number | undefined =>\n    // Convert the rate string to milliseconds\n    toSeconds(parse(original)) * 1000).optional(),\n  accept: string().optional(),\n});\nexport type Subscription = InferType<typeof SUBSCRIBE_SCHEMA>;\n"]}