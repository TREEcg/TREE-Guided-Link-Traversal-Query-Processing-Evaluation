{"version":3,"file":"NotificationDescriber.js","sourceRoot":"","sources":["../../../src/server/notifications/NotificationDescriber.ts"],"names":[],"mappings":";;;AACA,2BAAiC;AAGjC,0DAAsD;AACtD,sEAAmE;AACnE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,gBAAW,CAAC;AAE3B,QAAA,6BAA6B,GAAG;IAC3C,qBAAM,CAAC,MAAM;IACb,qBAAM,CAAC,UAAU;IACjB,qBAAM,CAAC,IAAI;IACX,qBAAM,CAAC,KAAK;CACb,CAAC;AAEF;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,mCAAgB;IAMzD;;;;;;OAMG;IACH,YAAmB,KAAuB,EAAE,QAAgB,EAAE,IAAY,EACxE,WAAqB,qCAA6B;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAyB;QAC3C,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,YAAY,GAAG,SAAS,CAAC,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEhE,OAAO;YACL,IAAI,CAAC,OAAO,EAAE,qBAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC;YAC7D,IAAI,CAAC,YAAY,EAAE,kBAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;YAC7C,IAAI,CAAC,YAAY,EAAE,qBAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC;YACxD,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAQ,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,qBAAM,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC3F,CAAC;IACJ,CAAC;CACF;AAjCD,sDAiCC","sourcesContent":["import type { NamedNode, Quad } from '@rdfjs/types';\nimport { DataFactory } from 'n3';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { InteractionRoute } from '../../identity/interaction/routing/InteractionRoute';\nimport { NOTIFY, RDF } from '../../util/Vocabularies';\nimport { StorageDescriber } from '../description/StorageDescriber';\nconst { namedNode, quad } = DataFactory;\n\nexport const DEFAULT_NOTIFICATION_FEATURES = [\n  NOTIFY.accept,\n  NOTIFY.expiration,\n  NOTIFY.rate,\n  NOTIFY.state,\n];\n\n/**\n * Outputs quads describing how to access a specific Notification Subscription type and its features,\n * as described in https://solidproject.org/TR/notifications-protocol#discovery.\n */\nexport class NotificationDescriber extends StorageDescriber {\n  private readonly path: NamedNode;\n  private readonly relative: string;\n  private readonly type: NamedNode;\n  private readonly features: NamedNode[];\n\n  /**\n   * @param route - The route describing where the subscription target is.\n   * @param relative - Will be appended to the input path to generate a named node corresponding to the description.\n   *                   E.g., \"#websocketNotification\".\n   * @param type - The rdf:type of the subscription type.\n   * @param features - Which features are enabled for this subscription type. Defaults to accept/expiration/rate/state.\n   */\n  public constructor(route: InteractionRoute, relative: string, type: string,\n    features: string[] = DEFAULT_NOTIFICATION_FEATURES) {\n    super();\n    this.path = namedNode(route.getPath());\n    this.relative = relative;\n    this.type = namedNode(type);\n    this.features = features.map(namedNode);\n  }\n\n  public async handle(input: ResourceIdentifier): Promise<Quad[]> {\n    const subject = namedNode(input.path);\n    const subscription = namedNode(`${input.path}${this.relative}`);\n\n    return [\n      quad(subject, NOTIFY.terms.notificationChannel, subscription),\n      quad(subscription, RDF.terms.type, this.type),\n      quad(subscription, NOTIFY.terms.subscription, this.path),\n      ...this.features.map((feature): Quad => quad(subscription, NOTIFY.terms.feature, feature)),\n    ];\n  }\n}\n"]}