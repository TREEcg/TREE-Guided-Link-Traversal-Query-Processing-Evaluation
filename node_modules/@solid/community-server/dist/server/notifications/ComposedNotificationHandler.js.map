{"version":3,"file":"ComposedNotificationHandler.js","sourceRoot":"","sources":["../../../src/server/notifications/ComposedNotificationHandler.ts"],"names":[],"mappings":";;;AAGA,+DAA4D;AAS5D;;;;;GAKG;AACH,MAAa,2BAA4B,SAAQ,yCAAmB;IAKlE,YAAmB,IAAqC;QACtD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAA+B;QACpD,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA+B;QACjD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAExD,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,sEAAsE;QACtE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,YAAY,CAAC,KAAK,EAAE;YAC7D,OAAO;SACR;QAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;IACtE,CAAC;CACF;AA5BD,kEA4BC","sourcesContent":["import type { NotificationGenerator } from './generate/NotificationGenerator';\nimport type { NotificationEmitter } from './NotificationEmitter';\nimport type { NotificationHandlerInput } from './NotificationHandler';\nimport { NotificationHandler } from './NotificationHandler';\nimport type { NotificationSerializer } from './serialize/NotificationSerializer';\n\nexport interface ComposedNotificationHandlerArgs {\n  generator: NotificationGenerator;\n  serializer: NotificationSerializer;\n  emitter: NotificationEmitter;\n}\n\n/**\n * Generates, serializes and emits a {@link Notification} using a {@link NotificationGenerator},\n * {@link NotificationSerializer} and {@link NotificationEmitter}.\n *\n * Will not emit an event in case it has the same state as the subscription info.\n */\nexport class ComposedNotificationHandler extends NotificationHandler {\n  private readonly generator: NotificationGenerator;\n  private readonly serializer: NotificationSerializer;\n  private readonly emitter: NotificationEmitter;\n\n  public constructor(args: ComposedNotificationHandlerArgs) {\n    super();\n    this.generator = args.generator;\n    this.serializer = args.serializer;\n    this.emitter = args.emitter;\n  }\n\n  public async canHandle(input: NotificationHandlerInput): Promise<void> {\n    await this.generator.canHandle(input);\n  }\n\n  public async handle(input: NotificationHandlerInput): Promise<void> {\n    const notification = await this.generator.handle(input);\n\n    const { state } = input.info;\n    // In case the state matches there is no need to send the notification\n    if (typeof state === 'string' && state === notification.state) {\n      return;\n    }\n\n    const representation = await this.serializer.handleSafe({ info: input.info, notification });\n    await this.emitter.handleSafe({ info: input.info, representation });\n  }\n}\n"]}